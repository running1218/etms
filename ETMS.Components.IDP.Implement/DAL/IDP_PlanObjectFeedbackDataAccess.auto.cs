//==================================================================================================
//Version 1.0, auto-generated.
//Generated By xueyb.
//Date: 2012-5-6 11:46:50.
//==================================================================================================
//==================================================================================================
//This file is generated by CodeGenerator(Ver 2.1), a product of ZhouYonghua(Zhou_Yonghua@163.com).
//==================================================================================================

using System;
using System.Collections.Generic;
using System.Data;

using System.Data.SqlClient;
using ETMS.Utility.Data;

using ETMS.Components.IDP.API.Entity;

namespace ETMS.Components.IDP.Implement.DAL
{
    /// <summary>
    /// IDP计划目标反馈表数据访问
    /// </summary>
    public partial class IDP_PlanObjectFeedbackDataAccess
	{
		/// <summary>
		/// 增加
		/// </summary>
		public void Add(IDP_PlanObjectFeedback iDP_PlanObjectFeedback)
		{
			string commandName = "dbo.Pr_IDP_PlanObjectFeedback_Insert";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSWrite, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@IDPPlanObjectFeedbackID", SqlDbType.UniqueIdentifier),
					new SqlParameter("@IDPPlanObjectID", SqlDbType.UniqueIdentifier),
					new SqlParameter("@StudentEvaluation", SqlDbType.NVarChar, -1),
					new SqlParameter("@StudentEvaluationTime", SqlDbType.DateTime),
					new SqlParameter("@SuperiorEvaluation", SqlDbType.NVarChar, -1),
					new SqlParameter("@SuperiorEvaluationTime", SqlDbType.DateTime),
					new SqlParameter("@SuperiorName", SqlDbType.NVarChar, 128),
					new SqlParameter("@CreateTime", SqlDbType.DateTime),
					new SqlParameter("@CreateUserID", SqlDbType.Int),
					new SqlParameter("@CreateUser", SqlDbType.NVarChar, 128),
					new SqlParameter("@ModifyTime", SqlDbType.DateTime),
					new SqlParameter("@ModifyUser", SqlDbType.NVarChar, 128),
					new SqlParameter("@Remark", SqlDbType.NVarChar, -1)
					};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSWrite, commandName, parms);
			}
			
			parms[0].Value = iDP_PlanObjectFeedback.IDPPlanObjectFeedbackID;
			parms[1].Value = iDP_PlanObjectFeedback.IDPPlanObjectID;
			if (iDP_PlanObjectFeedback.StudentEvaluation!= null){ parms[2].Value = iDP_PlanObjectFeedback.StudentEvaluation; } else { parms[2].Value = DBNull.Value; }
			parms[3].Value = iDP_PlanObjectFeedback.StudentEvaluationTime;
			if (iDP_PlanObjectFeedback.SuperiorEvaluation!= null){ parms[4].Value = iDP_PlanObjectFeedback.SuperiorEvaluation; } else { parms[4].Value = DBNull.Value; }
			parms[5].Value = iDP_PlanObjectFeedback.SuperiorEvaluationTime;
			if (iDP_PlanObjectFeedback.SuperiorName!= null){ parms[6].Value = iDP_PlanObjectFeedback.SuperiorName; } else { parms[6].Value = DBNull.Value; }
			parms[7].Value = iDP_PlanObjectFeedback.CreateTime;
			parms[8].Value = iDP_PlanObjectFeedback.CreateUserID;
			if (iDP_PlanObjectFeedback.CreateUser!= null){ parms[9].Value = iDP_PlanObjectFeedback.CreateUser; } else { parms[9].Value = DBNull.Value; }
			parms[10].Value = iDP_PlanObjectFeedback.ModifyTime;
			if (iDP_PlanObjectFeedback.ModifyUser!= null){ parms[11].Value = iDP_PlanObjectFeedback.ModifyUser; } else { parms[11].Value = DBNull.Value; }
			if (iDP_PlanObjectFeedback.Remark!= null){ parms[12].Value = iDP_PlanObjectFeedback.Remark; } else { parms[12].Value = DBNull.Value; }
			#endregion
			SqlHelper.ExecuteNonQuery(ConnectionString.ETMSWrite, CommandType.StoredProcedure, commandName, parms);
			
		}
		
		/// <summary>
		/// 删除
		/// </summary>
		public void Remove(Guid iDPPlanObjectFeedbackID)
		{
			string commandName = "dbo.Pr_IDP_PlanObjectFeedback_Delete";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSWrite, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@IDPPlanObjectFeedbackID", SqlDbType.UniqueIdentifier)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSWrite, commandName, parms);
			}
			
			parms[0].Value = iDPPlanObjectFeedbackID;
			
			#endregion
			SqlHelper.ExecuteNonQuery(ConnectionString.ETMSWrite, CommandType.StoredProcedure, commandName, parms);
		}
		
		/// <summary>
		/// 保存
		/// </summary>
		public void Save(IDP_PlanObjectFeedback iDP_PlanObjectFeedback)
		{
			string commandName = "dbo.Pr_IDP_PlanObjectFeedback_Update";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSWrite, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@IDPPlanObjectFeedbackID", SqlDbType.UniqueIdentifier),
					new SqlParameter("@IDPPlanObjectID", SqlDbType.UniqueIdentifier),
					new SqlParameter("@StudentEvaluation", SqlDbType.NVarChar, -1),
					new SqlParameter("@StudentEvaluationTime", SqlDbType.DateTime),
					new SqlParameter("@SuperiorEvaluation", SqlDbType.NVarChar, -1),
					new SqlParameter("@SuperiorEvaluationTime", SqlDbType.DateTime),
					new SqlParameter("@SuperiorName", SqlDbType.NVarChar, 128),
					new SqlParameter("@CreateTime", SqlDbType.DateTime),
					new SqlParameter("@CreateUserID", SqlDbType.Int),
					new SqlParameter("@CreateUser", SqlDbType.NVarChar, 128),
					new SqlParameter("@ModifyTime", SqlDbType.DateTime),
					new SqlParameter("@ModifyUser", SqlDbType.NVarChar, 128),
					new SqlParameter("@Remark", SqlDbType.NVarChar, -1)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSWrite, commandName, parms);
			}
			
			parms[0].Value = iDP_PlanObjectFeedback.IDPPlanObjectFeedbackID;
			parms[1].Value = iDP_PlanObjectFeedback.IDPPlanObjectID;
			if (iDP_PlanObjectFeedback.StudentEvaluation!= null){ parms[2].Value = iDP_PlanObjectFeedback.StudentEvaluation; } else { parms[2].Value = DBNull.Value; }
			parms[3].Value = iDP_PlanObjectFeedback.StudentEvaluationTime;
			if (iDP_PlanObjectFeedback.SuperiorEvaluation!= null){ parms[4].Value = iDP_PlanObjectFeedback.SuperiorEvaluation; } else { parms[4].Value = DBNull.Value; }
			parms[5].Value = iDP_PlanObjectFeedback.SuperiorEvaluationTime;
			if (iDP_PlanObjectFeedback.SuperiorName!= null){ parms[6].Value = iDP_PlanObjectFeedback.SuperiorName; } else { parms[6].Value = DBNull.Value; }
			parms[7].Value = iDP_PlanObjectFeedback.CreateTime;
			parms[8].Value = iDP_PlanObjectFeedback.CreateUserID;
			if (iDP_PlanObjectFeedback.CreateUser!= null){ parms[9].Value = iDP_PlanObjectFeedback.CreateUser; } else { parms[9].Value = DBNull.Value; }
			parms[10].Value = iDP_PlanObjectFeedback.ModifyTime;
			if (iDP_PlanObjectFeedback.ModifyUser!= null){ parms[11].Value = iDP_PlanObjectFeedback.ModifyUser; } else { parms[11].Value = DBNull.Value; }
			if (iDP_PlanObjectFeedback.Remark!= null){ parms[12].Value = iDP_PlanObjectFeedback.Remark; } else { parms[12].Value = DBNull.Value; }
			#endregion
			SqlHelper.ExecuteNonQuery(ConnectionString.ETMSWrite, CommandType.StoredProcedure, commandName, parms);
		}
		
		/// <summary>
		/// 根据标识获取对象
		/// </summary>
		public IDP_PlanObjectFeedback GetById(Guid iDPPlanObjectFeedbackID)
		{
			IDP_PlanObjectFeedback iDP_PlanObjectFeedback = null;
			
			string commandName = "dbo.Pr_IDP_PlanObjectFeedback_GetByPK";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSRead, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@IDPPlanObjectFeedbackID", SqlDbType.UniqueIdentifier)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSRead, commandName, parms);
			}
			
			parms[0].Value = iDPPlanObjectFeedbackID;
			
			#endregion
			using (SqlDataReader dataReader = SqlHelper.ExecuteReader(ConnectionString.ETMSRead, CommandType.StoredProcedure, commandName, parms))
			{
				if (dataReader.Read())
				{
					iDP_PlanObjectFeedback = PopulateIDP_PlanObjectFeedbackFromDataReader(dataReader);
				}
			}
			
			return iDP_PlanObjectFeedback;
		}				
		
		/// <summary>
		/// 根据参数获取对象列表（分页，可排序）
		/// </summary>
		public DataTable GetPagedList(int pageIndex, int pageSize, string sortExpression, string criteria, out int totalRecords)
		{			
			string commandName = "dbo.Pr_IDP_PlanObjectFeedback_GetPagedList";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSRead, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@PageIndex", SqlDbType.Int),
					new SqlParameter("@PageSize", SqlDbType.Int),
					new SqlParameter("@SortExpression", SqlDbType.VarChar),
					new SqlParameter("@Criteria", SqlDbType.VarChar),
					new SqlParameter("@ReturnValue", SqlDbType.Int, 4, ParameterDirection.ReturnValue, false, 0, 0, String.Empty, DataRowVersion.Default, null)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSRead, commandName, parms);
			}
			
			parms[0].Value = pageIndex;
			parms[1].Value = pageSize;
			parms[2].Value = sortExpression;
			parms[3].Value = criteria;
			#endregion
			DataTable dt=SqlHelper.ExecuteDataset(ConnectionString.ETMSRead, CommandType.StoredProcedure, commandName, parms).Tables[0];
			totalRecords = (int)parms[4].Value;
			return dt;
		}
		
	    /// <summary>
		/// 根据参数获取对象列表（分页，可排序）
		/// </summary>
		public IList<IDP_PlanObjectFeedback> GetEntityList(int pageIndex, int pageSize, string sortExpression, string criteria, out int totalRecords)
		{			
            IList<IDP_PlanObjectFeedback> list=new List<IDP_PlanObjectFeedback>();
			string commandName = "dbo.Pr_IDP_PlanObjectFeedback_GetPagedList";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSRead, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@PageIndex", SqlDbType.Int),
					new SqlParameter("@PageSize", SqlDbType.Int),
					new SqlParameter("@SortExpression", SqlDbType.VarChar),
					new SqlParameter("@Criteria", SqlDbType.VarChar),
					new SqlParameter("@ReturnValue", SqlDbType.Int, 4, ParameterDirection.ReturnValue, false, 0, 0, String.Empty, DataRowVersion.Default, null)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSRead, commandName, parms);
			}
			
			parms[0].Value = pageIndex;
			parms[1].Value = pageSize;
			parms[2].Value = sortExpression;
			parms[3].Value = criteria;
			#endregion
            using (SqlDataReader dataReader = SqlHelper.ExecuteReader(ConnectionString.ETMSRead, CommandType.StoredProcedure, commandName, parms))
			{
				while (dataReader.Read())
				{
					list.Add(PopulateIDP_PlanObjectFeedbackFromDataReader(dataReader));
				}
			}			
			totalRecords = (int)parms[4].Value;
			return list;
		}
		
		/// <summary>
		/// 从DataReader中读取数据到业务对象
		/// </summary>
		private IDP_PlanObjectFeedback PopulateIDP_PlanObjectFeedbackFromDataReader(SqlDataReader reader)
		{
			IDP_PlanObjectFeedback iDP_PlanObjectFeedback = new IDP_PlanObjectFeedback();
			
			int iDPPlanObjectFeedbackIDIndex = reader.GetOrdinal("IDPPlanObjectFeedbackID"); 
			if(!reader.IsDBNull(iDPPlanObjectFeedbackIDIndex))
			{
				iDP_PlanObjectFeedback.IDPPlanObjectFeedbackID= reader.GetGuid(iDPPlanObjectFeedbackIDIndex);
			}
			
			int iDPPlanObjectIDIndex = reader.GetOrdinal("IDPPlanObjectID"); 
			if(!reader.IsDBNull(iDPPlanObjectIDIndex))
			{
				iDP_PlanObjectFeedback.IDPPlanObjectID= reader.GetGuid(iDPPlanObjectIDIndex);
			}
			
			int studentEvaluationIndex = reader.GetOrdinal("StudentEvaluation"); 
			if(!reader.IsDBNull(studentEvaluationIndex))
			{
				iDP_PlanObjectFeedback.StudentEvaluation= reader.GetString(studentEvaluationIndex);
			}
			
			int studentEvaluationTimeIndex = reader.GetOrdinal("StudentEvaluationTime"); 
			if(!reader.IsDBNull(studentEvaluationTimeIndex))
			{
				iDP_PlanObjectFeedback.StudentEvaluationTime= reader.GetDateTime(studentEvaluationTimeIndex);
			}
			
			int superiorEvaluationIndex = reader.GetOrdinal("SuperiorEvaluation"); 
			if(!reader.IsDBNull(superiorEvaluationIndex))
			{
				iDP_PlanObjectFeedback.SuperiorEvaluation= reader.GetString(superiorEvaluationIndex);
			}
			
			int superiorEvaluationTimeIndex = reader.GetOrdinal("SuperiorEvaluationTime"); 
			if(!reader.IsDBNull(superiorEvaluationTimeIndex))
			{
				iDP_PlanObjectFeedback.SuperiorEvaluationTime= reader.GetDateTime(superiorEvaluationTimeIndex);
			}
			
			int superiorNameIndex = reader.GetOrdinal("SuperiorName"); 
			if(!reader.IsDBNull(superiorNameIndex))
			{
				iDP_PlanObjectFeedback.SuperiorName= reader.GetString(superiorNameIndex);
			}
			
			int createTimeIndex = reader.GetOrdinal("CreateTime"); 
			if(!reader.IsDBNull(createTimeIndex))
			{
				iDP_PlanObjectFeedback.CreateTime= reader.GetDateTime(createTimeIndex);
			}
			
			int createUserIDIndex = reader.GetOrdinal("CreateUserID"); 
			if(!reader.IsDBNull(createUserIDIndex))
			{
				iDP_PlanObjectFeedback.CreateUserID= reader.GetInt32(createUserIDIndex);
			}
			
			int createUserIndex = reader.GetOrdinal("CreateUser"); 
			if(!reader.IsDBNull(createUserIndex))
			{
				iDP_PlanObjectFeedback.CreateUser= reader.GetString(createUserIndex);
			}
			
			int modifyTimeIndex = reader.GetOrdinal("ModifyTime"); 
			if(!reader.IsDBNull(modifyTimeIndex))
			{
				iDP_PlanObjectFeedback.ModifyTime= reader.GetDateTime(modifyTimeIndex);
			}
			
			int modifyUserIndex = reader.GetOrdinal("ModifyUser"); 
			if(!reader.IsDBNull(modifyUserIndex))
			{
				iDP_PlanObjectFeedback.ModifyUser= reader.GetString(modifyUserIndex);
			}
			
			int remarkIndex = reader.GetOrdinal("Remark"); 
			if(!reader.IsDBNull(remarkIndex))
			{
				iDP_PlanObjectFeedback.Remark= reader.GetString(remarkIndex);
			}
			
			return iDP_PlanObjectFeedback; 
		}
	}
}
