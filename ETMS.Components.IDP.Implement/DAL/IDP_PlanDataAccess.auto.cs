//==================================================================================================
//Version 1.0, auto-generated.
//Generated By xueyb.
//Date: 2012-5-6 11:46:50.
//==================================================================================================
//==================================================================================================
//This file is generated by CodeGenerator(Ver 2.1), a product of ZhouYonghua(Zhou_Yonghua@163.com).
//==================================================================================================

using System;
using System.Collections.Generic;
using System.Data;

using System.Data.SqlClient;
using ETMS.Utility.Data;

using ETMS.Components.IDP.API.Entity;

namespace ETMS.Components.IDP.Implement.DAL
{
    /// <summary>
    /// IDP计划表数据访问
    /// </summary>
    public partial class IDP_PlanDataAccess
	{
		/// <summary>
		/// 增加
		/// </summary>
		public void Add(IDP_Plan iDP_Plan)
		{
			string commandName = "dbo.Pr_IDP_Plan_Insert";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSWrite, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@IDP_PlanID", SqlDbType.UniqueIdentifier),
					new SqlParameter("@MentorID", SqlDbType.Int),
					new SqlParameter("@StudentID", SqlDbType.Int),
					new SqlParameter("@IDPTypeID", SqlDbType.Int),
					new SqlParameter("@IDPPlanBeginTime", SqlDbType.DateTime),
					new SqlParameter("@IDPPlanEndTime", SqlDbType.DateTime),
					new SqlParameter("@SuperiorName", SqlDbType.NVarChar, 128),
					new SqlParameter("@SuperiorPosition", SqlDbType.NVarChar, 100),
					new SqlParameter("@FillingDate", SqlDbType.DateTime),
					new SqlParameter("@CompletionRate", SqlDbType.Int),
					new SqlParameter("@Evaluation", SqlDbType.NVarChar, -1),
					new SqlParameter("@IsClose", SqlDbType.Bit),
					new SqlParameter("@CloseTime", SqlDbType.DateTime),
					new SqlParameter("@CloseUser", SqlDbType.NVarChar, 128),
					new SqlParameter("@OrgID", SqlDbType.Int),
					new SqlParameter("@CreateTime", SqlDbType.DateTime),
					new SqlParameter("@CreateUserID", SqlDbType.Int),
					new SqlParameter("@CreateUser", SqlDbType.NVarChar, 128),
					new SqlParameter("@ModifyTime", SqlDbType.DateTime),
					new SqlParameter("@ModifyUser", SqlDbType.NVarChar, 128),
					new SqlParameter("@Remark", SqlDbType.NVarChar, -1)
					};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSWrite, commandName, parms);
			}
			
			parms[0].Value = iDP_Plan.IDP_PlanID;
			parms[1].Value = iDP_Plan.MentorID;
			parms[2].Value = iDP_Plan.StudentID;
			parms[3].Value = iDP_Plan.IDPTypeID;
			parms[4].Value = iDP_Plan.IDPPlanBeginTime;
			parms[5].Value = iDP_Plan.IDPPlanEndTime;
			if (iDP_Plan.SuperiorName!= null){ parms[6].Value = iDP_Plan.SuperiorName; } else { parms[6].Value = DBNull.Value; }
			if (iDP_Plan.SuperiorPosition!= null){ parms[7].Value = iDP_Plan.SuperiorPosition; } else { parms[7].Value = DBNull.Value; }
			parms[8].Value = iDP_Plan.FillingDate;
			parms[9].Value = iDP_Plan.CompletionRate;
			if (iDP_Plan.Evaluation!= null){ parms[10].Value = iDP_Plan.Evaluation; } else { parms[10].Value = DBNull.Value; }
			parms[11].Value = iDP_Plan.IsClose;
			parms[12].Value = iDP_Plan.CloseTime;
			if (iDP_Plan.CloseUser!= null){ parms[13].Value = iDP_Plan.CloseUser; } else { parms[13].Value = DBNull.Value; }
			parms[14].Value = iDP_Plan.OrgID;
			parms[15].Value = iDP_Plan.CreateTime;
			parms[16].Value = iDP_Plan.CreateUserID;
			if (iDP_Plan.CreateUser!= null){ parms[17].Value = iDP_Plan.CreateUser; } else { parms[17].Value = DBNull.Value; }
			parms[18].Value = iDP_Plan.ModifyTime;
			if (iDP_Plan.ModifyUser!= null){ parms[19].Value = iDP_Plan.ModifyUser; } else { parms[19].Value = DBNull.Value; }
			if (iDP_Plan.Remark!= null){ parms[20].Value = iDP_Plan.Remark; } else { parms[20].Value = DBNull.Value; }
			#endregion
			SqlHelper.ExecuteNonQuery(ConnectionString.ETMSWrite, CommandType.StoredProcedure, commandName, parms);
			
		}
		
		/// <summary>
		/// 删除
		/// </summary>
		public void Remove(Guid iDP_PlanID)
		{
			string commandName = "dbo.Pr_IDP_Plan_Delete";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSWrite, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@IDP_PlanID", SqlDbType.UniqueIdentifier)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSWrite, commandName, parms);
			}
			
			parms[0].Value = iDP_PlanID;
			
			#endregion
			SqlHelper.ExecuteNonQuery(ConnectionString.ETMSWrite, CommandType.StoredProcedure, commandName, parms);
		}
		
		/// <summary>
		/// 保存
		/// </summary>
		public void Save(IDP_Plan iDP_Plan)
		{
			string commandName = "dbo.Pr_IDP_Plan_Update";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSWrite, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@IDP_PlanID", SqlDbType.UniqueIdentifier),
					new SqlParameter("@MentorID", SqlDbType.Int),
					new SqlParameter("@StudentID", SqlDbType.Int),
					new SqlParameter("@IDPTypeID", SqlDbType.Int),
					new SqlParameter("@IDPPlanBeginTime", SqlDbType.DateTime),
					new SqlParameter("@IDPPlanEndTime", SqlDbType.DateTime),
					new SqlParameter("@SuperiorName", SqlDbType.NVarChar, 128),
					new SqlParameter("@SuperiorPosition", SqlDbType.NVarChar, 100),
					new SqlParameter("@FillingDate", SqlDbType.DateTime),
					new SqlParameter("@CompletionRate", SqlDbType.Int),
					new SqlParameter("@Evaluation", SqlDbType.NVarChar, -1),
					new SqlParameter("@IsClose", SqlDbType.Bit),
					new SqlParameter("@CloseTime", SqlDbType.DateTime),
					new SqlParameter("@CloseUser", SqlDbType.NVarChar, 128),
					new SqlParameter("@OrgID", SqlDbType.Int),
					new SqlParameter("@CreateTime", SqlDbType.DateTime),
					new SqlParameter("@CreateUserID", SqlDbType.Int),
					new SqlParameter("@CreateUser", SqlDbType.NVarChar, 128),
					new SqlParameter("@ModifyTime", SqlDbType.DateTime),
					new SqlParameter("@ModifyUser", SqlDbType.NVarChar, 128),
					new SqlParameter("@Remark", SqlDbType.NVarChar, -1)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSWrite, commandName, parms);
			}
			
			parms[0].Value = iDP_Plan.IDP_PlanID;
			parms[1].Value = iDP_Plan.MentorID;
			parms[2].Value = iDP_Plan.StudentID;
			parms[3].Value = iDP_Plan.IDPTypeID;
			parms[4].Value = iDP_Plan.IDPPlanBeginTime;
			parms[5].Value = iDP_Plan.IDPPlanEndTime;
			if (iDP_Plan.SuperiorName!= null){ parms[6].Value = iDP_Plan.SuperiorName; } else { parms[6].Value = DBNull.Value; }
			if (iDP_Plan.SuperiorPosition!= null){ parms[7].Value = iDP_Plan.SuperiorPosition; } else { parms[7].Value = DBNull.Value; }
			parms[8].Value = iDP_Plan.FillingDate;
			parms[9].Value = iDP_Plan.CompletionRate;
			if (iDP_Plan.Evaluation!= null){ parms[10].Value = iDP_Plan.Evaluation; } else { parms[10].Value = DBNull.Value; }
			parms[11].Value = iDP_Plan.IsClose;
			parms[12].Value = iDP_Plan.CloseTime;
			if (iDP_Plan.CloseUser!= null){ parms[13].Value = iDP_Plan.CloseUser; } else { parms[13].Value = DBNull.Value; }
			parms[14].Value = iDP_Plan.OrgID;
			parms[15].Value = iDP_Plan.CreateTime;
			parms[16].Value = iDP_Plan.CreateUserID;
			if (iDP_Plan.CreateUser!= null){ parms[17].Value = iDP_Plan.CreateUser; } else { parms[17].Value = DBNull.Value; }
			parms[18].Value = iDP_Plan.ModifyTime;
			if (iDP_Plan.ModifyUser!= null){ parms[19].Value = iDP_Plan.ModifyUser; } else { parms[19].Value = DBNull.Value; }
			if (iDP_Plan.Remark!= null){ parms[20].Value = iDP_Plan.Remark; } else { parms[20].Value = DBNull.Value; }
			#endregion
			SqlHelper.ExecuteNonQuery(ConnectionString.ETMSWrite, CommandType.StoredProcedure, commandName, parms);
		}
		
		/// <summary>
		/// 根据标识获取对象
		/// </summary>
		public IDP_Plan GetById(Guid iDP_PlanID)
		{
			IDP_Plan iDP_Plan = null;
			
			string commandName = "dbo.Pr_IDP_Plan_GetByPK";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSRead, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@IDP_PlanID", SqlDbType.UniqueIdentifier)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSRead, commandName, parms);
			}
			
			parms[0].Value = iDP_PlanID;
			
			#endregion
			using (SqlDataReader dataReader = SqlHelper.ExecuteReader(ConnectionString.ETMSRead, CommandType.StoredProcedure, commandName, parms))
			{
				if (dataReader.Read())
				{
					iDP_Plan = PopulateIDP_PlanFromDataReader(dataReader);
				}
			}
			
			return iDP_Plan;
		}				
		
		/// <summary>
		/// 根据参数获取对象列表（分页，可排序）
		/// </summary>
		public DataTable GetPagedList(int pageIndex, int pageSize, string sortExpression, string criteria, out int totalRecords)
		{			
			string commandName = "dbo.Pr_IDP_Plan_GetPagedList";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSRead, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@PageIndex", SqlDbType.Int),
					new SqlParameter("@PageSize", SqlDbType.Int),
					new SqlParameter("@SortExpression", SqlDbType.VarChar),
					new SqlParameter("@Criteria", SqlDbType.VarChar),
					new SqlParameter("@ReturnValue", SqlDbType.Int, 4, ParameterDirection.ReturnValue, false, 0, 0, String.Empty, DataRowVersion.Default, null)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSRead, commandName, parms);
			}
			
			parms[0].Value = pageIndex;
			parms[1].Value = pageSize;
			parms[2].Value = sortExpression;
			parms[3].Value = criteria;
			#endregion
			DataTable dt=SqlHelper.ExecuteDataset(ConnectionString.ETMSRead, CommandType.StoredProcedure, commandName, parms).Tables[0];
			totalRecords = (int)parms[4].Value;
			return dt;
		}

        /// <summary>
        /// 根据参数获取对象列表（分页，可排序）
        /// </summary>
        public DataTable GetPagedListForManage(int pageIndex, int pageSize, string sortExpression, string criteria, out int totalRecords)
        {
            string commandName = "dbo.Pr_IDP_Plan_GetPagedListForManage";
            #region Parameters
            SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSRead, commandName);
            if (parms == null)
            {
                parms = new SqlParameter[] {
					new SqlParameter("@PageIndex", SqlDbType.Int),
					new SqlParameter("@PageSize", SqlDbType.Int),
					new SqlParameter("@SortExpression", SqlDbType.VarChar),
					new SqlParameter("@Criteria", SqlDbType.VarChar),
					new SqlParameter("@ReturnValue", SqlDbType.Int, 4, ParameterDirection.ReturnValue, false, 0, 0, String.Empty, DataRowVersion.Default, null)
				};
                SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSRead, commandName, parms);
            }

            parms[0].Value = pageIndex;
            parms[1].Value = pageSize;
            parms[2].Value = sortExpression;
            parms[3].Value = criteria;
            #endregion
            DataTable dt = SqlHelper.ExecuteDataset(ConnectionString.ETMSRead, CommandType.StoredProcedure, commandName, parms).Tables[0];
            totalRecords = (int)parms[4].Value;
            return dt;
        }
		

	    /// <summary>
		/// 根据参数获取对象列表（分页，可排序）
		/// </summary>
		public IList<IDP_Plan> GetEntityList(int pageIndex, int pageSize, string sortExpression, string criteria, out int totalRecords)
		{			
            IList<IDP_Plan> list=new List<IDP_Plan>();
			string commandName = "dbo.Pr_IDP_Plan_GetPagedList";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSRead, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@PageIndex", SqlDbType.Int),
					new SqlParameter("@PageSize", SqlDbType.Int),
					new SqlParameter("@SortExpression", SqlDbType.VarChar),
					new SqlParameter("@Criteria", SqlDbType.VarChar),
					new SqlParameter("@ReturnValue", SqlDbType.Int, 4, ParameterDirection.ReturnValue, false, 0, 0, String.Empty, DataRowVersion.Default, null)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSRead, commandName, parms);
			}
			
			parms[0].Value = pageIndex;
			parms[1].Value = pageSize;
			parms[2].Value = sortExpression;
			parms[3].Value = criteria;
			#endregion
            using (SqlDataReader dataReader = SqlHelper.ExecuteReader(ConnectionString.ETMSRead, CommandType.StoredProcedure, commandName, parms))
			{
				while (dataReader.Read())
				{
					list.Add(PopulateIDP_PlanFromDataReader(dataReader));
				}
			}			
			totalRecords = (int)parms[4].Value;
			return list;
		}
		
		/// <summary>
		/// 从DataReader中读取数据到业务对象
		/// </summary>
		private IDP_Plan PopulateIDP_PlanFromDataReader(SqlDataReader reader)
		{
			IDP_Plan iDP_Plan = new IDP_Plan();
			
			int iDP_PlanIDIndex = reader.GetOrdinal("IDP_PlanID"); 
			if(!reader.IsDBNull(iDP_PlanIDIndex))
			{
				iDP_Plan.IDP_PlanID= reader.GetGuid(iDP_PlanIDIndex);
			}
			
			int mentorIDIndex = reader.GetOrdinal("MentorID"); 
			if(!reader.IsDBNull(mentorIDIndex))
			{
				iDP_Plan.MentorID= reader.GetInt32(mentorIDIndex);
			}
			
			int studentIDIndex = reader.GetOrdinal("StudentID"); 
			if(!reader.IsDBNull(studentIDIndex))
			{
				iDP_Plan.StudentID= reader.GetInt32(studentIDIndex);
			}
			
			int iDPTypeIDIndex = reader.GetOrdinal("IDPTypeID"); 
			if(!reader.IsDBNull(iDPTypeIDIndex))
			{
				iDP_Plan.IDPTypeID= reader.GetInt32(iDPTypeIDIndex);
			}
			
			int iDPPlanBeginTimeIndex = reader.GetOrdinal("IDPPlanBeginTime"); 
			if(!reader.IsDBNull(iDPPlanBeginTimeIndex))
			{
				iDP_Plan.IDPPlanBeginTime= reader.GetDateTime(iDPPlanBeginTimeIndex);
			}
			
			int iDPPlanEndTimeIndex = reader.GetOrdinal("IDPPlanEndTime"); 
			if(!reader.IsDBNull(iDPPlanEndTimeIndex))
			{
				iDP_Plan.IDPPlanEndTime= reader.GetDateTime(iDPPlanEndTimeIndex);
			}
			
			int superiorNameIndex = reader.GetOrdinal("SuperiorName"); 
			if(!reader.IsDBNull(superiorNameIndex))
			{
				iDP_Plan.SuperiorName= reader.GetString(superiorNameIndex);
			}
			
			int superiorPositionIndex = reader.GetOrdinal("SuperiorPosition"); 
			if(!reader.IsDBNull(superiorPositionIndex))
			{
				iDP_Plan.SuperiorPosition= reader.GetString(superiorPositionIndex);
			}
			
			int fillingDateIndex = reader.GetOrdinal("FillingDate"); 
			if(!reader.IsDBNull(fillingDateIndex))
			{
				iDP_Plan.FillingDate= reader.GetDateTime(fillingDateIndex);
			}
			
			int completionRateIndex = reader.GetOrdinal("CompletionRate"); 
			if(!reader.IsDBNull(completionRateIndex))
			{
				iDP_Plan.CompletionRate= reader.GetInt32(completionRateIndex);
			}
			
			int evaluationIndex = reader.GetOrdinal("Evaluation"); 
			if(!reader.IsDBNull(evaluationIndex))
			{
				iDP_Plan.Evaluation= reader.GetString(evaluationIndex);
			}
			
			int isCloseIndex = reader.GetOrdinal("IsClose"); 
			if(!reader.IsDBNull(isCloseIndex))
			{
				iDP_Plan.IsClose= reader.GetBoolean(isCloseIndex);
			}
			
			int closeTimeIndex = reader.GetOrdinal("CloseTime"); 
			if(!reader.IsDBNull(closeTimeIndex))
			{
				iDP_Plan.CloseTime= reader.GetDateTime(closeTimeIndex);
			}
			
			int closeUserIndex = reader.GetOrdinal("CloseUser"); 
			if(!reader.IsDBNull(closeUserIndex))
			{
				iDP_Plan.CloseUser= reader.GetString(closeUserIndex);
			}
			
			int orgIDIndex = reader.GetOrdinal("OrgID"); 
			if(!reader.IsDBNull(orgIDIndex))
			{
				iDP_Plan.OrgID= reader.GetInt32(orgIDIndex);
			}
			
			int createTimeIndex = reader.GetOrdinal("CreateTime"); 
			if(!reader.IsDBNull(createTimeIndex))
			{
				iDP_Plan.CreateTime= reader.GetDateTime(createTimeIndex);
			}
			
			int createUserIDIndex = reader.GetOrdinal("CreateUserID"); 
			if(!reader.IsDBNull(createUserIDIndex))
			{
				iDP_Plan.CreateUserID= reader.GetInt32(createUserIDIndex);
			}
			
			int createUserIndex = reader.GetOrdinal("CreateUser"); 
			if(!reader.IsDBNull(createUserIndex))
			{
				iDP_Plan.CreateUser= reader.GetString(createUserIndex);
			}
			
			int modifyTimeIndex = reader.GetOrdinal("ModifyTime"); 
			if(!reader.IsDBNull(modifyTimeIndex))
			{
				iDP_Plan.ModifyTime= reader.GetDateTime(modifyTimeIndex);
			}
			
			int modifyUserIndex = reader.GetOrdinal("ModifyUser"); 
			if(!reader.IsDBNull(modifyUserIndex))
			{
				iDP_Plan.ModifyUser= reader.GetString(modifyUserIndex);
			}
			
			int remarkIndex = reader.GetOrdinal("Remark"); 
			if(!reader.IsDBNull(remarkIndex))
			{
				iDP_Plan.Remark= reader.GetString(remarkIndex);
			}
			
			return iDP_Plan; 
		}
	}
}
