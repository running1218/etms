//==================================================================================================
//Version 1.0, auto-generated.
//Generated By xueyb.
//Date: 2012-5-6 11:46:50.
//==================================================================================================
//==================================================================================================
//This file is generated by CodeGenerator(Ver 2.1), a product of ZhouYonghua(Zhou_Yonghua@163.com).
//==================================================================================================

using System;
using System.Collections.Generic;
using System.Data;

using System.Data.SqlClient;
using ETMS.Utility.Data;

using ETMS.Components.IDP.API.Entity;

namespace ETMS.Components.IDP.Implement.DAL
{
    /// <summary>
    /// IDP计划学习内容明细表数据访问
    /// </summary>
    public partial class IDP_PlanContentDetailDataAccess
	{
		/// <summary>
		/// 增加
		/// </summary>
		public void Add(IDP_PlanContentDetail iDP_PlanContentDetail)
		{
			string commandName = "dbo.Pr_IDP_PlanContentDetail_Insert";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSWrite, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@PlanContentDetailID", SqlDbType.UniqueIdentifier),
					new SqlParameter("@IDPPlanContentID", SqlDbType.UniqueIdentifier),
					new SqlParameter("@IDPSourceID", SqlDbType.Int),
					new SqlParameter("@IDPPlanContentSourceID", SqlDbType.NVarChar, 100),
					new SqlParameter("@CreateTime", SqlDbType.DateTime),
					new SqlParameter("@CreateUser", SqlDbType.NVarChar, 128),
					new SqlParameter("@CreateUserID", SqlDbType.Int),
					new SqlParameter("@ModifyTime", SqlDbType.DateTime),
					new SqlParameter("@ModifyUser", SqlDbType.NVarChar, 128),
					new SqlParameter("@Remark", SqlDbType.NVarChar, -1)
					};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSWrite, commandName, parms);
			}
			
			parms[0].Value = iDP_PlanContentDetail.PlanContentDetailID;
			parms[1].Value = iDP_PlanContentDetail.IDPPlanContentID;
			parms[2].Value = iDP_PlanContentDetail.IDPSourceID;
			if (iDP_PlanContentDetail.IDPPlanContentSourceID!= null){ parms[3].Value = iDP_PlanContentDetail.IDPPlanContentSourceID; } else { parms[3].Value = DBNull.Value; }
			parms[4].Value = iDP_PlanContentDetail.CreateTime;
			if (iDP_PlanContentDetail.CreateUser!= null){ parms[5].Value = iDP_PlanContentDetail.CreateUser; } else { parms[5].Value = DBNull.Value; }
			parms[6].Value = iDP_PlanContentDetail.CreateUserID;
			parms[7].Value = iDP_PlanContentDetail.ModifyTime;
			if (iDP_PlanContentDetail.ModifyUser!= null){ parms[8].Value = iDP_PlanContentDetail.ModifyUser; } else { parms[8].Value = DBNull.Value; }
			if (iDP_PlanContentDetail.Remark!= null){ parms[9].Value = iDP_PlanContentDetail.Remark; } else { parms[9].Value = DBNull.Value; }
			#endregion
			SqlHelper.ExecuteNonQuery(ConnectionString.ETMSWrite, CommandType.StoredProcedure, commandName, parms);
			
		}
		
		/// <summary>
		/// 删除
		/// </summary>
		public void Remove(Guid planContentDetailID)
		{
			string commandName = "dbo.Pr_IDP_PlanContentDetail_Delete";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSWrite, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@PlanContentDetailID", SqlDbType.UniqueIdentifier)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSWrite, commandName, parms);
			}
			
			parms[0].Value = planContentDetailID;
			
			#endregion
			SqlHelper.ExecuteNonQuery(ConnectionString.ETMSWrite, CommandType.StoredProcedure, commandName, parms);
		}
		
		/// <summary>
		/// 保存
		/// </summary>
		public void Save(IDP_PlanContentDetail iDP_PlanContentDetail)
		{
			string commandName = "dbo.Pr_IDP_PlanContentDetail_Update";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSWrite, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@PlanContentDetailID", SqlDbType.UniqueIdentifier),
					new SqlParameter("@IDPPlanContentID", SqlDbType.UniqueIdentifier),
					new SqlParameter("@IDPSourceID", SqlDbType.Int),
					new SqlParameter("@IDPPlanContentSourceID", SqlDbType.NVarChar, 100),
					new SqlParameter("@CreateTime", SqlDbType.DateTime),
					new SqlParameter("@CreateUser", SqlDbType.NVarChar, 128),
					new SqlParameter("@CreateUserID", SqlDbType.Int),
					new SqlParameter("@ModifyTime", SqlDbType.DateTime),
					new SqlParameter("@ModifyUser", SqlDbType.NVarChar, 128),
					new SqlParameter("@Remark", SqlDbType.NVarChar, -1)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSWrite, commandName, parms);
			}
			
			parms[0].Value = iDP_PlanContentDetail.PlanContentDetailID;
			parms[1].Value = iDP_PlanContentDetail.IDPPlanContentID;
			parms[2].Value = iDP_PlanContentDetail.IDPSourceID;
			if (iDP_PlanContentDetail.IDPPlanContentSourceID!= null){ parms[3].Value = iDP_PlanContentDetail.IDPPlanContentSourceID; } else { parms[3].Value = DBNull.Value; }
			parms[4].Value = iDP_PlanContentDetail.CreateTime;
			if (iDP_PlanContentDetail.CreateUser!= null){ parms[5].Value = iDP_PlanContentDetail.CreateUser; } else { parms[5].Value = DBNull.Value; }
			parms[6].Value = iDP_PlanContentDetail.CreateUserID;
			parms[7].Value = iDP_PlanContentDetail.ModifyTime;
			if (iDP_PlanContentDetail.ModifyUser!= null){ parms[8].Value = iDP_PlanContentDetail.ModifyUser; } else { parms[8].Value = DBNull.Value; }
			if (iDP_PlanContentDetail.Remark!= null){ parms[9].Value = iDP_PlanContentDetail.Remark; } else { parms[9].Value = DBNull.Value; }
			#endregion
			SqlHelper.ExecuteNonQuery(ConnectionString.ETMSWrite, CommandType.StoredProcedure, commandName, parms);
		}
		
		/// <summary>
		/// 根据标识获取对象
		/// </summary>
		public IDP_PlanContentDetail GetById(Guid planContentDetailID)
		{
			IDP_PlanContentDetail iDP_PlanContentDetail = null;
			
			string commandName = "dbo.Pr_IDP_PlanContentDetail_GetByPK";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSRead, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@PlanContentDetailID", SqlDbType.UniqueIdentifier)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSRead, commandName, parms);
			}
			
			parms[0].Value = planContentDetailID;
			
			#endregion
			using (SqlDataReader dataReader = SqlHelper.ExecuteReader(ConnectionString.ETMSRead, CommandType.StoredProcedure, commandName, parms))
			{
				if (dataReader.Read())
				{
					iDP_PlanContentDetail = PopulateIDP_PlanContentDetailFromDataReader(dataReader);
				}
			}
			
			return iDP_PlanContentDetail;
		}				
		
		/// <summary>
		/// 根据参数获取对象列表（分页，可排序）
		/// </summary>
		public DataTable GetPagedList(int pageIndex, int pageSize, string sortExpression, string criteria, out int totalRecords)
		{			
			string commandName = "dbo.Pr_IDP_PlanContentDetail_GetPagedList";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSRead, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@PageIndex", SqlDbType.Int),
					new SqlParameter("@PageSize", SqlDbType.Int),
					new SqlParameter("@SortExpression", SqlDbType.VarChar),
					new SqlParameter("@Criteria", SqlDbType.VarChar),
					new SqlParameter("@ReturnValue", SqlDbType.Int, 4, ParameterDirection.ReturnValue, false, 0, 0, String.Empty, DataRowVersion.Default, null)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSRead, commandName, parms);
			}
			
			parms[0].Value = pageIndex;
			parms[1].Value = pageSize;
			parms[2].Value = sortExpression;
			parms[3].Value = criteria;
			#endregion
			DataTable dt=SqlHelper.ExecuteDataset(ConnectionString.ETMSRead, CommandType.StoredProcedure, commandName, parms).Tables[0];
			totalRecords = (int)parms[4].Value;
			return dt;
		}
		
	    /// <summary>
		/// 根据参数获取对象列表（分页，可排序）
		/// </summary>
		public IList<IDP_PlanContentDetail> GetEntityList(int pageIndex, int pageSize, string sortExpression, string criteria, out int totalRecords)
		{			
            IList<IDP_PlanContentDetail> list=new List<IDP_PlanContentDetail>();
			string commandName = "dbo.Pr_IDP_PlanContentDetail_GetPagedList";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSRead, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@PageIndex", SqlDbType.Int),
					new SqlParameter("@PageSize", SqlDbType.Int),
					new SqlParameter("@SortExpression", SqlDbType.VarChar),
					new SqlParameter("@Criteria", SqlDbType.VarChar),
					new SqlParameter("@ReturnValue", SqlDbType.Int, 4, ParameterDirection.ReturnValue, false, 0, 0, String.Empty, DataRowVersion.Default, null)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSRead, commandName, parms);
			}
			
			parms[0].Value = pageIndex;
			parms[1].Value = pageSize;
			parms[2].Value = sortExpression;
			parms[3].Value = criteria;
			#endregion
            using (SqlDataReader dataReader = SqlHelper.ExecuteReader(ConnectionString.ETMSRead, CommandType.StoredProcedure, commandName, parms))
			{
				while (dataReader.Read())
				{
					list.Add(PopulateIDP_PlanContentDetailFromDataReader(dataReader));
				}
			}			
			totalRecords = (int)parms[4].Value;
			return list;
		}
		
		/// <summary>
		/// 从DataReader中读取数据到业务对象
		/// </summary>
		private IDP_PlanContentDetail PopulateIDP_PlanContentDetailFromDataReader(SqlDataReader reader)
		{
			IDP_PlanContentDetail iDP_PlanContentDetail = new IDP_PlanContentDetail();
			
			int planContentDetailIDIndex = reader.GetOrdinal("PlanContentDetailID"); 
			if(!reader.IsDBNull(planContentDetailIDIndex))
			{
				iDP_PlanContentDetail.PlanContentDetailID= reader.GetGuid(planContentDetailIDIndex);
			}
			
			int iDPPlanContentIDIndex = reader.GetOrdinal("IDPPlanContentID"); 
			if(!reader.IsDBNull(iDPPlanContentIDIndex))
			{
				iDP_PlanContentDetail.IDPPlanContentID= reader.GetGuid(iDPPlanContentIDIndex);
			}
			
			int iDPSourceIDIndex = reader.GetOrdinal("IDPSourceID"); 
			if(!reader.IsDBNull(iDPSourceIDIndex))
			{
				iDP_PlanContentDetail.IDPSourceID= reader.GetInt32(iDPSourceIDIndex);
			}
			
			int iDPPlanContentSourceIDIndex = reader.GetOrdinal("IDPPlanContentSourceID"); 
			if(!reader.IsDBNull(iDPPlanContentSourceIDIndex))
			{
				iDP_PlanContentDetail.IDPPlanContentSourceID= reader.GetString(iDPPlanContentSourceIDIndex);
			}
			
			int createTimeIndex = reader.GetOrdinal("CreateTime"); 
			if(!reader.IsDBNull(createTimeIndex))
			{
				iDP_PlanContentDetail.CreateTime= reader.GetDateTime(createTimeIndex);
			}
			
			int createUserIndex = reader.GetOrdinal("CreateUser"); 
			if(!reader.IsDBNull(createUserIndex))
			{
				iDP_PlanContentDetail.CreateUser= reader.GetString(createUserIndex);
			}
			
			int createUserIDIndex = reader.GetOrdinal("CreateUserID"); 
			if(!reader.IsDBNull(createUserIDIndex))
			{
				iDP_PlanContentDetail.CreateUserID= reader.GetInt32(createUserIDIndex);
			}
			
			int modifyTimeIndex = reader.GetOrdinal("ModifyTime"); 
			if(!reader.IsDBNull(modifyTimeIndex))
			{
				iDP_PlanContentDetail.ModifyTime= reader.GetDateTime(modifyTimeIndex);
			}
			
			int modifyUserIndex = reader.GetOrdinal("ModifyUser"); 
			if(!reader.IsDBNull(modifyUserIndex))
			{
				iDP_PlanContentDetail.ModifyUser= reader.GetString(modifyUserIndex);
			}
			
			int remarkIndex = reader.GetOrdinal("Remark"); 
			if(!reader.IsDBNull(remarkIndex))
			{
				iDP_PlanContentDetail.Remark= reader.GetString(remarkIndex);
			}
			
			return iDP_PlanContentDetail; 
		}
	}
}
