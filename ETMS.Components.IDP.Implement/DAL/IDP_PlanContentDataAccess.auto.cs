//==================================================================================================
//Version 1.0, auto-generated.
//Generated By xueyb.
//Date: 2012-5-6 11:46:50.
//==================================================================================================
//==================================================================================================
//This file is generated by CodeGenerator(Ver 2.1), a product of ZhouYonghua(Zhou_Yonghua@163.com).
//==================================================================================================

using System;
using System.Collections.Generic;
using System.Data;

using System.Data.SqlClient;
using ETMS.Utility.Data;

using ETMS.Components.IDP.API.Entity;

namespace ETMS.Components.IDP.Implement.DAL
{
    /// <summary>
    /// IDP计划学习内容表数据访问
    /// </summary>
    public partial class IDP_PlanContentDataAccess
	{
		/// <summary>
		/// 增加
		/// </summary>
		public void Add(IDP_PlanContent iDP_PlanContent)
		{
			string commandName = "dbo.Pr_IDP_PlanContent_Insert";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSWrite, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@IDPPlanContentID", SqlDbType.UniqueIdentifier),
					new SqlParameter("@IDP_PlanID", SqlDbType.UniqueIdentifier),
					new SqlParameter("@StudyContent", SqlDbType.NVarChar, -1),
					new SqlParameter("@StudyMode", SqlDbType.NVarChar, -1),
					new SqlParameter("@PlanFinishingTime", SqlDbType.DateTime),
					new SqlParameter("@FinishedState", SqlDbType.Int),
					new SqlParameter("@FinishedTime", SqlDbType.DateTime),
					new SqlParameter("@CreateTime", SqlDbType.DateTime),
					new SqlParameter("@CreateUser", SqlDbType.NVarChar, 128),
					new SqlParameter("@CreateUserID", SqlDbType.Int),
					new SqlParameter("@ModifyTime", SqlDbType.DateTime),
					new SqlParameter("@ModifyUser", SqlDbType.NVarChar, 128),
					new SqlParameter("@Remark", SqlDbType.NVarChar, -1)
					};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSWrite, commandName, parms);
			}
			
			parms[0].Value = iDP_PlanContent.IDPPlanContentID;
			parms[1].Value = iDP_PlanContent.IDP_PlanID;
			if (iDP_PlanContent.StudyContent!= null){ parms[2].Value = iDP_PlanContent.StudyContent; } else { parms[2].Value = DBNull.Value; }
			if (iDP_PlanContent.StudyMode!= null){ parms[3].Value = iDP_PlanContent.StudyMode; } else { parms[3].Value = DBNull.Value; }
			parms[4].Value = iDP_PlanContent.PlanFinishingTime;
			parms[5].Value = iDP_PlanContent.FinishedState;
			parms[6].Value = iDP_PlanContent.FinishedTime;
			parms[7].Value = iDP_PlanContent.CreateTime;
			if (iDP_PlanContent.CreateUser!= null){ parms[8].Value = iDP_PlanContent.CreateUser; } else { parms[8].Value = DBNull.Value; }
			parms[9].Value = iDP_PlanContent.CreateUserID;
			parms[10].Value = iDP_PlanContent.ModifyTime;
			if (iDP_PlanContent.ModifyUser!= null){ parms[11].Value = iDP_PlanContent.ModifyUser; } else { parms[11].Value = DBNull.Value; }
			if (iDP_PlanContent.Remark!= null){ parms[12].Value = iDP_PlanContent.Remark; } else { parms[12].Value = DBNull.Value; }
			#endregion
			SqlHelper.ExecuteNonQuery(ConnectionString.ETMSWrite, CommandType.StoredProcedure, commandName, parms);
			
		}
		
		/// <summary>
		/// 删除
		/// </summary>
		public void Remove(Guid iDPPlanContentID)
		{
			string commandName = "dbo.Pr_IDP_PlanContent_Delete";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSWrite, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@IDPPlanContentID", SqlDbType.UniqueIdentifier)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSWrite, commandName, parms);
			}
			
			parms[0].Value = iDPPlanContentID;
			
			#endregion
			SqlHelper.ExecuteNonQuery(ConnectionString.ETMSWrite, CommandType.StoredProcedure, commandName, parms);
		}
		
		/// <summary>
		/// 保存
		/// </summary>
		public void Save(IDP_PlanContent iDP_PlanContent)
		{
			string commandName = "dbo.Pr_IDP_PlanContent_Update";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSWrite, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@IDPPlanContentID", SqlDbType.UniqueIdentifier),
					new SqlParameter("@IDP_PlanID", SqlDbType.UniqueIdentifier),
					new SqlParameter("@StudyContent", SqlDbType.NVarChar, -1),
					new SqlParameter("@StudyMode", SqlDbType.NVarChar, -1),
					new SqlParameter("@PlanFinishingTime", SqlDbType.DateTime),
					new SqlParameter("@FinishedState", SqlDbType.Int),
					new SqlParameter("@FinishedTime", SqlDbType.DateTime),
					new SqlParameter("@CreateTime", SqlDbType.DateTime),
					new SqlParameter("@CreateUser", SqlDbType.NVarChar, 128),
					new SqlParameter("@CreateUserID", SqlDbType.Int),
					new SqlParameter("@ModifyTime", SqlDbType.DateTime),
					new SqlParameter("@ModifyUser", SqlDbType.NVarChar, 128),
					new SqlParameter("@Remark", SqlDbType.NVarChar, -1)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSWrite, commandName, parms);
			}
			
			parms[0].Value = iDP_PlanContent.IDPPlanContentID;
			parms[1].Value = iDP_PlanContent.IDP_PlanID;
			if (iDP_PlanContent.StudyContent!= null){ parms[2].Value = iDP_PlanContent.StudyContent; } else { parms[2].Value = DBNull.Value; }
			if (iDP_PlanContent.StudyMode!= null){ parms[3].Value = iDP_PlanContent.StudyMode; } else { parms[3].Value = DBNull.Value; }
			parms[4].Value = iDP_PlanContent.PlanFinishingTime;
			parms[5].Value = iDP_PlanContent.FinishedState;
			parms[6].Value = iDP_PlanContent.FinishedTime;
			parms[7].Value = iDP_PlanContent.CreateTime;
			if (iDP_PlanContent.CreateUser!= null){ parms[8].Value = iDP_PlanContent.CreateUser; } else { parms[8].Value = DBNull.Value; }
			parms[9].Value = iDP_PlanContent.CreateUserID;
			parms[10].Value = iDP_PlanContent.ModifyTime;
			if (iDP_PlanContent.ModifyUser!= null){ parms[11].Value = iDP_PlanContent.ModifyUser; } else { parms[11].Value = DBNull.Value; }
			if (iDP_PlanContent.Remark!= null){ parms[12].Value = iDP_PlanContent.Remark; } else { parms[12].Value = DBNull.Value; }
			#endregion
			SqlHelper.ExecuteNonQuery(ConnectionString.ETMSWrite, CommandType.StoredProcedure, commandName, parms);
		}
		
		/// <summary>
		/// 根据标识获取对象
		/// </summary>
		public IDP_PlanContent GetById(Guid iDPPlanContentID)
		{
			IDP_PlanContent iDP_PlanContent = null;
			
			string commandName = "dbo.Pr_IDP_PlanContent_GetByPK";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSRead, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@IDPPlanContentID", SqlDbType.UniqueIdentifier)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSRead, commandName, parms);
			}
			
			parms[0].Value = iDPPlanContentID;
			
			#endregion
			using (SqlDataReader dataReader = SqlHelper.ExecuteReader(ConnectionString.ETMSRead, CommandType.StoredProcedure, commandName, parms))
			{
				if (dataReader.Read())
				{
					iDP_PlanContent = PopulateIDP_PlanContentFromDataReader(dataReader);
				}
			}
			
			return iDP_PlanContent;
		}				
		
		/// <summary>
		/// 根据参数获取对象列表（分页，可排序）
		/// </summary>
		public DataTable GetPagedList(int pageIndex, int pageSize, string sortExpression, string criteria, out int totalRecords)
		{			
			string commandName = "dbo.Pr_IDP_PlanContent_GetPagedList";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSRead, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@PageIndex", SqlDbType.Int),
					new SqlParameter("@PageSize", SqlDbType.Int),
					new SqlParameter("@SortExpression", SqlDbType.VarChar),
					new SqlParameter("@Criteria", SqlDbType.VarChar),
					new SqlParameter("@ReturnValue", SqlDbType.Int, 4, ParameterDirection.ReturnValue, false, 0, 0, String.Empty, DataRowVersion.Default, null)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSRead, commandName, parms);
			}
			
			parms[0].Value = pageIndex;
			parms[1].Value = pageSize;
			parms[2].Value = sortExpression;
			parms[3].Value = criteria;
			#endregion
			DataTable dt=SqlHelper.ExecuteDataset(ConnectionString.ETMSRead, CommandType.StoredProcedure, commandName, parms).Tables[0];
			totalRecords = (int)parms[4].Value;
			return dt;
		}
		
	    /// <summary>
		/// 根据参数获取对象列表（分页，可排序）
		/// </summary>
		public IList<IDP_PlanContent> GetEntityList(int pageIndex, int pageSize, string sortExpression, string criteria, out int totalRecords)
		{			
            IList<IDP_PlanContent> list=new List<IDP_PlanContent>();
			string commandName = "dbo.Pr_IDP_PlanContent_GetPagedList";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSRead, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@PageIndex", SqlDbType.Int),
					new SqlParameter("@PageSize", SqlDbType.Int),
					new SqlParameter("@SortExpression", SqlDbType.VarChar),
					new SqlParameter("@Criteria", SqlDbType.VarChar),
					new SqlParameter("@ReturnValue", SqlDbType.Int, 4, ParameterDirection.ReturnValue, false, 0, 0, String.Empty, DataRowVersion.Default, null)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSRead, commandName, parms);
			}
			
			parms[0].Value = pageIndex;
			parms[1].Value = pageSize;
			parms[2].Value = sortExpression;
			parms[3].Value = criteria;
			#endregion
            using (SqlDataReader dataReader = SqlHelper.ExecuteReader(ConnectionString.ETMSRead, CommandType.StoredProcedure, commandName, parms))
			{
				while (dataReader.Read())
				{
					list.Add(PopulateIDP_PlanContentFromDataReader(dataReader));
				}
			}			
			totalRecords = (int)parms[4].Value;
			return list;
		}
		
		/// <summary>
		/// 从DataReader中读取数据到业务对象
		/// </summary>
		private IDP_PlanContent PopulateIDP_PlanContentFromDataReader(SqlDataReader reader)
		{
			IDP_PlanContent iDP_PlanContent = new IDP_PlanContent();
			
			int iDPPlanContentIDIndex = reader.GetOrdinal("IDPPlanContentID"); 
			if(!reader.IsDBNull(iDPPlanContentIDIndex))
			{
				iDP_PlanContent.IDPPlanContentID= reader.GetGuid(iDPPlanContentIDIndex);
			}
			
			int iDP_PlanIDIndex = reader.GetOrdinal("IDP_PlanID"); 
			if(!reader.IsDBNull(iDP_PlanIDIndex))
			{
				iDP_PlanContent.IDP_PlanID= reader.GetGuid(iDP_PlanIDIndex);
			}
			
			int studyContentIndex = reader.GetOrdinal("StudyContent"); 
			if(!reader.IsDBNull(studyContentIndex))
			{
				iDP_PlanContent.StudyContent= reader.GetString(studyContentIndex);
			}
			
			int studyModeIndex = reader.GetOrdinal("StudyMode"); 
			if(!reader.IsDBNull(studyModeIndex))
			{
				iDP_PlanContent.StudyMode= reader.GetString(studyModeIndex);
			}
			
			int planFinishingTimeIndex = reader.GetOrdinal("PlanFinishingTime"); 
			if(!reader.IsDBNull(planFinishingTimeIndex))
			{
				iDP_PlanContent.PlanFinishingTime= reader.GetDateTime(planFinishingTimeIndex);
			}
			
			int finishedStateIndex = reader.GetOrdinal("FinishedState"); 
			if(!reader.IsDBNull(finishedStateIndex))
			{
				iDP_PlanContent.FinishedState= reader.GetInt32(finishedStateIndex);
			}
			
			int finishedTimeIndex = reader.GetOrdinal("FinishedTime"); 
			if(!reader.IsDBNull(finishedTimeIndex))
			{
				iDP_PlanContent.FinishedTime= reader.GetDateTime(finishedTimeIndex);
			}
			
			int createTimeIndex = reader.GetOrdinal("CreateTime"); 
			if(!reader.IsDBNull(createTimeIndex))
			{
				iDP_PlanContent.CreateTime= reader.GetDateTime(createTimeIndex);
			}
			
			int createUserIndex = reader.GetOrdinal("CreateUser"); 
			if(!reader.IsDBNull(createUserIndex))
			{
				iDP_PlanContent.CreateUser= reader.GetString(createUserIndex);
			}
			
			int createUserIDIndex = reader.GetOrdinal("CreateUserID"); 
			if(!reader.IsDBNull(createUserIDIndex))
			{
				iDP_PlanContent.CreateUserID= reader.GetInt32(createUserIDIndex);
			}
			
			int modifyTimeIndex = reader.GetOrdinal("ModifyTime"); 
			if(!reader.IsDBNull(modifyTimeIndex))
			{
				iDP_PlanContent.ModifyTime= reader.GetDateTime(modifyTimeIndex);
			}
			
			int modifyUserIndex = reader.GetOrdinal("ModifyUser"); 
			if(!reader.IsDBNull(modifyUserIndex))
			{
				iDP_PlanContent.ModifyUser= reader.GetString(modifyUserIndex);
			}
			
			int remarkIndex = reader.GetOrdinal("Remark"); 
			if(!reader.IsDBNull(remarkIndex))
			{
				iDP_PlanContent.Remark= reader.GetString(remarkIndex);
			}
			
			return iDP_PlanContent; 
		}
	}
}
