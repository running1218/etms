//==================================================================================================
//Version 1.0, auto-generated.
//Generated By huangzhf.
//Date: 2012-5-9 11:37:55.
//==================================================================================================
//==================================================================================================
//This file is generated by CodeGenerator(Ver 2.1)
//==================================================================================================

using System;
using System.Collections.Generic;
using System.Data;

using System.Data.SqlClient;
using ETMS.Utility.Data;

using ETMS.Components.IDP.API.Entity.NotCourseData;

namespace ETMS.Components.IDP.Implement.DAL.NotCourseData
{
    /// <summary>
    /// IDP非课程资料表数据访问
    /// </summary>
    public partial class IDP_NotCourseDataDataAccess
	{
		/// <summary>
		/// 增加
		/// </summary>
		public void Add(IDP_NotCourseData iDP_NotCourseData)
		{
			string commandName = "dbo.Pr_IDP_NotCourseData_Insert";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSWrite, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@IDP_NotCourseDataID", SqlDbType.UniqueIdentifier),
					new SqlParameter("@IDPSourceID", SqlDbType.Int),
					new SqlParameter("@OrgID", SqlDbType.Int),
					new SqlParameter("@DataCode", SqlDbType.NVarChar, 100),
					new SqlParameter("@DataName", SqlDbType.NVarChar, 200),
					new SqlParameter("@DataCotent", SqlDbType.NVarChar, -1),
					new SqlParameter("@DataOutline", SqlDbType.NVarChar, -1),
					new SqlParameter("@TimeLength", SqlDbType.Decimal, 5, ParameterDirection.Input, true, 8, 2, String.Empty, DataRowVersion.Default, null),
					new SqlParameter("@DataStatus", SqlDbType.Int),
					new SqlParameter("@StudyModelID", SqlDbType.Int),
					new SqlParameter("@StudyTimes", SqlDbType.Int),
					new SqlParameter("@Implementor", SqlDbType.NVarChar, 128),
					new SqlParameter("@DataURL", SqlDbType.NVarChar, 256),
					new SqlParameter("@DutyMan", SqlDbType.NVarChar, 128),
					new SqlParameter("@EvaluationMode", SqlDbType.NVarChar, 256),
					new SqlParameter("@CreateTime", SqlDbType.DateTime),
					new SqlParameter("@CreateUserID", SqlDbType.Int),
					new SqlParameter("@CreateUser", SqlDbType.NVarChar, 128),
					new SqlParameter("@ModifyTime", SqlDbType.DateTime),
					new SqlParameter("@ModifyUser", SqlDbType.NVarChar, 128),
					new SqlParameter("@DelFlag", SqlDbType.Bit),
					new SqlParameter("@Remark", SqlDbType.NVarChar, -1)
					};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSWrite, commandName, parms);
			}
			
			parms[0].Value = iDP_NotCourseData.IDP_NotCourseDataID;
			parms[1].Value = iDP_NotCourseData.IDPSourceID;
			parms[2].Value = iDP_NotCourseData.OrgID;
			if (iDP_NotCourseData.DataCode!= null){ parms[3].Value = iDP_NotCourseData.DataCode; } else { parms[3].Value = DBNull.Value; }
			if (iDP_NotCourseData.DataName!= null){ parms[4].Value = iDP_NotCourseData.DataName; } else { parms[4].Value = DBNull.Value; }
			if (iDP_NotCourseData.DataCotent!= null){ parms[5].Value = iDP_NotCourseData.DataCotent; } else { parms[5].Value = DBNull.Value; }
			if (iDP_NotCourseData.DataOutline!= null){ parms[6].Value = iDP_NotCourseData.DataOutline; } else { parms[6].Value = DBNull.Value; }
			parms[7].Value = iDP_NotCourseData.TimeLength;
			parms[8].Value = iDP_NotCourseData.DataStatus;
			parms[9].Value = iDP_NotCourseData.StudyModelID;
			parms[10].Value = iDP_NotCourseData.StudyTimes;
			if (iDP_NotCourseData.Implementor!= null){ parms[11].Value = iDP_NotCourseData.Implementor; } else { parms[11].Value = DBNull.Value; }
			if (iDP_NotCourseData.DataURL!= null){ parms[12].Value = iDP_NotCourseData.DataURL; } else { parms[12].Value = DBNull.Value; }
			if (iDP_NotCourseData.DutyMan!= null){ parms[13].Value = iDP_NotCourseData.DutyMan; } else { parms[13].Value = DBNull.Value; }
			if (iDP_NotCourseData.EvaluationMode!= null){ parms[14].Value = iDP_NotCourseData.EvaluationMode; } else { parms[14].Value = DBNull.Value; }
			parms[15].Value = iDP_NotCourseData.CreateTime;
			parms[16].Value = iDP_NotCourseData.CreateUserID;
			if (iDP_NotCourseData.CreateUser!= null){ parms[17].Value = iDP_NotCourseData.CreateUser; } else { parms[17].Value = DBNull.Value; }
			parms[18].Value = iDP_NotCourseData.ModifyTime;
			if (iDP_NotCourseData.ModifyUser!= null){ parms[19].Value = iDP_NotCourseData.ModifyUser; } else { parms[19].Value = DBNull.Value; }
			parms[20].Value = iDP_NotCourseData.DelFlag;
			if (iDP_NotCourseData.Remark!= null){ parms[21].Value = iDP_NotCourseData.Remark; } else { parms[21].Value = DBNull.Value; }
			#endregion
			SqlHelper.ExecuteNonQuery(ConnectionString.ETMSWrite, CommandType.StoredProcedure, commandName, parms);
			
		}
		
		/// <summary>
		/// 删除
		/// </summary>
		public void Remove(Guid iDP_NotCourseDataID)
		{
			string commandName = "dbo.Pr_IDP_NotCourseData_Delete";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSWrite, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@IDP_NotCourseDataID", SqlDbType.UniqueIdentifier)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSWrite, commandName, parms);
			}
			
			parms[0].Value = iDP_NotCourseDataID;
			
			#endregion
			SqlHelper.ExecuteNonQuery(ConnectionString.ETMSWrite, CommandType.StoredProcedure, commandName, parms);
		}
		
		/// <summary>
		/// 保存
		/// </summary>
		public void Save(IDP_NotCourseData iDP_NotCourseData)
		{
			string commandName = "dbo.Pr_IDP_NotCourseData_Update";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSWrite, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@IDP_NotCourseDataID", SqlDbType.UniqueIdentifier),
					new SqlParameter("@IDPSourceID", SqlDbType.Int),
					new SqlParameter("@OrgID", SqlDbType.Int),
					new SqlParameter("@DataCode", SqlDbType.NVarChar, 100),
					new SqlParameter("@DataName", SqlDbType.NVarChar, 200),
					new SqlParameter("@DataCotent", SqlDbType.NVarChar, -1),
					new SqlParameter("@DataOutline", SqlDbType.NVarChar, -1),
					new SqlParameter("@TimeLength", SqlDbType.Decimal, 5, ParameterDirection.Input, true, 8, 2, String.Empty, DataRowVersion.Default, null),
					new SqlParameter("@DataStatus", SqlDbType.Int),
					new SqlParameter("@StudyModelID", SqlDbType.Int),
					new SqlParameter("@StudyTimes", SqlDbType.Int),
					new SqlParameter("@Implementor", SqlDbType.NVarChar, 128),
					new SqlParameter("@DataURL", SqlDbType.NVarChar, 256),
					new SqlParameter("@DutyMan", SqlDbType.NVarChar, 128),
					new SqlParameter("@EvaluationMode", SqlDbType.NVarChar, 256),
					new SqlParameter("@CreateTime", SqlDbType.DateTime),
					new SqlParameter("@CreateUserID", SqlDbType.Int),
					new SqlParameter("@CreateUser", SqlDbType.NVarChar, 128),
					new SqlParameter("@ModifyTime", SqlDbType.DateTime),
					new SqlParameter("@ModifyUser", SqlDbType.NVarChar, 128),
					new SqlParameter("@DelFlag", SqlDbType.Bit),
					new SqlParameter("@Remark", SqlDbType.NVarChar, -1)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSWrite, commandName, parms);
			}
			
			parms[0].Value = iDP_NotCourseData.IDP_NotCourseDataID;
			parms[1].Value = iDP_NotCourseData.IDPSourceID;
			parms[2].Value = iDP_NotCourseData.OrgID;
			if (iDP_NotCourseData.DataCode!= null){ parms[3].Value = iDP_NotCourseData.DataCode; } else { parms[3].Value = DBNull.Value; }
			if (iDP_NotCourseData.DataName!= null){ parms[4].Value = iDP_NotCourseData.DataName; } else { parms[4].Value = DBNull.Value; }
			if (iDP_NotCourseData.DataCotent!= null){ parms[5].Value = iDP_NotCourseData.DataCotent; } else { parms[5].Value = DBNull.Value; }
			if (iDP_NotCourseData.DataOutline!= null){ parms[6].Value = iDP_NotCourseData.DataOutline; } else { parms[6].Value = DBNull.Value; }
			parms[7].Value = iDP_NotCourseData.TimeLength;
			parms[8].Value = iDP_NotCourseData.DataStatus;
			parms[9].Value = iDP_NotCourseData.StudyModelID;
			parms[10].Value = iDP_NotCourseData.StudyTimes;
			if (iDP_NotCourseData.Implementor!= null){ parms[11].Value = iDP_NotCourseData.Implementor; } else { parms[11].Value = DBNull.Value; }
			if (iDP_NotCourseData.DataURL!= null){ parms[12].Value = iDP_NotCourseData.DataURL; } else { parms[12].Value = DBNull.Value; }
			if (iDP_NotCourseData.DutyMan!= null){ parms[13].Value = iDP_NotCourseData.DutyMan; } else { parms[13].Value = DBNull.Value; }
			if (iDP_NotCourseData.EvaluationMode!= null){ parms[14].Value = iDP_NotCourseData.EvaluationMode; } else { parms[14].Value = DBNull.Value; }
			parms[15].Value = iDP_NotCourseData.CreateTime;
			parms[16].Value = iDP_NotCourseData.CreateUserID;
			if (iDP_NotCourseData.CreateUser!= null){ parms[17].Value = iDP_NotCourseData.CreateUser; } else { parms[17].Value = DBNull.Value; }
			parms[18].Value = iDP_NotCourseData.ModifyTime;
			if (iDP_NotCourseData.ModifyUser!= null){ parms[19].Value = iDP_NotCourseData.ModifyUser; } else { parms[19].Value = DBNull.Value; }
			parms[20].Value = iDP_NotCourseData.DelFlag;
			if (iDP_NotCourseData.Remark!= null){ parms[21].Value = iDP_NotCourseData.Remark; } else { parms[21].Value = DBNull.Value; }
			#endregion
			SqlHelper.ExecuteNonQuery(ConnectionString.ETMSWrite, CommandType.StoredProcedure, commandName, parms);
		}
		
		/// <summary>
		/// 根据标识获取对象
		/// </summary>
		public IDP_NotCourseData GetById(Guid iDP_NotCourseDataID)
		{
			IDP_NotCourseData iDP_NotCourseData = null;
			
			string commandName = "dbo.Pr_IDP_NotCourseData_GetByPK";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSRead, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@IDP_NotCourseDataID", SqlDbType.UniqueIdentifier)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSRead, commandName, parms);
			}
			
			parms[0].Value = iDP_NotCourseDataID;
			
			#endregion
			using (SqlDataReader dataReader = SqlHelper.ExecuteReader(ConnectionString.ETMSRead, CommandType.StoredProcedure, commandName, parms))
			{
				if (dataReader.Read())
				{
					iDP_NotCourseData = PopulateIDP_NotCourseDataFromDataReader(dataReader);
				}
			}
			
			return iDP_NotCourseData;
		}				
		
		/// <summary>
		/// 根据参数获取对象列表（分页，可排序）
		/// </summary>
		public DataTable GetPagedList(int pageIndex, int pageSize, string sortExpression, string criteria, out int totalRecords)
		{			
			string commandName = "dbo.Pr_IDP_NotCourseData_GetPagedList";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSRead, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@PageIndex", SqlDbType.Int),
					new SqlParameter("@PageSize", SqlDbType.Int),
					new SqlParameter("@SortExpression", SqlDbType.VarChar),
					new SqlParameter("@Criteria", SqlDbType.VarChar),
					new SqlParameter("@ReturnValue", SqlDbType.Int, 4, ParameterDirection.ReturnValue, false, 0, 0, String.Empty, DataRowVersion.Default, null)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSRead, commandName, parms);
			}
			
			parms[0].Value = pageIndex;
			parms[1].Value = pageSize;
			parms[2].Value = sortExpression;
			parms[3].Value = criteria;
			#endregion
			DataTable dt=SqlHelper.ExecuteDataset(ConnectionString.ETMSRead, CommandType.StoredProcedure, commandName, parms).Tables[0];
			totalRecords = (int)parms[4].Value;
			return dt;
		}
		
	    /// <summary>
		/// 根据参数获取对象列表（分页，可排序）
		/// </summary>
		public IList<IDP_NotCourseData> GetEntityList(int pageIndex, int pageSize, string sortExpression, string criteria, out int totalRecords)
		{			
            IList<IDP_NotCourseData> list=new List<IDP_NotCourseData>();
			string commandName = "dbo.Pr_IDP_NotCourseData_GetPagedList";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSRead, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@PageIndex", SqlDbType.Int),
					new SqlParameter("@PageSize", SqlDbType.Int),
					new SqlParameter("@SortExpression", SqlDbType.VarChar),
					new SqlParameter("@Criteria", SqlDbType.VarChar),
					new SqlParameter("@ReturnValue", SqlDbType.Int, 4, ParameterDirection.ReturnValue, false, 0, 0, String.Empty, DataRowVersion.Default, null)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSRead, commandName, parms);
			}
			
			parms[0].Value = pageIndex;
			parms[1].Value = pageSize;
			parms[2].Value = sortExpression;
			parms[3].Value = criteria;
			#endregion
            using (SqlDataReader dataReader = SqlHelper.ExecuteReader(ConnectionString.ETMSRead, CommandType.StoredProcedure, commandName, parms))
			{
				while (dataReader.Read())
				{
					list.Add(PopulateIDP_NotCourseDataFromDataReader(dataReader));
				}
			}			
			totalRecords = (int)parms[4].Value;
			return list;
		}
		
		/// <summary>
		/// 从DataReader中读取数据到业务对象
		/// </summary>
		private IDP_NotCourseData PopulateIDP_NotCourseDataFromDataReader(SqlDataReader reader)
		{
			IDP_NotCourseData iDP_NotCourseData = new IDP_NotCourseData();
			
			int iDP_NotCourseDataIDIndex = reader.GetOrdinal("IDP_NotCourseDataID"); 
			if(!reader.IsDBNull(iDP_NotCourseDataIDIndex))
			{
				iDP_NotCourseData.IDP_NotCourseDataID= reader.GetGuid(iDP_NotCourseDataIDIndex);
			}
			
			int iDPSourceIDIndex = reader.GetOrdinal("IDPSourceID"); 
			if(!reader.IsDBNull(iDPSourceIDIndex))
			{
				iDP_NotCourseData.IDPSourceID= reader.GetInt32(iDPSourceIDIndex);
			}
			
			int orgIDIndex = reader.GetOrdinal("OrgID"); 
			if(!reader.IsDBNull(orgIDIndex))
			{
				iDP_NotCourseData.OrgID= reader.GetInt32(orgIDIndex);
			}
			
			int dataCodeIndex = reader.GetOrdinal("DataCode"); 
			if(!reader.IsDBNull(dataCodeIndex))
			{
				iDP_NotCourseData.DataCode= reader.GetString(dataCodeIndex);
			}
			
			int dataNameIndex = reader.GetOrdinal("DataName"); 
			if(!reader.IsDBNull(dataNameIndex))
			{
				iDP_NotCourseData.DataName= reader.GetString(dataNameIndex);
			}
			
			int dataCotentIndex = reader.GetOrdinal("DataCotent"); 
			if(!reader.IsDBNull(dataCotentIndex))
			{
				iDP_NotCourseData.DataCotent= reader.GetString(dataCotentIndex);
			}
			
			int dataOutlineIndex = reader.GetOrdinal("DataOutline"); 
			if(!reader.IsDBNull(dataOutlineIndex))
			{
				iDP_NotCourseData.DataOutline= reader.GetString(dataOutlineIndex);
			}
			
			int timeLengthIndex = reader.GetOrdinal("TimeLength"); 
			if(!reader.IsDBNull(timeLengthIndex))
			{
				iDP_NotCourseData.TimeLength= reader.GetDecimal(timeLengthIndex);
			}
			
			int dataStatusIndex = reader.GetOrdinal("DataStatus"); 
			if(!reader.IsDBNull(dataStatusIndex))
			{
				iDP_NotCourseData.DataStatus= reader.GetInt32(dataStatusIndex);
			}
			
			int studyModelIDIndex = reader.GetOrdinal("StudyModelID"); 
			if(!reader.IsDBNull(studyModelIDIndex))
			{
				iDP_NotCourseData.StudyModelID= reader.GetInt32(studyModelIDIndex);
			}
			
			int studyTimesIndex = reader.GetOrdinal("StudyTimes"); 
			if(!reader.IsDBNull(studyTimesIndex))
			{
				iDP_NotCourseData.StudyTimes= reader.GetInt32(studyTimesIndex);
			}
			
			int implementorIndex = reader.GetOrdinal("Implementor"); 
			if(!reader.IsDBNull(implementorIndex))
			{
				iDP_NotCourseData.Implementor= reader.GetString(implementorIndex);
			}
			
			int dataURLIndex = reader.GetOrdinal("DataURL"); 
			if(!reader.IsDBNull(dataURLIndex))
			{
				iDP_NotCourseData.DataURL= reader.GetString(dataURLIndex);
			}
			
			int dutyManIndex = reader.GetOrdinal("DutyMan"); 
			if(!reader.IsDBNull(dutyManIndex))
			{
				iDP_NotCourseData.DutyMan= reader.GetString(dutyManIndex);
			}
			
			int evaluationModeIndex = reader.GetOrdinal("EvaluationMode"); 
			if(!reader.IsDBNull(evaluationModeIndex))
			{
				iDP_NotCourseData.EvaluationMode= reader.GetString(evaluationModeIndex);
			}
			
			int createTimeIndex = reader.GetOrdinal("CreateTime"); 
			if(!reader.IsDBNull(createTimeIndex))
			{
				iDP_NotCourseData.CreateTime= reader.GetDateTime(createTimeIndex);
			}
			
			int createUserIDIndex = reader.GetOrdinal("CreateUserID"); 
			if(!reader.IsDBNull(createUserIDIndex))
			{
				iDP_NotCourseData.CreateUserID= reader.GetInt32(createUserIDIndex);
			}
			
			int createUserIndex = reader.GetOrdinal("CreateUser"); 
			if(!reader.IsDBNull(createUserIndex))
			{
				iDP_NotCourseData.CreateUser= reader.GetString(createUserIndex);
			}
			
			int modifyTimeIndex = reader.GetOrdinal("ModifyTime"); 
			if(!reader.IsDBNull(modifyTimeIndex))
			{
				iDP_NotCourseData.ModifyTime= reader.GetDateTime(modifyTimeIndex);
			}
			
			int modifyUserIndex = reader.GetOrdinal("ModifyUser"); 
			if(!reader.IsDBNull(modifyUserIndex))
			{
				iDP_NotCourseData.ModifyUser= reader.GetString(modifyUserIndex);
			}
			
			int delFlagIndex = reader.GetOrdinal("DelFlag"); 
			if(!reader.IsDBNull(delFlagIndex))
			{
				iDP_NotCourseData.DelFlag= reader.GetBoolean(delFlagIndex);
			}
			
			int remarkIndex = reader.GetOrdinal("Remark"); 
			if(!reader.IsDBNull(remarkIndex))
			{
				iDP_NotCourseData.Remark= reader.GetString(remarkIndex);
			}
			
			return iDP_NotCourseData; 
		}
	}
}
