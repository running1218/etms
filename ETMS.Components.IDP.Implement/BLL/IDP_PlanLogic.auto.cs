//==================================================================================================
//Version 1.0, auto-generated.
//Generated By xueyb.
//Date: 2012-5-6 11:46:50.
//==================================================================================================
//==================================================================================================
//This file is generated by CodeGenerator(Ver 2.1), a product of ZhouYonghua(Zhou_Yonghua@163.com).
//==================================================================================================

using System;
using System.Collections.Generic;
using System.Data;
using ETMS.Utility.Logging;
using ETMS.Components.IDP.API.Entity;
using ETMS.Components.IDP.Implement.DAL;
namespace ETMS.Components.IDP.Implement.BLL
{
    /// <summary>
    /// IDP计划表业务逻辑
    /// </summary>
    public partial class IDP_PlanLogic
	{
		private static readonly IDP_PlanDataAccess DAL = new IDP_PlanDataAccess();
		
		/// <summary>
		/// 增加
		/// </summary>
		public void Add(IDP_Plan iDP_Plan)
		{
			DAL.Add(iDP_Plan);
            BizLogHelper.AddOperate(iDP_Plan);
		}


		/// <summary>
		/// 保存
		/// </summary>
		public void Update(IDP_Plan iDP_Plan)
		{
            //修改前信息
            IDP_Plan originalEntity=GetById(iDP_Plan.IDP_PlanID);
			DAL.Save(iDP_Plan);
            BizLogHelper.UpdateOperate(originalEntity,iDP_Plan);
		}

		/// <summary>
		/// 删除
		/// </summary>
		public void Remove(Guid iDP_PlanID)
		{
            doRemove(iDP_PlanID);
		} 

		/// <summary>
		/// 批量删除(主键ID数组）
		/// </summary>
		public void Remove(Guid[] iDP_PlanIDs)
		{
#if !DEBUG
			using (TransactionScope ts = new TransactionScope())
			{
#endif
				foreach (Guid id in iDP_PlanIDs  )
				{
					Remove(id);
				}
#if !DEBUG
				ts.Complete();
			}
#endif
		} 
    
    
		/// <summary>
		/// 根据标识获取对象
		/// </summary>
		public IDP_Plan GetById(Guid iDP_PlanID)
		{
			IDP_Plan iDP_Plan = DAL.GetById(iDP_PlanID);
			if (iDP_Plan == null)
			{
				throw new ETMS.AppContext.BusinessException("IDP.IDP_Plan.NotFoundException",new object[]{iDP_PlanID});
			}
			
			return iDP_Plan;
		}		
		 
		/// <summary>
        /// 查询数据列表分页数据
        /// </summary>
        /// <param name="pageIndex">页号</param>
        /// <param name="pageSize">页面大小</param>
        /// <param name="sortExpression">排序条件</param>
        /// <param name="criteria">筛选条件</param>
        /// <param name="totalRecords">out 记录总数</param>
        /// <returns>返回查询结果</returns>
		public DataTable GetPagedList(int pageIndex, int pageSize, string sortExpression, string criteria,out int totalRecords)
		{				
			return DAL.GetPagedList(pageIndex, pageSize, sortExpression, criteria, out totalRecords);
		}

        /// <summary>
        /// 查询数据列表分页数据
        /// </summary>
        /// <param name="pageIndex">页号</param>
        /// <param name="pageSize">页面大小</param>
        /// <param name="sortExpression">排序条件</param>
        /// <param name="criteria">筛选条件</param>
        /// <param name="totalRecords">out 记录总数</param>
        /// <returns>返回查询结果</returns>
        public DataTable GetPagedListForManage(int pageIndex, int pageSize, string sortExpression, string criteria, out int totalRecords)
        {
            return DAL.GetPagedListForManage(pageIndex, pageSize, sortExpression, criteria, out totalRecords);
        }
				
        /// <summary>
        /// 查询实体分页数据
        /// </summary>
        /// <param name="pageIndex">页号</param>
        /// <param name="pageSize">页面大小</param>
        /// <param name="sortExpression">排序条件</param>
        /// <param name="criteria">筛选条件</param>
        /// <param name="totalRecords">out 记录总数</param>
        /// <returns>返回查询结果</returns>
		public IList<IDP_Plan> GetEntityList(int pageIndex, int pageSize, string sortExpression, string criteria,out int totalRecords)
		{				
			return DAL.GetEntityList(pageIndex, pageSize, sortExpression, criteria, out totalRecords);
		}
		
	}
	
	
}

