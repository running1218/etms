//==================================================================================================
//Version 1.0, auto-generated.
//Generated By xueyb.
//Date: 2012-5-23 9:54:48.
//==================================================================================================
//==================================================================================================
//This file is generated by CodeGenerator(Ver 2.1), a product of ZhouYonghua(Zhou_Yonghua@163.com).
//==================================================================================================

using System;
using System.Collections.Generic;
using System.Data;

using System.Data.SqlClient;
using ETMS.Utility.Data;

using ETMS.Components.Fee.API.Entity;

namespace ETMS.Components.Fee.Implement.DAL
{
    /// <summary>
    /// 课酬标准表数据访问
    /// </summary>
    public partial class Fee_CourseFeeSettingDataAccess
	{
		/// <summary>
		/// 增加
		/// </summary>
		public void Add(Fee_CourseFeeSetting fee_CourseFeeSetting)
		{
			string commandName = "dbo.Pr_Fee_CourseFeeSetting_Insert";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSWrite, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@CourseFeeSettingID", SqlDbType.UniqueIdentifier),
					new SqlParameter("@TeacherLevelID", SqlDbType.Int),
					new SqlParameter("@TrainingTimeDescID", SqlDbType.Int),
					new SqlParameter("@CourseFee", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 10, 2, String.Empty, DataRowVersion.Default, null),
					new SqlParameter("@Remark", SqlDbType.NVarChar, -1),
					new SqlParameter("@ModifyTime", SqlDbType.DateTime),
					new SqlParameter("@ModifyUser", SqlDbType.NVarChar, 128),
					new SqlParameter("@OrgID", SqlDbType.Int)
					};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSWrite, commandName, parms);
			}
			
			parms[0].Value = fee_CourseFeeSetting.CourseFeeSettingID;
			parms[1].Value = fee_CourseFeeSetting.TeacherLevelID;
			parms[2].Value = fee_CourseFeeSetting.TrainingTimeDescID;
			parms[3].Value = fee_CourseFeeSetting.CourseFee;
			if (fee_CourseFeeSetting.Remark!= null){ parms[4].Value = fee_CourseFeeSetting.Remark; } else { parms[4].Value = DBNull.Value; }
			parms[5].Value = fee_CourseFeeSetting.ModifyTime;
			if (fee_CourseFeeSetting.ModifyUser!= null){ parms[6].Value = fee_CourseFeeSetting.ModifyUser; } else { parms[6].Value = DBNull.Value; }
			parms[7].Value = fee_CourseFeeSetting.OrgID;
			#endregion
			SqlHelper.ExecuteNonQuery(ConnectionString.ETMSWrite, CommandType.StoredProcedure, commandName, parms);
			
		}

        /// <summary>
        /// 批量增加
        /// </summary>
        public void Add(int orgID, string modifyUser)
        {
            string commandName = "dbo.Pr_Fee_CourseFeeSetting_InsertByOrgID";
            #region Parameters
            SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSWrite, commandName);
            if (parms == null)
            {
                parms = new SqlParameter[] {
					new SqlParameter("@ModifyUser", SqlDbType.NVarChar, 128),
					new SqlParameter("@OrgID", SqlDbType.Int)
					};
                SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSWrite, commandName, parms);
            }

            parms[0].Value = modifyUser;
            parms[1].Value = orgID;
           
            #endregion
            SqlHelper.ExecuteNonQuery(ConnectionString.ETMSWrite, CommandType.StoredProcedure, commandName, parms);

        }
		
		/// <summary>
		/// 删除
		/// </summary>
		public void Remove(Guid courseFeeSettingID)
		{
			string commandName = "dbo.Pr_Fee_CourseFeeSetting_Delete";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSWrite, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@CourseFeeSettingID", SqlDbType.UniqueIdentifier)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSWrite, commandName, parms);
			}
			
			parms[0].Value = courseFeeSettingID;
			
			#endregion
			SqlHelper.ExecuteNonQuery(ConnectionString.ETMSWrite, CommandType.StoredProcedure, commandName, parms);
		}
		
		/// <summary>
		/// 保存
		/// </summary>
		public void Save(Fee_CourseFeeSetting fee_CourseFeeSetting)
		{
			string commandName = "dbo.Pr_Fee_CourseFeeSetting_Update";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSWrite, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@CourseFeeSettingID", SqlDbType.UniqueIdentifier),
					new SqlParameter("@TeacherLevelID", SqlDbType.Int),
					new SqlParameter("@TrainingTimeDescID", SqlDbType.Int),
					new SqlParameter("@CourseFee", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 10, 2, String.Empty, DataRowVersion.Default, null),
					new SqlParameter("@Remark", SqlDbType.NVarChar, -1),
					new SqlParameter("@ModifyTime", SqlDbType.DateTime),
					new SqlParameter("@ModifyUser", SqlDbType.NVarChar, 128),
					new SqlParameter("@OrgID", SqlDbType.Int)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSWrite, commandName, parms);
			}
			
			parms[0].Value = fee_CourseFeeSetting.CourseFeeSettingID;
			parms[1].Value = fee_CourseFeeSetting.TeacherLevelID;
			parms[2].Value = fee_CourseFeeSetting.TrainingTimeDescID;
			parms[3].Value = fee_CourseFeeSetting.CourseFee;
			if (fee_CourseFeeSetting.Remark!= null){ parms[4].Value = fee_CourseFeeSetting.Remark; } else { parms[4].Value = DBNull.Value; }
			parms[5].Value = fee_CourseFeeSetting.ModifyTime;
			if (fee_CourseFeeSetting.ModifyUser!= null){ parms[6].Value = fee_CourseFeeSetting.ModifyUser; } else { parms[6].Value = DBNull.Value; }
			parms[7].Value = fee_CourseFeeSetting.OrgID;
			#endregion
			SqlHelper.ExecuteNonQuery(ConnectionString.ETMSWrite, CommandType.StoredProcedure, commandName, parms);
		}
		
		/// <summary>
		/// 根据标识获取对象
		/// </summary>
		public Fee_CourseFeeSetting GetById(Guid courseFeeSettingID)
		{
			Fee_CourseFeeSetting fee_CourseFeeSetting = null;
			
			string commandName = "dbo.Pr_Fee_CourseFeeSetting_GetByPK";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSRead, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@CourseFeeSettingID", SqlDbType.UniqueIdentifier)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSRead, commandName, parms);
			}
			
			parms[0].Value = courseFeeSettingID;
			
			#endregion
			using (SqlDataReader dataReader = SqlHelper.ExecuteReader(ConnectionString.ETMSRead, CommandType.StoredProcedure, commandName, parms))
			{
				if (dataReader.Read())
				{
					fee_CourseFeeSetting = PopulateFee_CourseFeeSettingFromDataReader(dataReader);
				}
			}
			
			return fee_CourseFeeSetting;
		}				
		
		/// <summary>
		/// 根据参数获取对象列表（分页，可排序）
		/// </summary>
		public DataTable GetPagedList(int pageIndex, int pageSize, string sortExpression, string criteria, out int totalRecords)
		{			
			string commandName = "dbo.Pr_Fee_CourseFeeSetting_GetPagedList";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSRead, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@PageIndex", SqlDbType.Int),
					new SqlParameter("@PageSize", SqlDbType.Int),
					new SqlParameter("@SortExpression", SqlDbType.VarChar),
					new SqlParameter("@Criteria", SqlDbType.VarChar),
					new SqlParameter("@ReturnValue", SqlDbType.Int, 4, ParameterDirection.ReturnValue, false, 0, 0, String.Empty, DataRowVersion.Default, null)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSRead, commandName, parms);
			}
			
			parms[0].Value = pageIndex;
			parms[1].Value = pageSize;
			parms[2].Value = sortExpression;
			parms[3].Value = criteria;
			#endregion
			DataTable dt=SqlHelper.ExecuteDataset(ConnectionString.ETMSRead, CommandType.StoredProcedure, commandName, parms).Tables[0];
			totalRecords = (int)parms[4].Value;
			return dt;
		}
		
	    /// <summary>
		/// 根据参数获取对象列表（分页，可排序）
		/// </summary>
		public IList<Fee_CourseFeeSetting> GetEntityList(int pageIndex, int pageSize, string sortExpression, string criteria, out int totalRecords)
		{			
            IList<Fee_CourseFeeSetting> list=new List<Fee_CourseFeeSetting>();
			string commandName = "dbo.Pr_Fee_CourseFeeSetting_GetPagedList";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSRead, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@PageIndex", SqlDbType.Int),
					new SqlParameter("@PageSize", SqlDbType.Int),
					new SqlParameter("@SortExpression", SqlDbType.VarChar),
					new SqlParameter("@Criteria", SqlDbType.VarChar),
					new SqlParameter("@ReturnValue", SqlDbType.Int, 4, ParameterDirection.ReturnValue, false, 0, 0, String.Empty, DataRowVersion.Default, null)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSRead, commandName, parms);
			}
			
			parms[0].Value = pageIndex;
			parms[1].Value = pageSize;
			parms[2].Value = sortExpression;
			parms[3].Value = criteria;
			#endregion
            using (SqlDataReader dataReader = SqlHelper.ExecuteReader(ConnectionString.ETMSRead, CommandType.StoredProcedure, commandName, parms))
			{
				while (dataReader.Read())
				{
					list.Add(PopulateFee_CourseFeeSettingFromDataReader(dataReader));
				}
			}			
			totalRecords = (int)parms[4].Value;
			return list;
		}
		
		/// <summary>
		/// 从DataReader中读取数据到业务对象
		/// </summary>
		private Fee_CourseFeeSetting PopulateFee_CourseFeeSettingFromDataReader(SqlDataReader reader)
		{
			Fee_CourseFeeSetting fee_CourseFeeSetting = new Fee_CourseFeeSetting();
			
			int courseFeeSettingIDIndex = reader.GetOrdinal("CourseFeeSettingID"); 
			if(!reader.IsDBNull(courseFeeSettingIDIndex))
			{
				fee_CourseFeeSetting.CourseFeeSettingID= reader.GetGuid(courseFeeSettingIDIndex);
			}
			
			int teacherLevelIDIndex = reader.GetOrdinal("TeacherLevelID"); 
			if(!reader.IsDBNull(teacherLevelIDIndex))
			{
				fee_CourseFeeSetting.TeacherLevelID= reader.GetInt32(teacherLevelIDIndex);
			}
			
			int trainingTimeDescIDIndex = reader.GetOrdinal("TrainingTimeDescID"); 
			if(!reader.IsDBNull(trainingTimeDescIDIndex))
			{
				fee_CourseFeeSetting.TrainingTimeDescID= reader.GetInt32(trainingTimeDescIDIndex);
			}
			
			int courseFeeIndex = reader.GetOrdinal("CourseFee"); 
			if(!reader.IsDBNull(courseFeeIndex))
			{
				fee_CourseFeeSetting.CourseFee= reader.GetDecimal(courseFeeIndex);
			}
			
			int remarkIndex = reader.GetOrdinal("Remark"); 
			if(!reader.IsDBNull(remarkIndex))
			{
				fee_CourseFeeSetting.Remark= reader.GetString(remarkIndex);
			}
			
			int modifyTimeIndex = reader.GetOrdinal("ModifyTime"); 
			if(!reader.IsDBNull(modifyTimeIndex))
			{
				fee_CourseFeeSetting.ModifyTime= reader.GetDateTime(modifyTimeIndex);
			}
			
			int modifyUserIndex = reader.GetOrdinal("ModifyUser"); 
			if(!reader.IsDBNull(modifyUserIndex))
			{
				fee_CourseFeeSetting.ModifyUser= reader.GetString(modifyUserIndex);
			}
			
			int orgIDIndex = reader.GetOrdinal("OrgID"); 
			if(!reader.IsDBNull(orgIDIndex))
			{
				fee_CourseFeeSetting.OrgID= reader.GetInt32(orgIDIndex);
			}
			
			return fee_CourseFeeSetting; 
		}
	}
}
