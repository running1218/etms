//==================================================================================================
//Version 1.0, auto-generated.
//Generated By xueyb.
//Date: 2012/3/29 21:14:37.
//==================================================================================================
//==================================================================================================
//This file is generated by CodeGenerator(Ver 2.1), a product of ZhouYonghua(Zhou_Yonghua@163.com).
//==================================================================================================

using System;
using System.Data;

using System.Data.SqlClient;
using ETMS.Utility.Data;

using ETMS.Components.Basic.API.Entity.Bulletin;

namespace ETMS.Components.Basic.Implement.DAL.Bulletin
{
    /// <summary>
    /// 公告发布对象表数据访问
    /// </summary>
    public partial class Inf_BulletinObjectDataAccess
	{
		/// <summary>
		/// 增加
		/// </summary>
		public void Add(Inf_BulletinObject inf_BulletinObject)
		{
			string commandName = "dbo.Pr_Inf_BulletinObject_Insert";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSWrite, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@BulletinObjectID", SqlDbType.UniqueIdentifier),
					new SqlParameter("@ArticleID", SqlDbType.Int),
					new SqlParameter("@BulletinObjectTypeID", SqlDbType.Int),
					new SqlParameter("@IsUse", SqlDbType.Int),
					new SqlParameter("@BeginTime", SqlDbType.DateTime),
					new SqlParameter("@EndTime", SqlDbType.DateTime),
					new SqlParameter("@CreateTime", SqlDbType.DateTime)
					};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSWrite, commandName, parms);
			}
			
			parms[0].Value = inf_BulletinObject.BulletinObjectID;
			parms[1].Value = inf_BulletinObject.ArticleID;
			parms[2].Value = inf_BulletinObject.BulletinObjectTypeID;
			parms[3].Value = inf_BulletinObject.IsUse;
			parms[4].Value = inf_BulletinObject.BeginTime;
			parms[5].Value = inf_BulletinObject.EndTime;
			parms[6].Value = inf_BulletinObject.CreateTime;
			#endregion
			SqlHelper.ExecuteNonQuery(ConnectionString.ETMSWrite, CommandType.StoredProcedure, commandName, parms);
			
		}
		
		/// <summary>
		/// 删除
		/// </summary>
		public void Remove(Guid bulletinObjectID)
		{
			string commandName = "dbo.Pr_Inf_BulletinObject_Delete";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSWrite, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@BulletinObjectID", SqlDbType.UniqueIdentifier)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSWrite, commandName, parms);
			}
			
			parms[0].Value = bulletinObjectID;
			
			#endregion
			SqlHelper.ExecuteNonQuery(ConnectionString.ETMSWrite, CommandType.StoredProcedure, commandName, parms);
		}
		
		/// <summary>
		/// 保存
		/// </summary>
		public void Save(Inf_BulletinObject inf_BulletinObject)
		{
			string commandName = "dbo.Pr_Inf_BulletinObject_Update";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSWrite, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@BulletinObjectID", SqlDbType.UniqueIdentifier),
					new SqlParameter("@ArticleID", SqlDbType.Int),
					new SqlParameter("@BulletinObjectTypeID", SqlDbType.Int),
					new SqlParameter("@IsUse", SqlDbType.Int),
					new SqlParameter("@BeginTime", SqlDbType.DateTime),
					new SqlParameter("@EndTime", SqlDbType.DateTime),
					new SqlParameter("@CreateTime", SqlDbType.DateTime)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSWrite, commandName, parms);
			}
			
			parms[0].Value = inf_BulletinObject.BulletinObjectID;
			parms[1].Value = inf_BulletinObject.ArticleID;
			parms[2].Value = inf_BulletinObject.BulletinObjectTypeID;
			parms[3].Value = inf_BulletinObject.IsUse;
			parms[4].Value = inf_BulletinObject.BeginTime;
			parms[5].Value = inf_BulletinObject.EndTime;
			parms[6].Value = inf_BulletinObject.CreateTime;
			#endregion
			SqlHelper.ExecuteNonQuery(ConnectionString.ETMSWrite, CommandType.StoredProcedure, commandName, parms);
		}
		
		/// <summary>
		/// 根据标识获取对象
		/// </summary>
		public Inf_BulletinObject GetById(Guid bulletinObjectID)
		{
			Inf_BulletinObject inf_BulletinObject = null;
			
			string commandName = "dbo.Pr_Inf_BulletinObject_GetByPK";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSRead, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@BulletinObjectID", SqlDbType.UniqueIdentifier)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSRead, commandName, parms);
			}
			
			parms[0].Value = bulletinObjectID;
			
			#endregion
			using (SqlDataReader dataReader = SqlHelper.ExecuteReader(ConnectionString.ETMSRead, CommandType.StoredProcedure, commandName, parms))
			{
				if (dataReader.Read())
				{
					inf_BulletinObject = PopulateInf_BulletinObjectFromDataReader(dataReader);
				}
			}
			
			return inf_BulletinObject;
		}				
		
		/// <summary>
		/// 根据参数获取对象列表（分页，可排序）
		/// </summary>
		public DataTable GetPagedList(int pageIndex, int pageSize, string sortExpression, string criteria, out int totalRecords)
		{			
			string commandName = "dbo.Pr_Inf_BulletinObject_GetPagedList";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSRead, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@PageIndex", SqlDbType.Int),
					new SqlParameter("@PageSize", SqlDbType.Int),
					new SqlParameter("@SortExpression", SqlDbType.VarChar),
					new SqlParameter("@Criteria", SqlDbType.VarChar),
					new SqlParameter("@ReturnValue", SqlDbType.Int, 4, ParameterDirection.ReturnValue, false, 0, 0, String.Empty, DataRowVersion.Default, null)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSRead, commandName, parms);
			}
			
			parms[0].Value = pageIndex;
			parms[1].Value = pageSize;
			parms[2].Value = sortExpression;
			parms[3].Value = criteria;
			#endregion
			DataTable dt=SqlHelper.ExecuteDataset(ConnectionString.ETMSRead, CommandType.StoredProcedure, commandName, parms).Tables[0];
			totalRecords = (int)parms[4].Value;
			return dt;
		}
		
		/// <summary>
		/// 从DataReader中读取数据到业务对象
		/// </summary>
		private Inf_BulletinObject PopulateInf_BulletinObjectFromDataReader(SqlDataReader reader)
		{
			Inf_BulletinObject inf_BulletinObject = new Inf_BulletinObject();
			
			int bulletinObjectIDIndex = reader.GetOrdinal("BulletinObjectID"); 
			if(!reader.IsDBNull(bulletinObjectIDIndex))
			{
				inf_BulletinObject.BulletinObjectID= reader.GetGuid(bulletinObjectIDIndex);
			}
			
			int articleIDIndex = reader.GetOrdinal("ArticleID"); 
			if(!reader.IsDBNull(articleIDIndex))
			{
				inf_BulletinObject.ArticleID= reader.GetInt32(articleIDIndex);
			}
			
			int bulletinObjectTypeIDIndex = reader.GetOrdinal("BulletinObjectTypeID"); 
			if(!reader.IsDBNull(bulletinObjectTypeIDIndex))
			{
				inf_BulletinObject.BulletinObjectTypeID= reader.GetInt32(bulletinObjectTypeIDIndex);
			}
			
			int isUseIndex = reader.GetOrdinal("IsUse"); 
			if(!reader.IsDBNull(isUseIndex))
			{
				inf_BulletinObject.IsUse= reader.GetInt32(isUseIndex);
			}
			
			int beginTimeIndex = reader.GetOrdinal("BeginTime"); 
			if(!reader.IsDBNull(beginTimeIndex))
			{
				inf_BulletinObject.BeginTime= reader.GetDateTime(beginTimeIndex);
			}
			
			int endTimeIndex = reader.GetOrdinal("EndTime"); 
			if(!reader.IsDBNull(endTimeIndex))
			{
				inf_BulletinObject.EndTime= reader.GetDateTime(endTimeIndex);
			}
			
			int createTimeIndex = reader.GetOrdinal("CreateTime"); 
			if(!reader.IsDBNull(createTimeIndex))
			{
				inf_BulletinObject.CreateTime= reader.GetDateTime(createTimeIndex);
			}
			
			return inf_BulletinObject; 
		}
	}
}
