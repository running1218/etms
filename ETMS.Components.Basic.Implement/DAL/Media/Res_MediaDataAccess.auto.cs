//==================================================================================================
//Version 1.0, auto-generated.
//Generated By running1218
//Date: 2014/12/12 16:31:46.
//==================================================================================================
//==================================================================================================
//This file is generated by CodeGenerator(Ver 2.1)
//==================================================================================================

using System;
using System.Collections.Generic;
using System.Data;

using System.Data.SqlClient;
using ETMS.Utility.Data;

using ETMS.Components.Basic.API.Entity;

namespace ETMS.Components.Basic.Implement.DAL
{
    /// <summary>
    /// 数据访问
    /// </summary>
    public partial class Res_MediaDataAccess
	{
		/// <summary>
		/// 增加
		/// </summary>
		public void Add(Res_Media res_Media)
		{
			string commandName = "dbo.Pr_Res_Media_Insert";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSWrite, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@MediaID", SqlDbType.UniqueIdentifier),
					new SqlParameter("@MediaType", SqlDbType.Int),
					new SqlParameter("@MediaName", SqlDbType.NVarChar, 100),
					new SqlParameter("@MediaInstroduce", SqlDbType.NVarChar, -1),
					new SqlParameter("@PlayTime", SqlDbType.Int),
					new SqlParameter("@ImagePath", SqlDbType.NVarChar, 600),
					new SqlParameter("@MediaPath", SqlDbType.NVarChar, 600),
					new SqlParameter("@PlayRate", SqlDbType.Int),
					new SqlParameter("@IsRecommend", SqlDbType.Bit),
					new SqlParameter("@RecommendTime", SqlDbType.DateTime),
					new SqlParameter("@CreateTime", SqlDbType.DateTime),
					new SqlParameter("@CreateUserID", SqlDbType.Int),
					new SqlParameter("@ModifyUserID", SqlDbType.Int),
					new SqlParameter("@ModifyTime", SqlDbType.DateTime)
					};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSWrite, commandName, parms);
			}
			
			parms[0].Value = res_Media.MediaID;
			parms[1].Value = res_Media.MediaType;
			if (res_Media.MediaName!= null){ parms[2].Value = res_Media.MediaName; } else { parms[2].Value = DBNull.Value; }
			if (res_Media.MediaInstroduce!= null){ parms[3].Value = res_Media.MediaInstroduce; } else { parms[3].Value = DBNull.Value; }
			parms[4].Value = res_Media.PlayTime;
			if (res_Media.ImagePath!= null){ parms[5].Value = res_Media.ImagePath; } else { parms[5].Value = DBNull.Value; }
			if (res_Media.MediaPath!= null){ parms[6].Value = res_Media.MediaPath; } else { parms[6].Value = DBNull.Value; }
			parms[7].Value = res_Media.PlayRate;
			parms[8].Value = res_Media.IsRecommend;
			parms[9].Value = res_Media.RecommendTime;
			parms[10].Value = res_Media.CreateTime;
			parms[11].Value = res_Media.CreateUserID;
			parms[12].Value = res_Media.ModifyUserID;
			parms[13].Value = res_Media.ModifyTime;
			#endregion
			SqlHelper.ExecuteNonQuery(ConnectionString.ETMSWrite, CommandType.StoredProcedure, commandName, parms);
			
		}
		
		/// <summary>
		/// 删除
		/// </summary>
		public void Remove(Guid mediaID)
		{
			string commandName = "dbo.Pr_Res_Media_Delete";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSWrite, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@MediaID", SqlDbType.UniqueIdentifier)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSWrite, commandName, parms);
			}
			
			parms[0].Value = mediaID;
			
			#endregion
			SqlHelper.ExecuteNonQuery(ConnectionString.ETMSWrite, CommandType.StoredProcedure, commandName, parms);
		}
		
		/// <summary>
		/// 保存
		/// </summary>
		public void Save(Res_Media res_Media)
		{
			string commandName = "dbo.Pr_Res_Media_Update";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSWrite, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@MediaID", SqlDbType.UniqueIdentifier),
					new SqlParameter("@MediaType", SqlDbType.Int),
					new SqlParameter("@MediaName", SqlDbType.NVarChar, 100),
					new SqlParameter("@MediaInstroduce", SqlDbType.NVarChar, -1),
					new SqlParameter("@PlayTime", SqlDbType.Int),
					new SqlParameter("@ImagePath", SqlDbType.NVarChar, 600),
					new SqlParameter("@MediaPath", SqlDbType.NVarChar, 600),
					new SqlParameter("@PlayRate", SqlDbType.Int),
					new SqlParameter("@IsRecommend", SqlDbType.Bit),
					new SqlParameter("@RecommendTime", SqlDbType.DateTime),
					new SqlParameter("@CreateTime", SqlDbType.DateTime),
					new SqlParameter("@CreateUserID", SqlDbType.Int),
					new SqlParameter("@ModifyUserID", SqlDbType.Int),
					new SqlParameter("@ModifyTime", SqlDbType.DateTime)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSWrite, commandName, parms);
			}
			
			parms[0].Value = res_Media.MediaID;
			parms[1].Value = res_Media.MediaType;
			if (res_Media.MediaName!= null){ parms[2].Value = res_Media.MediaName; } else { parms[2].Value = DBNull.Value; }
			if (res_Media.MediaInstroduce!= null){ parms[3].Value = res_Media.MediaInstroduce; } else { parms[3].Value = DBNull.Value; }
			parms[4].Value = res_Media.PlayTime;
			if (res_Media.ImagePath!= null){ parms[5].Value = res_Media.ImagePath; } else { parms[5].Value = DBNull.Value; }
			if (res_Media.MediaPath!= null){ parms[6].Value = res_Media.MediaPath; } else { parms[6].Value = DBNull.Value; }
			parms[7].Value = res_Media.PlayRate;
			parms[8].Value = res_Media.IsRecommend;
			parms[9].Value = res_Media.RecommendTime;
			parms[10].Value = res_Media.CreateTime;
			parms[11].Value = res_Media.CreateUserID;
			parms[12].Value = res_Media.ModifyUserID;
			parms[13].Value = res_Media.ModifyTime;
			#endregion
			SqlHelper.ExecuteNonQuery(ConnectionString.ETMSWrite, CommandType.StoredProcedure, commandName, parms);
		}
		
		/// <summary>
		/// 根据标识获取对象
		/// </summary>
		public Res_Media GetById(Guid mediaID)
		{
			Res_Media res_Media = null;
			
			string commandName = "dbo.Pr_Res_Media_GetByPK";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSRead, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@MediaID", SqlDbType.UniqueIdentifier)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSRead, commandName, parms);
			}
			
			parms[0].Value = mediaID;
			
			#endregion
			using (SqlDataReader dataReader = SqlHelper.ExecuteReader(ConnectionString.ETMSRead, CommandType.StoredProcedure, commandName, parms))
			{
				if (dataReader.Read())
				{
					res_Media = PopulateRes_MediaFromDataReader(dataReader);
				}
			}
			
			return res_Media;
		}				
		
		/// <summary>
		/// 根据参数获取对象列表（分页，可排序）
		/// </summary>
		public DataTable GetPagedList(int pageIndex, int pageSize, string sortExpression, string criteria, out int totalRecords)
		{			
			string commandName = "dbo.Pr_Res_Media_GetPagedList";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSRead, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@PageIndex", SqlDbType.Int),
					new SqlParameter("@PageSize", SqlDbType.Int),
					new SqlParameter("@SortExpression", SqlDbType.VarChar),
					new SqlParameter("@Criteria", SqlDbType.VarChar),
					new SqlParameter("@ReturnValue", SqlDbType.Int, 4, ParameterDirection.ReturnValue, false, 0, 0, String.Empty, DataRowVersion.Default, null)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSRead, commandName, parms);
			}
			
			parms[0].Value = pageIndex;
			parms[1].Value = pageSize;
			parms[2].Value = sortExpression;
			parms[3].Value = criteria;
			#endregion
			DataTable dt=SqlHelper.ExecuteDataset(ConnectionString.ETMSRead, CommandType.StoredProcedure, commandName, parms).Tables[0];
			totalRecords = (int)parms[4].Value;
			return dt;
		}
		
	    /// <summary>
		/// 根据参数获取对象列表（分页，可排序）
		/// </summary>
		public IList<Res_Media> GetEntityList(int pageIndex, int pageSize, string sortExpression, string criteria, out int totalRecords)
		{			
            IList<Res_Media> list=new List<Res_Media>();
			string commandName = "dbo.Pr_Res_Media_GetPagedList";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSRead, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@PageIndex", SqlDbType.Int),
					new SqlParameter("@PageSize", SqlDbType.Int),
					new SqlParameter("@SortExpression", SqlDbType.VarChar),
					new SqlParameter("@Criteria", SqlDbType.VarChar),
					new SqlParameter("@ReturnValue", SqlDbType.Int, 4, ParameterDirection.ReturnValue, false, 0, 0, String.Empty, DataRowVersion.Default, null)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSRead, commandName, parms);
			}
			
			parms[0].Value = pageIndex;
			parms[1].Value = pageSize;
			parms[2].Value = sortExpression;
			parms[3].Value = criteria;
			#endregion
            using (SqlDataReader dataReader = SqlHelper.ExecuteReader(ConnectionString.ETMSRead, CommandType.StoredProcedure, commandName, parms))
			{
				while (dataReader.Read())
				{
					list.Add(PopulateRes_MediaFromDataReader(dataReader));
				}
			}			
			totalRecords = (int)parms[4].Value;
			return list;
		}
		
		/// <summary>
		/// 从DataReader中读取数据到业务对象
		/// </summary>
		private Res_Media PopulateRes_MediaFromDataReader(SqlDataReader reader)
		{
			Res_Media res_Media = new Res_Media();
			
			int mediaIDIndex = reader.GetOrdinal("MediaID"); 
			if(!reader.IsDBNull(mediaIDIndex))
			{
				res_Media.MediaID= reader.GetGuid(mediaIDIndex);
			}
			
			int mediaTypeIndex = reader.GetOrdinal("MediaType"); 
			if(!reader.IsDBNull(mediaTypeIndex))
			{
				res_Media.MediaType= reader.GetInt32(mediaTypeIndex);
			}
			
			int mediaNameIndex = reader.GetOrdinal("MediaName"); 
			if(!reader.IsDBNull(mediaNameIndex))
			{
				res_Media.MediaName= reader.GetString(mediaNameIndex);
			}
			
			int mediaInstroduceIndex = reader.GetOrdinal("MediaInstroduce"); 
			if(!reader.IsDBNull(mediaInstroduceIndex))
			{
				res_Media.MediaInstroduce= reader.GetString(mediaInstroduceIndex);
			}
			
			int playTimeIndex = reader.GetOrdinal("PlayTime"); 
			if(!reader.IsDBNull(playTimeIndex))
			{
				res_Media.PlayTime= reader.GetInt32(playTimeIndex);
			}
			
			int imagePathIndex = reader.GetOrdinal("ImagePath"); 
			if(!reader.IsDBNull(imagePathIndex))
			{
				res_Media.ImagePath= reader.GetString(imagePathIndex);
			}
			
			int mediaPathIndex = reader.GetOrdinal("MediaPath"); 
			if(!reader.IsDBNull(mediaPathIndex))
			{
				res_Media.MediaPath= reader.GetString(mediaPathIndex);
			}
			
			int playRateIndex = reader.GetOrdinal("PlayRate"); 
			if(!reader.IsDBNull(playRateIndex))
			{
				res_Media.PlayRate= reader.GetInt32(playRateIndex);
			}
			
			int isRecommendIndex = reader.GetOrdinal("IsRecommend"); 
			if(!reader.IsDBNull(isRecommendIndex))
			{
				res_Media.IsRecommend= reader.GetBoolean(isRecommendIndex);
			}
			
			int recommendTimeIndex = reader.GetOrdinal("RecommendTime"); 
			if(!reader.IsDBNull(recommendTimeIndex))
			{
				res_Media.RecommendTime= reader.GetDateTime(recommendTimeIndex);
			}
			
			int createTimeIndex = reader.GetOrdinal("CreateTime"); 
			if(!reader.IsDBNull(createTimeIndex))
			{
				res_Media.CreateTime= reader.GetDateTime(createTimeIndex);
			}
			
			int createUserIDIndex = reader.GetOrdinal("CreateUserID"); 
			if(!reader.IsDBNull(createUserIDIndex))
			{
				res_Media.CreateUserID= reader.GetInt32(createUserIDIndex);
			}
			
			int modifyUserIDIndex = reader.GetOrdinal("ModifyUserID"); 
			if(!reader.IsDBNull(modifyUserIDIndex))
			{
				res_Media.ModifyUserID= reader.GetInt32(modifyUserIDIndex);
			}
			
			int modifyTimeIndex = reader.GetOrdinal("ModifyTime"); 
			if(!reader.IsDBNull(modifyTimeIndex))
			{
				res_Media.ModifyTime= reader.GetDateTime(modifyTimeIndex);
			}
			
			return res_Media; 
		}
	}
}
