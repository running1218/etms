//==================================================================================================
//Version 1.0, auto-generated.
//Generated By xueyb.
//Date: 2012-4-10 10:42:20.
//==================================================================================================
//==================================================================================================
//This file is generated by CodeGenerator(Ver 2.1), a product of ZhouYonghua(Zhou_Yonghua@163.com).
//==================================================================================================

using System;
using System.Collections.Generic;
using System.Data;

using System.Data.SqlClient;
using ETMS.Utility.Data;

using ETMS.Components.Basic.API.Entity.Security;

namespace ETMS.Components.Basic.Implement.DAL.Security
{
    /// <summary>
    /// 配置组（系统字典）数据访问
    /// </summary>
    public partial class Site_SysConfigGroupDataAccess
    {
        /// <summary>
        /// 增加
        /// </summary>
        public void Add(Site_SysConfigGroup site_SysConfigGroup)
        {
            string commandName = "dbo.Pr_Site_SysConfigGroup_Insert";
            #region Parameters
            SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSWrite, commandName);
            if (parms == null)
            {
                parms = new SqlParameter[] {
					new SqlParameter("@ConfigGroupID", SqlDbType.Int),
					new SqlParameter("@ConfigGroupName", SqlDbType.VarChar, 100),
					new SqlParameter("@OrderNum", SqlDbType.Int),
					new SqlParameter("@IsUse", SqlDbType.Int)
					};
                SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSWrite, commandName, parms);
            }

            parms[0].Value = site_SysConfigGroup.ConfigGroupID;
            if (site_SysConfigGroup.ConfigGroupName != null) { parms[1].Value = site_SysConfigGroup.ConfigGroupName; } else { parms[1].Value = DBNull.Value; }
            parms[2].Value = site_SysConfigGroup.OrderNum;
            parms[3].Value = site_SysConfigGroup.IsUse;
            #endregion
            SqlHelper.ExecuteNonQuery(ConnectionString.ETMSWrite, CommandType.StoredProcedure, commandName, parms);

        }

        /// <summary>
        /// 删除
        /// </summary>
        public void Remove(Int32 configGroupID)
        {
            string commandName = "dbo.Pr_Site_SysConfigGroup_Delete";
            #region Parameters
            SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSWrite, commandName);
            if (parms == null)
            {
                parms = new SqlParameter[] {
					new SqlParameter("@ConfigGroupID", SqlDbType.Int)
				};
                SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSWrite, commandName, parms);
            }

            parms[0].Value = configGroupID;

            #endregion
            SqlHelper.ExecuteNonQuery(ConnectionString.ETMSWrite, CommandType.StoredProcedure, commandName, parms);
        }

        /// <summary>
        /// 保存
        /// </summary>
        public void Save(Site_SysConfigGroup site_SysConfigGroup)
        {
            string commandName = "dbo.Pr_Site_SysConfigGroup_Update";
            #region Parameters
            SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSWrite, commandName);
            if (parms == null)
            {
                parms = new SqlParameter[] {
					new SqlParameter("@ConfigGroupID", SqlDbType.Int),
					new SqlParameter("@ConfigGroupName", SqlDbType.VarChar, 100),
					new SqlParameter("@OrderNum", SqlDbType.Int),
					new SqlParameter("@IsUse", SqlDbType.Int)
				};
                SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSWrite, commandName, parms);
            }

            parms[0].Value = site_SysConfigGroup.ConfigGroupID;
            if (site_SysConfigGroup.ConfigGroupName != null) { parms[1].Value = site_SysConfigGroup.ConfigGroupName; } else { parms[1].Value = DBNull.Value; }
            parms[2].Value = site_SysConfigGroup.OrderNum;
            parms[3].Value = site_SysConfigGroup.IsUse;
            #endregion
            SqlHelper.ExecuteNonQuery(ConnectionString.ETMSWrite, CommandType.StoredProcedure, commandName, parms);
        }

        /// <summary>
        /// 根据标识获取对象
        /// </summary>
        public Site_SysConfigGroup GetById(Int32 configGroupID)
        {
            Site_SysConfigGroup site_SysConfigGroup = null;

            string commandName = "dbo.Pr_Site_SysConfigGroup_GetByPK";
            #region Parameters
            SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSRead, commandName);
            if (parms == null)
            {
                parms = new SqlParameter[] {
					new SqlParameter("@ConfigGroupID", SqlDbType.Int)
				};
                SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSRead, commandName, parms);
            }

            parms[0].Value = configGroupID;

            #endregion
            using (SqlDataReader dataReader = SqlHelper.ExecuteReader(ConnectionString.ETMSRead, CommandType.StoredProcedure, commandName, parms))
            {
                if (dataReader.Read())
                {
                    site_SysConfigGroup = PopulateSite_SysConfigGroupFromDataReader(dataReader);
                }
            }

            return site_SysConfigGroup;
        }

        /// <summary>
        /// 根据参数获取对象列表（分页，可排序）
        /// </summary>
        public DataTable GetPagedList(int pageIndex, int pageSize, string sortExpression, string criteria, out int totalRecords)
        {
            string commandName = "dbo.Pr_Site_SysConfigGroup_GetPagedList";
            #region Parameters
            SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSRead, commandName);
            if (parms == null)
            {
                parms = new SqlParameter[] {
					new SqlParameter("@PageIndex", SqlDbType.Int),
					new SqlParameter("@PageSize", SqlDbType.Int),
					new SqlParameter("@SortExpression", SqlDbType.VarChar),
					new SqlParameter("@Criteria", SqlDbType.VarChar),
					new SqlParameter("@ReturnValue", SqlDbType.Int, 4, ParameterDirection.ReturnValue, false, 0, 0, String.Empty, DataRowVersion.Default, null)
				};
                SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSRead, commandName, parms);
            }

            parms[0].Value = pageIndex;
            parms[1].Value = pageSize;
            parms[2].Value = sortExpression;
            parms[3].Value = criteria;
            #endregion
            DataTable dt = SqlHelper.ExecuteDataset(ConnectionString.ETMSRead, CommandType.StoredProcedure, commandName, parms).Tables[0];
            totalRecords = (int)parms[4].Value;
            return dt;
        }

        /// <summary>
        /// 根据参数获取对象列表（分页，可排序）
        /// </summary>
        public IList<Site_SysConfigGroup> GetEntityList(int pageIndex, int pageSize, string sortExpression, string criteria, out int totalRecords)
        {
            IList<Site_SysConfigGroup> list = new List<Site_SysConfigGroup>();
            string commandName = "dbo.Pr_Site_SysConfigGroup_GetPagedList";
            #region Parameters
            SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSRead, commandName);
            if (parms == null)
            {
                parms = new SqlParameter[] {
					new SqlParameter("@PageIndex", SqlDbType.Int),
					new SqlParameter("@PageSize", SqlDbType.Int),
					new SqlParameter("@SortExpression", SqlDbType.VarChar),
					new SqlParameter("@Criteria", SqlDbType.VarChar),
					new SqlParameter("@ReturnValue", SqlDbType.Int, 4, ParameterDirection.ReturnValue, false, 0, 0, String.Empty, DataRowVersion.Default, null)
				};
                SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSRead, commandName, parms);
            }

            parms[0].Value = pageIndex;
            parms[1].Value = pageSize;
            parms[2].Value = sortExpression;
            parms[3].Value = criteria;
            #endregion
            using (SqlDataReader dataReader = SqlHelper.ExecuteReader(ConnectionString.ETMSRead, CommandType.StoredProcedure, commandName, parms))
            {
                while (dataReader.Read())
                {
                    list.Add(PopulateSite_SysConfigGroupFromDataReader(dataReader));
                }
            }
            totalRecords = (int)parms[4].Value;
            return list;
        }

        /// <summary>
        /// 从DataReader中读取数据到业务对象
        /// </summary>
        private Site_SysConfigGroup PopulateSite_SysConfigGroupFromDataReader(SqlDataReader reader)
        {
            Site_SysConfigGroup site_SysConfigGroup = new Site_SysConfigGroup();

            int configGroupIDIndex = reader.GetOrdinal("ConfigGroupID");
            if (!reader.IsDBNull(configGroupIDIndex))
            {
                site_SysConfigGroup.ConfigGroupID = reader.GetInt32(configGroupIDIndex);
            }

            int configGroupNameIndex = reader.GetOrdinal("ConfigGroupName");
            if (!reader.IsDBNull(configGroupNameIndex))
            {
                site_SysConfigGroup.ConfigGroupName = reader.GetString(configGroupNameIndex);
            }

            int orderNumIndex = reader.GetOrdinal("OrderNum");
            if (!reader.IsDBNull(orderNumIndex))
            {
                site_SysConfigGroup.OrderNum = reader.GetInt32(orderNumIndex);
            }

            int isUseIndex = reader.GetOrdinal("IsUse");
            if (!reader.IsDBNull(isUseIndex))
            {
                site_SysConfigGroup.IsUse = reader.GetInt32(isUseIndex);
            }

            return site_SysConfigGroup;
        }
    }
}
