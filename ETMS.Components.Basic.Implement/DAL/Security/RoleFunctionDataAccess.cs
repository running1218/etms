//==================================================================================================
//Version 1.0, auto-generated.
//Generated By running1218
//Date: 2008-9-27 9:48:43.
//==================================================================================================
//==================================================================================================
//This file is generated by CodeGenerator(Ver 2.1)
//==================================================================================================

using System;
using System.Collections.Generic;
using System.Data;

using System.Data.SqlClient;
using ETMS.Utility.Data;

using ETMS.Components.Basic.API.Entity.Security;

namespace ETMS.Components.Basic.Implement.DAL.Security
{
    /// <summary>
    /// 数据访问
    /// </summary>
    public class RoleFunctionDataAccess : ETMS.Components.Basic.Implement.DAL.Common.IDataAccess
    {
        private static string SelectSql = @"
  SELECT 
       [RoleFunctionID]
      ,[RoleID]
      ,[FunctionGroupID]
	  ,b.[GroupCode] AS [FunctionGroupCode]
      ,[FunctionID]
      ,a.[Creator]
      ,a.[CreateTime]
  FROM [Site_RoleFunction] a
 inner join [Site_FunctionGroup] b on a.FunctionGroupID=b.[GroupID]
 WHERE 1=1 ";

        private static string MapSelectSql = @"
  SELECT 
       [RoleFunctionID]
      ,A.[RoleID]
      ,[FunctionGroupID]
	  ,c.[GroupCode] AS [FunctionGroupCode]
      ,[FunctionID]
      ,A.[Creator]
      ,A.[CreateTime]
  FROM [Site_RoleFunction] A
	inner join dbo.Site_Role B ON A.[RoleID]=B.[RoleID]
    inner join [Site_FunctionGroup] c on a.FunctionGroupID=c.[GroupID]
  WHERE 1=1 ";
        #region IDataAccess 成员

        public void Add(object obj)
        {
            RoleFunction roleFunction = (RoleFunction)obj;

            string commandName = "dbo.Pr_Site_RoleFunction_Insert";
            #region Parameters
            SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSWrite, commandName);
            if (parms == null)
            {
                parms = new SqlParameter[] {	new SqlParameter("@RoleFunctionID", SqlDbType.Int, 4, ParameterDirection.Output, false, 0, 0, String.Empty, DataRowVersion.Default, null),
				
					new SqlParameter("@RoleID", SqlDbType.Int),
					new SqlParameter("@FunctionGroupID", SqlDbType.Int),
					new SqlParameter("@FunctionID", SqlDbType.Int),
					new SqlParameter("@Creator", SqlDbType.NVarChar, 50),
					new SqlParameter("@CreateTime", SqlDbType.DateTime)
					};
                SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSWrite, commandName, parms);
            }

            parms[1].Value = roleFunction.RoleID;
            parms[2].Value = roleFunction.FunctionGroupID;
            parms[3].Value = roleFunction.FunctionID;
            if (roleFunction.Creator != null) { parms[4].Value = roleFunction.Creator; } else { parms[4].Value = DBNull.Value; }
            parms[5].Value = roleFunction.CreateTime;
            #endregion
            SqlHelper.ExecuteNonQuery(ConnectionString.ETMSWrite, CommandType.StoredProcedure, commandName, parms);

            roleFunction.RoleFunctionID = (Int32)parms[0].Value;
        }

        public void Update(object obj)
        {
            RoleFunction roleFunction = (RoleFunction)obj;

            string commandName = "dbo.Pr_Site_RoleFunction_Update";
            #region Parameters
            SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSWrite, commandName);
            if (parms == null)
            {
                parms = new SqlParameter[] {
					new SqlParameter("@RoleFunctionID", SqlDbType.Int),
					new SqlParameter("@RoleID", SqlDbType.Int),
					new SqlParameter("@FunctionGroupID", SqlDbType.Int),
					new SqlParameter("@FunctionID", SqlDbType.Int),
					new SqlParameter("@Creator", SqlDbType.NVarChar, 50),
					new SqlParameter("@CreateTime", SqlDbType.DateTime)
				};
                SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSWrite, commandName, parms);
            }

            parms[0].Value = roleFunction.RoleFunctionID;
            parms[1].Value = roleFunction.RoleID;
            parms[2].Value = roleFunction.FunctionGroupID;
            parms[3].Value = roleFunction.FunctionID;
            if (roleFunction.Creator != null) { parms[4].Value = roleFunction.Creator; } else { parms[4].Value = DBNull.Value; }
            parms[5].Value = roleFunction.CreateTime;
            #endregion
            SqlHelper.ExecuteNonQuery(ConnectionString.ETMSWrite, CommandType.StoredProcedure, commandName, parms);
        }

        public void Delete(object obj)
        {
            RoleFunction roleFunction = (RoleFunction)obj;

            string commandName = "dbo.Pr_Site_RoleFunction_Delete";
            #region Parameters
            SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSWrite, commandName);
            if (parms == null)
            {
                parms = new SqlParameter[] {
					new SqlParameter("@RoleFunctionID", SqlDbType.Int)
				};
                SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSWrite, commandName, parms);
            }

            parms[0].Value = roleFunction.RoleFunctionID;

            #endregion
            SqlHelper.ExecuteNonQuery(ConnectionString.ETMSWrite, CommandType.StoredProcedure, commandName, parms);
        }

        public object Query(object id)
        {
            Int32 roleFunctionID = (int)id;

            string sqlScriptFormat = SelectSql + " AND RoleFunctionID={0} order by RoleFunctionID";

            DataTable dt = SqlHelper.ExecuteDataset(ConnectionString.ETMSRead, CommandType.Text, string.Format(sqlScriptFormat, roleFunctionID)).Tables[0];
            if (dt.Rows.Count == 0)
                return null;
            return RoleFunction.ConvertDataRowToRoleFunction(dt.Rows[0]);
        }

        public Object[] Query(string filter)
        {
            string sqlScriptFormat = (filter.IndexOf("RoleCode") == -1 ? SelectSql + " {0} order by RoleFunctionID " : MapSelectSql + " {0} order by RoleCode DESC ");

            List<RoleFunction> list = new List<RoleFunction>();
            foreach (DataRow row in SqlHelper.ExecuteDataset(ConnectionString.ETMSRead, CommandType.Text, string.Format(sqlScriptFormat, filter)).Tables[0].Rows)
            {
                list.Add(RoleFunction.ConvertDataRowToRoleFunction(row));
            }

            return (Object[])list.ToArray();
        }

        public Object[] Query(int pageIndex, int pageSize, string filter, string orderBy, out int recordCount)
        {
            throw new Exception("The method or operation is not implemented.");
        }

        #endregion
    }
}
