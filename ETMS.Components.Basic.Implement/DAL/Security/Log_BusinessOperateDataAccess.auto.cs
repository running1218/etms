//==================================================================================================
//Version 1.0, auto-generated.
//Generated By xueyb.
//Date: 2012-4-13 20:34:59.
//==================================================================================================
//==================================================================================================
//This file is generated by CodeGenerator(Ver 2.1), a product of ZhouYonghua(Zhou_Yonghua@163.com).
//==================================================================================================

using System;
using System.Collections.Generic;
using System.Data;

using System.Data.SqlClient;
using ETMS.Utility.Data;

using ETMS.Components.Basic.API.Entity.Security;

namespace ETMS.Components.Basic.Implement.DAL.Security
{
    /// <summary>
    /// 业务操作日志数据访问
    /// </summary>
    public partial class Log_BusinessOperateDataAccess
	{
		/// <summary>
		/// 增加
		/// </summary>
		public void Add(Log_BusinessOperate log_BusinessOperate)
		{
			string commandName = "dbo.Pr_Log_BusinessOperate_Insert";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSWrite, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {	new SqlParameter("@BizLogID", SqlDbType.BigInt, 8, ParameterDirection.Output, false, 0, 0, String.Empty, DataRowVersion.Default, null),
				
					new SqlParameter("@ModuleName", SqlDbType.VarChar, 100),
					new SqlParameter("@MethodName", SqlDbType.VarChar, 50),
					new SqlParameter("@TargetID", SqlDbType.VarChar, 50),
					new SqlParameter("@Action", SqlDbType.VarChar, -1),
					new SqlParameter("@LoginName", SqlDbType.VarChar, 50),
					new SqlParameter("@CreateTime", SqlDbType.DateTime),
					new SqlParameter("@ServerName", SqlDbType.VarChar, 50),
					new SqlParameter("@ClientIP", SqlDbType.VarChar, 20),
					new SqlParameter("@PageUrl", SqlDbType.VarChar, 1024),
					new SqlParameter("@OrganizationID", SqlDbType.Int)
					};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSWrite, commandName, parms);
			}
			
			if (log_BusinessOperate.ModuleName!= null){ parms[1].Value = log_BusinessOperate.ModuleName; } else { parms[1].Value = DBNull.Value; }
			if (log_BusinessOperate.MethodName!= null){ parms[2].Value = log_BusinessOperate.MethodName; } else { parms[2].Value = DBNull.Value; }
			if (log_BusinessOperate.TargetID!= null){ parms[3].Value = log_BusinessOperate.TargetID; } else { parms[3].Value = DBNull.Value; }
			if (log_BusinessOperate.Action!= null){ parms[4].Value = log_BusinessOperate.Action; } else { parms[4].Value = DBNull.Value; }
			if (log_BusinessOperate.LoginName!= null){ parms[5].Value = log_BusinessOperate.LoginName; } else { parms[5].Value = DBNull.Value; }
			parms[6].Value = log_BusinessOperate.CreateTime;
			if (log_BusinessOperate.ServerName!= null){ parms[7].Value = log_BusinessOperate.ServerName; } else { parms[7].Value = DBNull.Value; }
			if (log_BusinessOperate.ClientIP!= null){ parms[8].Value = log_BusinessOperate.ClientIP; } else { parms[8].Value = DBNull.Value; }
			if (log_BusinessOperate.PageUrl!= null){ parms[9].Value = log_BusinessOperate.PageUrl; } else { parms[9].Value = DBNull.Value; }
			parms[10].Value = log_BusinessOperate.OrganizationID;
			#endregion
			SqlHelper.ExecuteNonQuery(ConnectionString.ETMSWrite, CommandType.StoredProcedure, commandName, parms);
			
			log_BusinessOperate.BizLogID = (Int64)parms[0].Value;
			
		}
		
		/// <summary>
		/// 删除
		/// </summary>
		public void Remove(Int64 bizLogID)
		{
			string commandName = "dbo.Pr_Log_BusinessOperate_Delete";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSWrite, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@BizLogID", SqlDbType.BigInt)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSWrite, commandName, parms);
			}
			
			parms[0].Value = bizLogID;
			
			#endregion
			SqlHelper.ExecuteNonQuery(ConnectionString.ETMSWrite, CommandType.StoredProcedure, commandName, parms);
		}
		
		/// <summary>
		/// 保存
		/// </summary>
		public void Save(Log_BusinessOperate log_BusinessOperate)
		{
			string commandName = "dbo.Pr_Log_BusinessOperate_Update";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSWrite, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@BizLogID", SqlDbType.BigInt),
					new SqlParameter("@ModuleName", SqlDbType.VarChar, 100),
					new SqlParameter("@MethodName", SqlDbType.VarChar, 50),
					new SqlParameter("@TargetID", SqlDbType.VarChar, 50),
					new SqlParameter("@Action", SqlDbType.VarChar, -1),
					new SqlParameter("@LoginName", SqlDbType.VarChar, 50),
					new SqlParameter("@CreateTime", SqlDbType.DateTime),
					new SqlParameter("@ServerName", SqlDbType.VarChar, 50),
					new SqlParameter("@ClientIP", SqlDbType.VarChar, 20),
					new SqlParameter("@PageUrl", SqlDbType.VarChar, 1024),
					new SqlParameter("@OrganizationID", SqlDbType.Int)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSWrite, commandName, parms);
			}
			
			parms[0].Value = log_BusinessOperate.BizLogID;
			if (log_BusinessOperate.ModuleName!= null){ parms[1].Value = log_BusinessOperate.ModuleName; } else { parms[1].Value = DBNull.Value; }
			if (log_BusinessOperate.MethodName!= null){ parms[2].Value = log_BusinessOperate.MethodName; } else { parms[2].Value = DBNull.Value; }
			if (log_BusinessOperate.TargetID!= null){ parms[3].Value = log_BusinessOperate.TargetID; } else { parms[3].Value = DBNull.Value; }
			if (log_BusinessOperate.Action!= null){ parms[4].Value = log_BusinessOperate.Action; } else { parms[4].Value = DBNull.Value; }
			if (log_BusinessOperate.LoginName!= null){ parms[5].Value = log_BusinessOperate.LoginName; } else { parms[5].Value = DBNull.Value; }
			parms[6].Value = log_BusinessOperate.CreateTime;
			if (log_BusinessOperate.ServerName!= null){ parms[7].Value = log_BusinessOperate.ServerName; } else { parms[7].Value = DBNull.Value; }
			if (log_BusinessOperate.ClientIP!= null){ parms[8].Value = log_BusinessOperate.ClientIP; } else { parms[8].Value = DBNull.Value; }
			if (log_BusinessOperate.PageUrl!= null){ parms[9].Value = log_BusinessOperate.PageUrl; } else { parms[9].Value = DBNull.Value; }
			parms[10].Value = log_BusinessOperate.OrganizationID;
			#endregion
			SqlHelper.ExecuteNonQuery(ConnectionString.ETMSWrite, CommandType.StoredProcedure, commandName, parms);
		}
		
		/// <summary>
		/// 根据标识获取对象
		/// </summary>
		public Log_BusinessOperate GetById(Int64 bizLogID)
		{
			Log_BusinessOperate log_BusinessOperate = null;
			
			string commandName = "dbo.Pr_Log_BusinessOperate_GetByPK";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSRead, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@BizLogID", SqlDbType.BigInt)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSRead, commandName, parms);
			}
			
			parms[0].Value = bizLogID;
			
			#endregion
			using (SqlDataReader dataReader = SqlHelper.ExecuteReader(ConnectionString.ETMSRead, CommandType.StoredProcedure, commandName, parms))
			{
				if (dataReader.Read())
				{
					log_BusinessOperate = PopulateLog_BusinessOperateFromDataReader(dataReader);
				}
			}
			
			return log_BusinessOperate;
		}				
		
		/// <summary>
		/// 根据参数获取对象列表（分页，可排序）
		/// </summary>
		public DataTable GetPagedList(int pageIndex, int pageSize, string sortExpression, string criteria, out int totalRecords)
		{			
			string commandName = "dbo.Pr_Log_BusinessOperate_GetPagedList";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSRead, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@PageIndex", SqlDbType.Int),
					new SqlParameter("@PageSize", SqlDbType.Int),
					new SqlParameter("@SortExpression", SqlDbType.VarChar),
					new SqlParameter("@Criteria", SqlDbType.VarChar),
					new SqlParameter("@ReturnValue", SqlDbType.Int, 4, ParameterDirection.ReturnValue, false, 0, 0, String.Empty, DataRowVersion.Default, null)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSRead, commandName, parms);
			}
			
			parms[0].Value = pageIndex;
			parms[1].Value = pageSize;
			parms[2].Value = sortExpression;
			parms[3].Value = criteria;
			#endregion
			DataTable dt=SqlHelper.ExecuteDataset(ConnectionString.ETMSRead, CommandType.StoredProcedure, commandName, parms).Tables[0];
			totalRecords = (int)parms[4].Value;
			return dt;
		}
		
	    /// <summary>
		/// 根据参数获取对象列表（分页，可排序）
		/// </summary>
		public IList<Log_BusinessOperate> GetEntityList(int pageIndex, int pageSize, string sortExpression, string criteria, out int totalRecords)
		{			
            IList<Log_BusinessOperate> list=new List<Log_BusinessOperate>();
			string commandName = "dbo.Pr_Log_BusinessOperate_GetPagedList";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSRead, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@PageIndex", SqlDbType.Int),
					new SqlParameter("@PageSize", SqlDbType.Int),
					new SqlParameter("@SortExpression", SqlDbType.VarChar),
					new SqlParameter("@Criteria", SqlDbType.VarChar),
					new SqlParameter("@ReturnValue", SqlDbType.Int, 4, ParameterDirection.ReturnValue, false, 0, 0, String.Empty, DataRowVersion.Default, null)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSRead, commandName, parms);
			}
			
			parms[0].Value = pageIndex;
			parms[1].Value = pageSize;
			parms[2].Value = sortExpression;
			parms[3].Value = criteria;
			#endregion
            using (SqlDataReader dataReader = SqlHelper.ExecuteReader(ConnectionString.ETMSRead, CommandType.StoredProcedure, commandName, parms))
			{
				while (dataReader.Read())
				{
					list.Add(PopulateLog_BusinessOperateFromDataReader(dataReader));
				}
			}			
			totalRecords = (int)parms[4].Value;
			return list;
		}
		
		/// <summary>
		/// 从DataReader中读取数据到业务对象
		/// </summary>
		private Log_BusinessOperate PopulateLog_BusinessOperateFromDataReader(SqlDataReader reader)
		{
			Log_BusinessOperate log_BusinessOperate = new Log_BusinessOperate();
			
			int bizLogIDIndex = reader.GetOrdinal("BizLogID"); 
			if(!reader.IsDBNull(bizLogIDIndex))
			{
				log_BusinessOperate.BizLogID= reader.GetInt64(bizLogIDIndex);
			}
			
			int moduleNameIndex = reader.GetOrdinal("ModuleName"); 
			if(!reader.IsDBNull(moduleNameIndex))
			{
				log_BusinessOperate.ModuleName= reader.GetString(moduleNameIndex);
			}
			
			int methodNameIndex = reader.GetOrdinal("MethodName"); 
			if(!reader.IsDBNull(methodNameIndex))
			{
				log_BusinessOperate.MethodName= reader.GetString(methodNameIndex);
			}
			
			int targetIDIndex = reader.GetOrdinal("TargetID"); 
			if(!reader.IsDBNull(targetIDIndex))
			{
				log_BusinessOperate.TargetID= reader.GetString(targetIDIndex);
			}
			
			int actionIndex = reader.GetOrdinal("Action"); 
			if(!reader.IsDBNull(actionIndex))
			{
				log_BusinessOperate.Action= reader.GetString(actionIndex);
			}
			
			int loginNameIndex = reader.GetOrdinal("LoginName"); 
			if(!reader.IsDBNull(loginNameIndex))
			{
				log_BusinessOperate.LoginName= reader.GetString(loginNameIndex);
			}
			
			int createTimeIndex = reader.GetOrdinal("CreateTime"); 
			if(!reader.IsDBNull(createTimeIndex))
			{
				log_BusinessOperate.CreateTime= reader.GetDateTime(createTimeIndex);
			}
			
			int serverNameIndex = reader.GetOrdinal("ServerName"); 
			if(!reader.IsDBNull(serverNameIndex))
			{
				log_BusinessOperate.ServerName= reader.GetString(serverNameIndex);
			}
			
			int clientIPIndex = reader.GetOrdinal("ClientIP"); 
			if(!reader.IsDBNull(clientIPIndex))
			{
				log_BusinessOperate.ClientIP= reader.GetString(clientIPIndex);
			}
			
			int pageUrlIndex = reader.GetOrdinal("PageUrl"); 
			if(!reader.IsDBNull(pageUrlIndex))
			{
				log_BusinessOperate.PageUrl= reader.GetString(pageUrlIndex);
			}
			
			int organizationIDIndex = reader.GetOrdinal("OrganizationID"); 
			if(!reader.IsDBNull(organizationIDIndex))
			{
				log_BusinessOperate.OrganizationID= reader.GetInt32(organizationIDIndex);
			}
			
			return log_BusinessOperate; 
		}
	}
}
