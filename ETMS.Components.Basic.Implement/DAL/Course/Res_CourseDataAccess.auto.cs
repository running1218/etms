//==================================================================================================
//Version 1.0, auto-generated.
//Generated By xueyb.
//Date: 2012-3-21 13:14:43.
//==================================================================================================
//==================================================================================================
//This file is generated by CodeGenerator(Ver 2.1), a product of ZhouYonghua(Zhou_Yonghua@163.com).
//==================================================================================================

using System;
using System.Data;

using System.Data.SqlClient;
using ETMS.Utility.Data;
using ETMS.Components.Basic.API.Entity.Course;

namespace ETMS.Components.Basic.Implement.DAL.Course
{
    /// <summary>
    /// 课程表数据访问
    /// </summary>
    public partial class Res_CourseDataAccess
	{
		/// <summary>
		/// 增加
		/// </summary>
		public void Add(Res_Course res_Course)
		{
			string commandName = "dbo.Pr_Res_Course_Insert";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSWrite, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@CourseID", SqlDbType.UniqueIdentifier),
					new SqlParameter("@CourseCode", SqlDbType.NVarChar, 50),
					new SqlParameter("@CourseName", SqlDbType.NVarChar, 100),
					new SqlParameter("@CourseLevelID", SqlDbType.Int),
					new SqlParameter("@CourseTypeID", SqlDbType.Int),
					new SqlParameter("@CourseStatus", SqlDbType.Int),
					new SqlParameter("@IsPublic", SqlDbType.Bit),
					new SqlParameter("@CourseHours", SqlDbType.Decimal, 5, ParameterDirection.Input, true, 8, 2, String.Empty, DataRowVersion.Default, null),
					new SqlParameter("@ThumbnailURL", SqlDbType.NVarChar, 128),
					new SqlParameter("@ForObject", SqlDbType.NVarChar),
					new SqlParameter("@CourseIntroduction", SqlDbType.NVarChar),
					new SqlParameter("@CourseOutline", SqlDbType.NVarChar),
					new SqlParameter("@OrgID", SqlDbType.NVarChar, 50),
					new SqlParameter("@CreateUser", SqlDbType.NVarChar, 32),
					new SqlParameter("@ModifyUser", SqlDbType.NVarChar, 32),
					new SqlParameter("@Remark", SqlDbType.NVarChar, 1024),
                    new SqlParameter("@CreateUserID", SqlDbType.Int),
                    new SqlParameter("@CourseModel", SqlDbType.Int),
                    new SqlParameter("@IsPay", SqlDbType.Bit),
                    new SqlParameter("@Price", SqlDbType.Decimal),
                    new SqlParameter("@DiscountPrice", SqlDbType.Decimal),
                    new SqlParameter("@LivingType", SqlDbType.Int)
					};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSWrite, commandName, parms);
			}
			
			parms[0].Value = res_Course.CourseID;
			if (res_Course.CourseCode!= null){ parms[1].Value = res_Course.CourseCode; } else { parms[1].Value = DBNull.Value; }
			if (res_Course.CourseName!= null){ parms[2].Value = res_Course.CourseName; } else { parms[2].Value = DBNull.Value; }
			parms[3].Value = res_Course.CourseLevelID;
			parms[4].Value = res_Course.CourseTypeID;
			parms[5].Value = res_Course.CourseStatus;
			parms[6].Value = res_Course.IsPublic;
			parms[7].Value = res_Course.CourseHours;
			if (res_Course.ThumbnailURL!= null){ parms[8].Value = res_Course.ThumbnailURL; } else { parms[8].Value = DBNull.Value; }
			if (res_Course.ForObject!= null){ parms[9].Value = res_Course.ForObject; } else { parms[9].Value = DBNull.Value; }
			if (res_Course.CourseIntroduction!= null){ parms[10].Value = res_Course.CourseIntroduction; } else { parms[10].Value = DBNull.Value; }
			if (res_Course.CourseOutline!= null){ parms[11].Value = res_Course.CourseOutline; } else { parms[11].Value = DBNull.Value; }
			if (res_Course.OrgID!= null){ parms[12].Value = res_Course.OrgID; } else { parms[12].Value = DBNull.Value; }
			if (res_Course.CreateUser!= null){ parms[13].Value = res_Course.CreateUser; } else { parms[13].Value = DBNull.Value; }
			if (res_Course.ModifyUser!= null){ parms[14].Value = res_Course.ModifyUser; } else { parms[14].Value = DBNull.Value; }
			if (res_Course.Remark!= null){ parms[15].Value = res_Course.Remark; } else { parms[15].Value = DBNull.Value; }
            if (res_Course.CreateUserID != null) { parms[16].Value = res_Course.CreateUserID; } else { parms[16].Value = DBNull.Value; }
            parms[17].Value = res_Course.CourseModel;
            parms[18].Value = res_Course.IsPay;
            parms[19].Value = res_Course.Price;
            parms[20].Value = res_Course.DiscountPrice;
            parms[21].Value = res_Course.LivingType;
			#endregion
			SqlHelper.ExecuteNonQuery(ConnectionString.ETMSWrite, CommandType.StoredProcedure, commandName, parms);
			
		}
		
		/// <summary>
		/// 删除
		/// </summary>
		public void Remove(Guid courseID)
		{
			string commandName = "dbo.Pr_Res_Course_Delete";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSWrite, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@CourseID", SqlDbType.UniqueIdentifier)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSWrite, commandName, parms);
			}
			
			parms[0].Value = courseID;
			
			#endregion
			SqlHelper.ExecuteNonQuery(ConnectionString.ETMSWrite, CommandType.StoredProcedure, commandName, parms);
		}
		
		/// <summary>
		/// 保存
		/// </summary>
		public void Save(Res_Course res_Course)
		{
			string commandName = "dbo.Pr_Res_Course_Update";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSWrite, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@CourseID", SqlDbType.UniqueIdentifier),
					new SqlParameter("@CourseCode", SqlDbType.NVarChar, 50),
					new SqlParameter("@CourseName", SqlDbType.NVarChar, 100),
					new SqlParameter("@CourseLevelID", SqlDbType.Int),
					new SqlParameter("@CourseTypeID", SqlDbType.Int),
					new SqlParameter("@CourseStatus", SqlDbType.Int),
					new SqlParameter("@IsPublic", SqlDbType.Bit),
					new SqlParameter("@CourseHours", SqlDbType.Decimal, 5, ParameterDirection.Input, true, 8, 2, String.Empty, DataRowVersion.Default, null),
					new SqlParameter("@ThumbnailURL", SqlDbType.NVarChar, 128),
					new SqlParameter("@ForObject", SqlDbType.NVarChar),
					new SqlParameter("@CourseIntroduction", SqlDbType.NVarChar),
					new SqlParameter("@CourseOutline", SqlDbType.NVarChar),
					new SqlParameter("@OrgID", SqlDbType.NVarChar, 50),
					new SqlParameter("@ModifyUser", SqlDbType.NVarChar, 32),
					new SqlParameter("@Remark", SqlDbType.NVarChar, 1024),
                    new SqlParameter("@IsPay", SqlDbType.Bit),
                    new SqlParameter("@Price", SqlDbType.Decimal),
                    new SqlParameter("@DiscountPrice", SqlDbType.Decimal),
                    new SqlParameter("@LivingType", SqlDbType.Int)
                };
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSWrite, commandName, parms);
			}
			
			parms[0].Value = res_Course.CourseID;
			if (res_Course.CourseCode!= null){ parms[1].Value = res_Course.CourseCode; } else { parms[1].Value = DBNull.Value; }
			if (res_Course.CourseName!= null){ parms[2].Value = res_Course.CourseName; } else { parms[2].Value = DBNull.Value; }
			parms[3].Value = res_Course.CourseLevelID;
			parms[4].Value = res_Course.CourseTypeID;
			parms[5].Value = res_Course.CourseStatus;
			parms[6].Value = res_Course.IsPublic;
			parms[7].Value = res_Course.CourseHours;
			if (res_Course.ThumbnailURL!= null){ parms[8].Value = res_Course.ThumbnailURL; } else { parms[8].Value = DBNull.Value; }
			if (res_Course.ForObject!= null){ parms[9].Value = res_Course.ForObject; } else { parms[9].Value = DBNull.Value; }
			if (res_Course.CourseIntroduction!= null){ parms[10].Value = res_Course.CourseIntroduction; } else { parms[10].Value = DBNull.Value; }
			if (res_Course.CourseOutline!= null){ parms[11].Value = res_Course.CourseOutline; } else { parms[11].Value = DBNull.Value; }
			if (res_Course.OrgID!= null){ parms[12].Value = res_Course.OrgID; } else { parms[12].Value = DBNull.Value; }
			if (res_Course.ModifyUser!= null){ parms[13].Value = res_Course.ModifyUser; } else { parms[13].Value = DBNull.Value; }
			if (res_Course.Remark!= null){ parms[14].Value = res_Course.Remark; } else { parms[14].Value = DBNull.Value; }
            parms[15].Value = res_Course.IsPay;
            parms[16].Value = res_Course.Price;
            parms[17].Value = res_Course.DiscountPrice;
            parms[18].Value = res_Course.LivingType;
            #endregion
            SqlHelper.ExecuteNonQuery(ConnectionString.ETMSWrite, CommandType.StoredProcedure, commandName, parms);
		}
		
		/// <summary>
		/// 根据标识获取对象
		/// </summary>
		public Res_Course GetById(Guid courseID)
		{
			Res_Course res_Course = null;
			
			string commandName = "dbo.Pr_Res_Course_GetByPK";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSRead, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@CourseID", SqlDbType.UniqueIdentifier)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSRead, commandName, parms);
			}
			
			parms[0].Value = courseID;
			
			#endregion
			using (SqlDataReader dataReader = SqlHelper.ExecuteReader(ConnectionString.ETMSRead, CommandType.StoredProcedure, commandName, parms))
			{
				if (dataReader.Read())
				{
					res_Course = PopulateRes_CourseFromDataReader(dataReader);
				}
			}
			
			return res_Course;
		}
		
		/// <summary>
		/// 根据参数获取对象列表（分页，可排序）
		/// </summary>
        public DataTable GetPagedList(int pageIndex, int pageSize, string sortExpression, string criteria, out int totalRecords)
		{
            string commandName = "dbo.Pr_Res_Course_GetPagedList";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSRead, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@PageIndex", SqlDbType.Int),
					new SqlParameter("@PageSize", SqlDbType.Int),
					new SqlParameter("@SortExpression", SqlDbType.NVarChar),
					new SqlParameter("@Criteria", SqlDbType.NVarChar),
					new SqlParameter("@ReturnValue", SqlDbType.Int, 4, ParameterDirection.ReturnValue, false, 0, 0, String.Empty, DataRowVersion.Default, null)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSRead, commandName, parms);
			}
			
			parms[0].Value = pageIndex;
			parms[1].Value = pageSize;
			parms[2].Value = sortExpression;
			parms[3].Value = criteria;
			#endregion
			DataTable dt=SqlHelper.ExecuteDataset(ConnectionString.ETMSRead, CommandType.StoredProcedure, commandName, parms).Tables[0];
			totalRecords = (int)parms[4].Value;
			return dt;
		}

        public DataTable GetTeacherCoursesPagedList(int pageIndex, int pageSize, string sortExpression, string criteria, out int totalRecords)
        {
            string commandName = "dbo.Pr_Res_TeacherCourses_GetPagedList";
            #region Parameters
            SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSRead, commandName);
            if (parms == null)
            {
                parms = new SqlParameter[] {
                    new SqlParameter("@PageIndex", SqlDbType.Int),
                    new SqlParameter("@PageSize", SqlDbType.Int),
                    new SqlParameter("@SortExpression", SqlDbType.NVarChar),
                    new SqlParameter("@Criteria", SqlDbType.NVarChar),
                    new SqlParameter("@ReturnValue", SqlDbType.Int, 4, ParameterDirection.ReturnValue, false, 0, 0, String.Empty, DataRowVersion.Default, null)
                };
                SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSRead, commandName, parms);
            }

            parms[0].Value = pageIndex;
            parms[1].Value = pageSize;
            parms[2].Value = sortExpression;
            parms[3].Value = criteria;
            #endregion
            DataTable dt = SqlHelper.ExecuteDataset(ConnectionString.ETMSRead, CommandType.StoredProcedure, commandName, parms).Tables[0];
            totalRecords = (int)parms[4].Value;
            return dt;
        }        

        /// <summary>
        /// 从DataReader中读取数据到业务对象
        /// </summary>
        private Res_Course PopulateRes_CourseFromDataReader(SqlDataReader reader)
		{
			Res_Course res_Course = new Res_Course();
			
			int courseIDIndex = reader.GetOrdinal("CourseID"); 
			if(!reader.IsDBNull(courseIDIndex))
			{
				res_Course.CourseID= reader.GetGuid(courseIDIndex);
			}
			
			int courseCodeIndex = reader.GetOrdinal("CourseCode"); 
			if(!reader.IsDBNull(courseCodeIndex))
			{
				res_Course.CourseCode= reader.GetString(courseCodeIndex);
			}
			
			int courseNameIndex = reader.GetOrdinal("CourseName"); 
			if(!reader.IsDBNull(courseNameIndex))
			{
				res_Course.CourseName= reader.GetString(courseNameIndex);
			}
			
			int courseLevelIDIndex = reader.GetOrdinal("CourseLevelID"); 
			if(!reader.IsDBNull(courseLevelIDIndex))
			{
				res_Course.CourseLevelID= reader.GetInt32(courseLevelIDIndex);
			}            

            int courseTypeIDIndex = reader.GetOrdinal("CourseTypeID"); 
			if(!reader.IsDBNull(courseTypeIDIndex))
			{
				res_Course.CourseTypeID= reader.GetInt32(courseTypeIDIndex);
			}

            int courseModelIDIndex = reader.GetOrdinal("CourseModel");
            if (!reader.IsDBNull(courseModelIDIndex))
            {
                res_Course.CourseModel = reader.GetInt32(courseModelIDIndex);
            }

            int courseStatusIndex = reader.GetOrdinal("CourseStatus"); 
			if(!reader.IsDBNull(courseStatusIndex))
			{
				res_Course.CourseStatus= reader.GetInt32(courseStatusIndex);
			}
			
			int isPublicIndex = reader.GetOrdinal("IsPublic"); 
			if(!reader.IsDBNull(isPublicIndex))
			{
				res_Course.IsPublic= reader.GetBoolean(isPublicIndex);
			}
			
			int courseHoursIndex = reader.GetOrdinal("CourseHours"); 
			if(!reader.IsDBNull(courseHoursIndex))
			{
				res_Course.CourseHours= reader.GetDecimal(courseHoursIndex);
			}
			
			int thumbnailURLIndex = reader.GetOrdinal("ThumbnailURL"); 
			if(!reader.IsDBNull(thumbnailURLIndex))
			{
				res_Course.ThumbnailURL= reader.GetString(thumbnailURLIndex);
			}
			
			int forObjectIndex = reader.GetOrdinal("ForObject"); 
			if(!reader.IsDBNull(forObjectIndex))
			{
				res_Course.ForObject= reader.GetString(forObjectIndex);
			}
			
			int courseIntroductionIndex = reader.GetOrdinal("CourseIntroduction"); 
			if(!reader.IsDBNull(courseIntroductionIndex))
			{
				res_Course.CourseIntroduction= reader.GetString(courseIntroductionIndex);
			}
			
			int courseOutlineIndex = reader.GetOrdinal("CourseOutline"); 
			if(!reader.IsDBNull(courseOutlineIndex))
			{
				res_Course.CourseOutline= reader.GetString(courseOutlineIndex);
			}
			
			int orgIDIndex = reader.GetOrdinal("OrgID"); 
			if(!reader.IsDBNull(orgIDIndex))
			{
				res_Course.OrgID= reader.GetInt32(orgIDIndex);
			}
			
			int createTimeIndex = reader.GetOrdinal("CreateTime"); 
			if(!reader.IsDBNull(createTimeIndex))
			{
				res_Course.CreateTime= reader.GetDateTime(createTimeIndex);
			}
			
			int createUserIndex = reader.GetOrdinal("CreateUser"); 
			if(!reader.IsDBNull(createUserIndex))
			{
				res_Course.CreateUser= reader.GetString(createUserIndex);
			}
			
			int modifyTimeIndex = reader.GetOrdinal("ModifyTime"); 
			if(!reader.IsDBNull(modifyTimeIndex))
			{
				res_Course.ModifyTime= reader.GetDateTime(modifyTimeIndex);
			}
			
			int modifyUserIndex = reader.GetOrdinal("ModifyUser"); 
			if(!reader.IsDBNull(modifyUserIndex))
			{
				res_Course.ModifyUser= reader.GetString(modifyUserIndex);
			}
			
			int remarkIndex = reader.GetOrdinal("Remark"); 
			if(!reader.IsDBNull(remarkIndex))
			{
				res_Course.Remark= reader.GetString(remarkIndex);
			}
			
			int delFlagIndex = reader.GetOrdinal("DelFlag"); 
			if(!reader.IsDBNull(delFlagIndex))
			{
				res_Course.DelFlag= reader.GetBoolean(delFlagIndex);
			}

            int isPayIndex = reader.GetOrdinal("IsPay");
            if (!reader.IsDBNull(isPayIndex))
            {
                res_Course.IsPay = reader.GetBoolean(isPayIndex);
            }

            int priceIndex = reader.GetOrdinal("Price");
            if (!reader.IsDBNull(priceIndex))
            {
                res_Course.Price = reader.GetDecimal(priceIndex);
            }

            int discountPriceIndex = reader.GetOrdinal("DiscountPrice");
            if (!reader.IsDBNull(discountPriceIndex))
            {
                res_Course.DiscountPrice = reader.GetDecimal(discountPriceIndex);
            }

            int focusCountIndex = reader.GetOrdinal("FocusCount");
            if (!reader.IsDBNull(focusCountIndex))
            {
                res_Course.FocusCount = reader.GetInt32(focusCountIndex);
            }
            int livingTypeIndex = reader.GetOrdinal("LivingType");
            if (!reader.IsDBNull(livingTypeIndex))
            {
                res_Course.LivingType = reader.GetInt32(livingTypeIndex);
            }

            int startDateTypeIndex = reader.GetOrdinal("StartDate");
            if (!reader.IsDBNull(startDateTypeIndex))
            {
                res_Course.StartDate = reader.GetDateTime(startDateTypeIndex);
            }
            int endDateTypeIndex = reader.GetOrdinal("EndDate");
            if (!reader.IsDBNull(endDateTypeIndex))
            {
                res_Course.EndDate = reader.GetDateTime(endDateTypeIndex);
            }

            int teacherInfoTypeIndex = reader.GetOrdinal("TeacherInfo");
            if (!reader.IsDBNull(teacherInfoTypeIndex))
            {
                res_Course.TeacherInfo = reader.GetString(teacherInfoTypeIndex);
            }

            return res_Course; 
		}
	}
}
