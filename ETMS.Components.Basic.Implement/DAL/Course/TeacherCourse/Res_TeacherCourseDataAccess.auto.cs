//==================================================================================================
//Version 1.0, auto-generated.
//Generated By xinyb.
//Date: 2012-03-31 21:47:27.
//==================================================================================================
//==================================================================================================
//This file is generated by CodeGenerator(Ver 2.1), a product of ZhouYonghua(Zhou_Yonghua@163.com).
//==================================================================================================

using System;
using System.Data;

using System.Data.SqlClient;
using ETMS.Utility.Data;

using ETMS.Components.Basic.API.Entity.Course.Teacher;

namespace ETMS.Components.Basic.Implement.DAL.Course.Teacher
{
    /// <summary>
    /// 讲师授课课程关系表数据访问
    /// </summary>
    public partial class Res_TeacherCourseDataAccess
	{
		/// <summary>
		/// 增加
		/// </summary>
		public void Add(Res_TeacherCourse res_TeacherCourse)
		{
			string commandName = "dbo.Pr_Res_TeacherCourse_Insert";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSWrite, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@TeacherCourseID", SqlDbType.UniqueIdentifier),
					new SqlParameter("@TeacherID", SqlDbType.Int),
					new SqlParameter("@CourseID", SqlDbType.UniqueIdentifier),
					new SqlParameter("@CreateTime", SqlDbType.DateTime),
					new SqlParameter("@CreateUser", SqlDbType.NVarChar, 128),
					new SqlParameter("@CreateUserID", SqlDbType.Int)
					};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSWrite, commandName, parms);
			}
			
			parms[0].Value = res_TeacherCourse.TeacherCourseID;
			parms[1].Value = res_TeacherCourse.TeacherID;
			parms[2].Value = res_TeacherCourse.CourseID;
			parms[3].Value = res_TeacherCourse.CreateTime;
			if (res_TeacherCourse.CreateUser!= null){ parms[4].Value = res_TeacherCourse.CreateUser; } else { parms[4].Value = DBNull.Value; }
			parms[5].Value = res_TeacherCourse.CreateUserID;
			#endregion
			SqlHelper.ExecuteNonQuery(ConnectionString.ETMSWrite, CommandType.StoredProcedure, commandName, parms);
			
		}
		
		/// <summary>
		/// 删除
		/// </summary>
		public void Remove(Guid teacherCourseID)
		{
			string commandName = "dbo.Pr_Res_TeacherCourse_Delete";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSWrite, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@TeacherCourseID", SqlDbType.UniqueIdentifier)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSWrite, commandName, parms);
			}
			
			parms[0].Value = teacherCourseID;
			
			#endregion
			SqlHelper.ExecuteNonQuery(ConnectionString.ETMSWrite, CommandType.StoredProcedure, commandName, parms);
		}
		
		/// <summary>
		/// 保存
		/// </summary>
		public void Save(Res_TeacherCourse res_TeacherCourse)
		{
			string commandName = "dbo.Pr_Res_TeacherCourse_Update";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSWrite, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@TeacherCourseID", SqlDbType.UniqueIdentifier),
					new SqlParameter("@TeacherID", SqlDbType.Int),
					new SqlParameter("@CourseID", SqlDbType.UniqueIdentifier),
					new SqlParameter("@CreateTime", SqlDbType.DateTime),
					new SqlParameter("@CreateUser", SqlDbType.NVarChar, 128),
					new SqlParameter("@CreateUserID", SqlDbType.Int)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSWrite, commandName, parms);
			}
			
			parms[0].Value = res_TeacherCourse.TeacherCourseID;
			parms[1].Value = res_TeacherCourse.TeacherID;
			parms[2].Value = res_TeacherCourse.CourseID;
			parms[3].Value = res_TeacherCourse.CreateTime;
			if (res_TeacherCourse.CreateUser!= null){ parms[4].Value = res_TeacherCourse.CreateUser; } else { parms[4].Value = DBNull.Value; }
			parms[5].Value = res_TeacherCourse.CreateUserID;
			#endregion
			SqlHelper.ExecuteNonQuery(ConnectionString.ETMSWrite, CommandType.StoredProcedure, commandName, parms);
		}
		
		/// <summary>
		/// 根据标识获取对象
		/// </summary>
		public Res_TeacherCourse GetById(Guid teacherCourseID)
		{
			Res_TeacherCourse res_TeacherCourse = null;
			
			string commandName = "dbo.Pr_Res_TeacherCourse_GetByPK";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSRead, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@TeacherCourseID", SqlDbType.UniqueIdentifier)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSRead, commandName, parms);
			}
			
			parms[0].Value = teacherCourseID;
			
			#endregion
			using (SqlDataReader dataReader = SqlHelper.ExecuteReader(ConnectionString.ETMSRead, CommandType.StoredProcedure, commandName, parms))
			{
				if (dataReader.Read())
				{
					res_TeacherCourse = PopulateRes_TeacherCourseFromDataReader(dataReader);
				}
			}
			
			return res_TeacherCourse;
		}				
		
		/// <summary>
		/// 根据参数获取对象列表（分页，可排序）
		/// </summary>
		public DataTable GetPagedList(int pageIndex, int pageSize, string sortExpression, string criteria, out int totalRecords)
		{			
			string commandName = "dbo.Pr_Res_TeacherCourse_GetPagedList";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSRead, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@PageIndex", SqlDbType.Int),
					new SqlParameter("@PageSize", SqlDbType.Int),
					new SqlParameter("@SortExpression", SqlDbType.VarChar),
					new SqlParameter("@Criteria", SqlDbType.VarChar),
					new SqlParameter("@ReturnValue", SqlDbType.Int, 4, ParameterDirection.ReturnValue, false, 0, 0, String.Empty, DataRowVersion.Default, null)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSRead, commandName, parms);
			}
			
			parms[0].Value = pageIndex;
			parms[1].Value = pageSize;
			parms[2].Value = sortExpression;
			parms[3].Value = criteria;
			#endregion
			DataTable dt=SqlHelper.ExecuteDataset(ConnectionString.ETMSRead, CommandType.StoredProcedure, commandName, parms).Tables[0];
			totalRecords = (int)parms[4].Value;
			return dt;
		}

        public DataTable GetCourseTeacher(Guid courseID)
        {
            string commandName = @"SELECT B.TeacherID, B.TeacherBrief, C.PhotoUrl, C.RealName, B.Expertise, B.ServiceEnterprise
                                    FROM Res_TeacherCourse A
									INNER JOIN Res_Course D ON D.CourseID = A.CourseID AND D.CourseModel = 1
                                    INNER JOIN Site_Teacher B ON A.TeacherID = B.TeacherID
                                    INNER JOIN Site_User C ON B.TeacherID = C.UserID
                                    WHERE A.CourseID = @CourseID
                                    UNION 
                                    SELECT DISTINCT T.TeacherID, T.TeacherBrief, U.PhotoUrl, U.RealName, T.Expertise, T.ServiceEnterprise
                                    FROM Res_Living R
                                    INNER JOIN dbo.Res_Course H ON H.CourseID = R.CourseID AND H.CourseModel = 2
                                    INNER JOIN dbo.Site_Teacher T ON R.TeacherID = T.TeacherID
                                    INNER JOIN dbo.Site_User U ON U.UserID = T.TeacherID
                                    WHERE R.CourseID = @CourseID ";
            #region Parameters
            SqlParameter[] parms = new SqlParameter[] {
                    new SqlParameter("@CourseID", SqlDbType.UniqueIdentifier)
                };
               
            parms[0].Value = courseID;
            #endregion
            DataTable dt = SqlHelper.ExecuteDataset(ConnectionString.ETMSRead, CommandType.Text, commandName, parms).Tables[0];
            return dt;
        }

        /// <summary>
        /// 从DataReader中读取数据到业务对象
        /// </summary>
        private Res_TeacherCourse PopulateRes_TeacherCourseFromDataReader(SqlDataReader reader)
		{
			Res_TeacherCourse res_TeacherCourse = new Res_TeacherCourse();
			
			int teacherCourseIDIndex = reader.GetOrdinal("TeacherCourseID"); 
			if(!reader.IsDBNull(teacherCourseIDIndex))
			{
				res_TeacherCourse.TeacherCourseID= reader.GetGuid(teacherCourseIDIndex);
			}
			
			int teacherIDIndex = reader.GetOrdinal("TeacherID"); 
			if(!reader.IsDBNull(teacherIDIndex))
			{
				res_TeacherCourse.TeacherID= reader.GetInt32(teacherIDIndex);
			}
			
			int courseIDIndex = reader.GetOrdinal("CourseID"); 
			if(!reader.IsDBNull(courseIDIndex))
			{
				res_TeacherCourse.CourseID= reader.GetGuid(courseIDIndex);
			}
			
			int createTimeIndex = reader.GetOrdinal("CreateTime"); 
			if(!reader.IsDBNull(createTimeIndex))
			{
				res_TeacherCourse.CreateTime= reader.GetDateTime(createTimeIndex);
			}
			
			int createUserIndex = reader.GetOrdinal("CreateUser"); 
			if(!reader.IsDBNull(createUserIndex))
			{
				res_TeacherCourse.CreateUser= reader.GetString(createUserIndex);
			}
			
			int createUserIDIndex = reader.GetOrdinal("CreateUserID"); 
			if(!reader.IsDBNull(createUserIDIndex))
			{
				res_TeacherCourse.CreateUserID= reader.GetInt32(createUserIDIndex);
			}
			
			return res_TeacherCourse; 
		}
	}
}
