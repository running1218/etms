//==================================================================================================
//Version 1.0, auto-generated.
//Generated By huangzhf.
//Date: 2012-5-23 16:19:57.
//==================================================================================================
//==================================================================================================
//This file is generated by CodeGenerator(Ver 2.1), a product of ZhouYonghua(Zhou_Yonghua@163.com).
//==================================================================================================

using System;
using System.Collections.Generic;
using System.Data;

using System.Data.SqlClient;
using ETMS.Utility.Data;

using ETMS.Components.Basic.API.Entity.TrainingPlan.Course;

namespace ETMS.Components.Basic.Implement.DAL.TrainingPlan.Course
{
    /// <summary>
    /// 培训计划课程表数据访问
    /// </summary>
    public partial class Tr_PlanCourseDataAccess
	{
		/// <summary>
		/// 增加
		/// </summary>
		public void Add(Tr_PlanCourse tr_PlanCourse)
		{
			string commandName = "dbo.Pr_Tr_PlanCourse_Insert";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSWrite, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@PlanCourseID", SqlDbType.UniqueIdentifier),
					new SqlParameter("@PlanID", SqlDbType.UniqueIdentifier),
					new SqlParameter("@CourseID", SqlDbType.UniqueIdentifier),
					new SqlParameter("@OuterOrgID", SqlDbType.UniqueIdentifier),
					new SqlParameter("@CourseAttrID", SqlDbType.Int),
					new SqlParameter("@TrainingModelID", SqlDbType.Int),
					new SqlParameter("@TeachModelID", SqlDbType.Int),
					new SqlParameter("@OrgID", SqlDbType.Int),
					new SqlParameter("@BudgetFee", SqlDbType.Decimal, 9, ParameterDirection.Input, true, 15, 2, String.Empty, DataRowVersion.Default, null),
					new SqlParameter("@CourseStatus", SqlDbType.Bit),
					new SqlParameter("@CreateTime", SqlDbType.DateTime),
					new SqlParameter("@CreateUserID", SqlDbType.Int),
					new SqlParameter("@CreateUser", SqlDbType.NVarChar, 128),
					new SqlParameter("@ModifyTime", SqlDbType.DateTime),
					new SqlParameter("@ModifyUser", SqlDbType.NVarChar, 128),
					new SqlParameter("@Remark", SqlDbType.NVarChar, -1),
					new SqlParameter("@DelFlag", SqlDbType.Bit)
					};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSWrite, commandName, parms);
			}
			
			parms[0].Value = tr_PlanCourse.PlanCourseID;
			parms[1].Value = tr_PlanCourse.PlanID;
			parms[2].Value = tr_PlanCourse.CourseID;
			parms[3].Value = tr_PlanCourse.OuterOrgID;
			parms[4].Value = tr_PlanCourse.CourseAttrID;
			parms[5].Value = tr_PlanCourse.TrainingModelID;
			parms[6].Value = tr_PlanCourse.TeachModelID;
			parms[7].Value = tr_PlanCourse.OrgID;
			parms[8].Value = tr_PlanCourse.BudgetFee;
			parms[9].Value = tr_PlanCourse.CourseStatus;
			parms[10].Value = tr_PlanCourse.CreateTime;
			parms[11].Value = tr_PlanCourse.CreateUserID;
			if (tr_PlanCourse.CreateUser!= null){ parms[12].Value = tr_PlanCourse.CreateUser; } else { parms[12].Value = DBNull.Value; }
			parms[13].Value = tr_PlanCourse.ModifyTime;
			if (tr_PlanCourse.ModifyUser!= null){ parms[14].Value = tr_PlanCourse.ModifyUser; } else { parms[14].Value = DBNull.Value; }
			if (tr_PlanCourse.Remark!= null){ parms[15].Value = tr_PlanCourse.Remark; } else { parms[15].Value = DBNull.Value; }
			parms[16].Value = tr_PlanCourse.DelFlag;
			#endregion
			SqlHelper.ExecuteNonQuery(ConnectionString.ETMSWrite, CommandType.StoredProcedure, commandName, parms);
			
		}
		
		/// <summary>
		/// 删除
		/// </summary>
		public void Remove(Guid planCourseID)
		{
			string commandName = "dbo.Pr_Tr_PlanCourse_Delete";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSWrite, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@PlanCourseID", SqlDbType.UniqueIdentifier)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSWrite, commandName, parms);
			}
			
			parms[0].Value = planCourseID;
			
			#endregion
			SqlHelper.ExecuteNonQuery(ConnectionString.ETMSWrite, CommandType.StoredProcedure, commandName, parms);
		}
		
		/// <summary>
		/// 保存
		/// </summary>
		public void Save(Tr_PlanCourse tr_PlanCourse)
		{
			string commandName = "dbo.Pr_Tr_PlanCourse_Update";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSWrite, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@PlanCourseID", SqlDbType.UniqueIdentifier),
					new SqlParameter("@PlanID", SqlDbType.UniqueIdentifier),
					new SqlParameter("@CourseID", SqlDbType.UniqueIdentifier),
					new SqlParameter("@OuterOrgID", SqlDbType.UniqueIdentifier),
					new SqlParameter("@CourseAttrID", SqlDbType.Int),
					new SqlParameter("@TrainingModelID", SqlDbType.Int),
					new SqlParameter("@TeachModelID", SqlDbType.Int),
					new SqlParameter("@OrgID", SqlDbType.Int),
					new SqlParameter("@BudgetFee", SqlDbType.Decimal, 9, ParameterDirection.Input, true, 15, 2, String.Empty, DataRowVersion.Default, null),
					new SqlParameter("@CourseStatus", SqlDbType.Bit),
					new SqlParameter("@CreateTime", SqlDbType.DateTime),
					new SqlParameter("@CreateUserID", SqlDbType.Int),
					new SqlParameter("@CreateUser", SqlDbType.NVarChar, 128),
					new SqlParameter("@ModifyTime", SqlDbType.DateTime),
					new SqlParameter("@ModifyUser", SqlDbType.NVarChar, 128),
					new SqlParameter("@Remark", SqlDbType.NVarChar, -1),
					new SqlParameter("@DelFlag", SqlDbType.Bit)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSWrite, commandName, parms);
			}
			
			parms[0].Value = tr_PlanCourse.PlanCourseID;
			parms[1].Value = tr_PlanCourse.PlanID;
			parms[2].Value = tr_PlanCourse.CourseID;
			parms[3].Value = tr_PlanCourse.OuterOrgID;
			parms[4].Value = tr_PlanCourse.CourseAttrID;
			parms[5].Value = tr_PlanCourse.TrainingModelID;
			parms[6].Value = tr_PlanCourse.TeachModelID;
			parms[7].Value = tr_PlanCourse.OrgID;
			parms[8].Value = tr_PlanCourse.BudgetFee;
			parms[9].Value = tr_PlanCourse.CourseStatus;
			parms[10].Value = tr_PlanCourse.CreateTime;
			parms[11].Value = tr_PlanCourse.CreateUserID;
			if (tr_PlanCourse.CreateUser!= null){ parms[12].Value = tr_PlanCourse.CreateUser; } else { parms[12].Value = DBNull.Value; }
			parms[13].Value = tr_PlanCourse.ModifyTime;
			if (tr_PlanCourse.ModifyUser!= null){ parms[14].Value = tr_PlanCourse.ModifyUser; } else { parms[14].Value = DBNull.Value; }
			if (tr_PlanCourse.Remark!= null){ parms[15].Value = tr_PlanCourse.Remark; } else { parms[15].Value = DBNull.Value; }
			parms[16].Value = tr_PlanCourse.DelFlag;
			#endregion
			SqlHelper.ExecuteNonQuery(ConnectionString.ETMSWrite, CommandType.StoredProcedure, commandName, parms);
		}
		
		/// <summary>
		/// 根据标识获取对象
		/// </summary>
		public Tr_PlanCourse GetById(Guid planCourseID)
		{
			Tr_PlanCourse tr_PlanCourse = null;
			
			string commandName = "dbo.Pr_Tr_PlanCourse_GetByPK";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSRead, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@PlanCourseID", SqlDbType.UniqueIdentifier)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSRead, commandName, parms);
			}
			
			parms[0].Value = planCourseID;
			
			#endregion
			using (SqlDataReader dataReader = SqlHelper.ExecuteReader(ConnectionString.ETMSRead, CommandType.StoredProcedure, commandName, parms))
			{
				if (dataReader.Read())
				{
					tr_PlanCourse = PopulateTr_PlanCourseFromDataReader(dataReader);
				}
			}
			
			return tr_PlanCourse;
		}				
		
		/// <summary>
		/// 根据参数获取对象列表（分页，可排序）
		/// </summary>
		public DataTable GetPagedList(int pageIndex, int pageSize, string sortExpression, string criteria, out int totalRecords)
		{			
			string commandName = "dbo.Pr_Tr_PlanCourse_GetPagedList";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSRead, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@PageIndex", SqlDbType.Int),
					new SqlParameter("@PageSize", SqlDbType.Int),
					new SqlParameter("@SortExpression", SqlDbType.VarChar),
					new SqlParameter("@Criteria", SqlDbType.VarChar),
					new SqlParameter("@ReturnValue", SqlDbType.Int, 4, ParameterDirection.ReturnValue, false, 0, 0, String.Empty, DataRowVersion.Default, null)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSRead, commandName, parms);
			}
			
			parms[0].Value = pageIndex;
			parms[1].Value = pageSize;
			parms[2].Value = sortExpression;
			parms[3].Value = criteria;
			#endregion
			DataTable dt=SqlHelper.ExecuteDataset(ConnectionString.ETMSRead, CommandType.StoredProcedure, commandName, parms).Tables[0];
			totalRecords = (int)parms[4].Value;
			return dt;
		}
		
	    /// <summary>
		/// 根据参数获取对象列表（分页，可排序）
		/// </summary>
		public IList<Tr_PlanCourse> GetEntityList(int pageIndex, int pageSize, string sortExpression, string criteria, out int totalRecords)
		{			
            IList<Tr_PlanCourse> list=new List<Tr_PlanCourse>();
			string commandName = "dbo.Pr_Tr_PlanCourse_GetPagedList";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSRead, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@PageIndex", SqlDbType.Int),
					new SqlParameter("@PageSize", SqlDbType.Int),
					new SqlParameter("@SortExpression", SqlDbType.VarChar),
					new SqlParameter("@Criteria", SqlDbType.VarChar),
					new SqlParameter("@ReturnValue", SqlDbType.Int, 4, ParameterDirection.ReturnValue, false, 0, 0, String.Empty, DataRowVersion.Default, null)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSRead, commandName, parms);
			}
			
			parms[0].Value = pageIndex;
			parms[1].Value = pageSize;
			parms[2].Value = sortExpression;
			parms[3].Value = criteria;
			#endregion
            using (SqlDataReader dataReader = SqlHelper.ExecuteReader(ConnectionString.ETMSRead, CommandType.StoredProcedure, commandName, parms))
			{
				while (dataReader.Read())
				{
					list.Add(PopulateTr_PlanCourseFromDataReader(dataReader));
				}
			}			
			totalRecords = (int)parms[4].Value;
			return list;
		}
		
		/// <summary>
		/// 从DataReader中读取数据到业务对象
		/// </summary>
		private Tr_PlanCourse PopulateTr_PlanCourseFromDataReader(SqlDataReader reader)
		{
			Tr_PlanCourse tr_PlanCourse = new Tr_PlanCourse();
			
			int planCourseIDIndex = reader.GetOrdinal("PlanCourseID"); 
			if(!reader.IsDBNull(planCourseIDIndex))
			{
				tr_PlanCourse.PlanCourseID= reader.GetGuid(planCourseIDIndex);
			}
			
			int planIDIndex = reader.GetOrdinal("PlanID"); 
			if(!reader.IsDBNull(planIDIndex))
			{
				tr_PlanCourse.PlanID= reader.GetGuid(planIDIndex);
			}
			
			int courseIDIndex = reader.GetOrdinal("CourseID"); 
			if(!reader.IsDBNull(courseIDIndex))
			{
				tr_PlanCourse.CourseID= reader.GetGuid(courseIDIndex);
			}
			
			int outerOrgIDIndex = reader.GetOrdinal("OuterOrgID"); 
			if(!reader.IsDBNull(outerOrgIDIndex))
			{
				tr_PlanCourse.OuterOrgID= reader.GetGuid(outerOrgIDIndex);
			}
			
			int courseAttrIDIndex = reader.GetOrdinal("CourseAttrID"); 
			if(!reader.IsDBNull(courseAttrIDIndex))
			{
				tr_PlanCourse.CourseAttrID= reader.GetInt32(courseAttrIDIndex);
			}
			
			int trainingModelIDIndex = reader.GetOrdinal("TrainingModelID"); 
			if(!reader.IsDBNull(trainingModelIDIndex))
			{
				tr_PlanCourse.TrainingModelID= reader.GetInt32(trainingModelIDIndex);
			}
			
			int teachModelIDIndex = reader.GetOrdinal("TeachModelID"); 
			if(!reader.IsDBNull(teachModelIDIndex))
			{
				tr_PlanCourse.TeachModelID= reader.GetInt32(teachModelIDIndex);
			}
			
			int orgIDIndex = reader.GetOrdinal("OrgID"); 
			if(!reader.IsDBNull(orgIDIndex))
			{
				tr_PlanCourse.OrgID= reader.GetInt32(orgIDIndex);
			}
			
			int budgetFeeIndex = reader.GetOrdinal("BudgetFee"); 
			if(!reader.IsDBNull(budgetFeeIndex))
			{
				tr_PlanCourse.BudgetFee= reader.GetDecimal(budgetFeeIndex);
			}
			
			int courseStatusIndex = reader.GetOrdinal("CourseStatus"); 
			if(!reader.IsDBNull(courseStatusIndex))
			{
				tr_PlanCourse.CourseStatus= reader.GetBoolean(courseStatusIndex);
			}
			
			int createTimeIndex = reader.GetOrdinal("CreateTime"); 
			if(!reader.IsDBNull(createTimeIndex))
			{
				tr_PlanCourse.CreateTime= reader.GetDateTime(createTimeIndex);
			}
			
			int createUserIDIndex = reader.GetOrdinal("CreateUserID"); 
			if(!reader.IsDBNull(createUserIDIndex))
			{
				tr_PlanCourse.CreateUserID= reader.GetInt32(createUserIDIndex);
			}
			
			int createUserIndex = reader.GetOrdinal("CreateUser"); 
			if(!reader.IsDBNull(createUserIndex))
			{
				tr_PlanCourse.CreateUser= reader.GetString(createUserIndex);
			}
			
			int modifyTimeIndex = reader.GetOrdinal("ModifyTime"); 
			if(!reader.IsDBNull(modifyTimeIndex))
			{
				tr_PlanCourse.ModifyTime= reader.GetDateTime(modifyTimeIndex);
			}
			
			int modifyUserIndex = reader.GetOrdinal("ModifyUser"); 
			if(!reader.IsDBNull(modifyUserIndex))
			{
				tr_PlanCourse.ModifyUser= reader.GetString(modifyUserIndex);
			}
			
			int remarkIndex = reader.GetOrdinal("Remark"); 
			if(!reader.IsDBNull(remarkIndex))
			{
				tr_PlanCourse.Remark= reader.GetString(remarkIndex);
			}
			
			int delFlagIndex = reader.GetOrdinal("DelFlag"); 
			if(!reader.IsDBNull(delFlagIndex))
			{
				tr_PlanCourse.DelFlag= reader.GetBoolean(delFlagIndex);
			}
			
			return tr_PlanCourse; 
		}
	}
}
