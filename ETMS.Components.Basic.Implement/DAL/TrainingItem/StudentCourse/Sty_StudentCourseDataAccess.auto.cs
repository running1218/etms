//==================================================================================================
//Version 1.0, auto-generated.
//Generated By huangzf.
//Date: 2013-3-7 10:28:02.
//==================================================================================================
//==================================================================================================
//This file is generated by CodeGenerator(Ver 2.1)
//==================================================================================================

using System;
using System.Collections.Generic;
using System.Data;

using System.Data.SqlClient;
using ETMS.Utility.Data;

using ETMS.Components.Basic.API.Entity.TrainingItem.StudentCourse;

namespace ETMS.Components.Basic.Implement.DAL.TrainingItem.StudentCourse
{
    /// <summary>
    /// 学员选课表数据访问
    /// </summary>
    public partial class Sty_StudentCourseDataAccess
    {
        /// <summary>
        /// 增加
        /// </summary>
        public void Add(Sty_StudentCourse sty_StudentCourse)
        {
            string commandName = "dbo.Pr_Sty_StudentCourse_Insert";
            #region Parameters
            SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSWrite, commandName);
            if (parms == null)
            {
                parms = new SqlParameter[] {
					new SqlParameter("@StudentCourse", SqlDbType.UniqueIdentifier),
					new SqlParameter("@StudentSignupID", SqlDbType.UniqueIdentifier),
					new SqlParameter("@TrainingItemCourseID", SqlDbType.UniqueIdentifier),
					new SqlParameter("@SumGrade", SqlDbType.Decimal, 9, ParameterDirection.Input, true, 10, 2, String.Empty, DataRowVersion.Default, null),
					new SqlParameter("@IsPass", SqlDbType.Bit),
					new SqlParameter("@AssessOpinion", SqlDbType.NVarChar, 2048),
					new SqlParameter("@CreateTime", SqlDbType.DateTime),
					new SqlParameter("@CreateUserID", SqlDbType.Int),
					new SqlParameter("@CreateUser", SqlDbType.NVarChar, 128),
					new SqlParameter("@ModifyTime", SqlDbType.DateTime),
					new SqlParameter("@ModifyUser", SqlDbType.NVarChar, 128),
					new SqlParameter("@IsUse", SqlDbType.Int),
					new SqlParameter("@AccessPoints", SqlDbType.Int),
					new SqlParameter("@AccessPointsTime", SqlDbType.DateTime),
					new SqlParameter("@AccessPointsUser", SqlDbType.NVarChar, 128),
					new SqlParameter("@Remark", SqlDbType.NVarChar, -1),
					new SqlParameter("@AccessPointsMode", SqlDbType.Int),
					new SqlParameter("@IsIssueScore", SqlDbType.Bit),
					new SqlParameter("@ScoreIssueUser", SqlDbType.NVarChar, 128),
					new SqlParameter("@ScoreIssueTime", SqlDbType.DateTime)
					};
                SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSWrite, commandName, parms);
            }

            parms[0].Value = sty_StudentCourse.StudentCourse;
            parms[1].Value = sty_StudentCourse.StudentSignupID;
            parms[2].Value = sty_StudentCourse.TrainingItemCourseID;
            parms[3].Value = sty_StudentCourse.SumGrade;
            parms[4].Value = sty_StudentCourse.IsPass;
            if (sty_StudentCourse.AssessOpinion != null) { parms[5].Value = sty_StudentCourse.AssessOpinion; } else { parms[5].Value = DBNull.Value; }
            parms[6].Value = sty_StudentCourse.CreateTime;
            parms[7].Value = sty_StudentCourse.CreateUserID;
            if (sty_StudentCourse.CreateUser != null) { parms[8].Value = sty_StudentCourse.CreateUser; } else { parms[8].Value = DBNull.Value; }
            parms[9].Value = sty_StudentCourse.ModifyTime;
            if (sty_StudentCourse.ModifyUser != null) { parms[10].Value = sty_StudentCourse.ModifyUser; } else { parms[10].Value = DBNull.Value; }
            parms[11].Value = sty_StudentCourse.IsUse;
            parms[12].Value = sty_StudentCourse.AccessPoints;
            parms[13].Value = sty_StudentCourse.AccessPointsTime;
            if (sty_StudentCourse.AccessPointsUser != null) { parms[14].Value = sty_StudentCourse.AccessPointsUser; } else { parms[14].Value = DBNull.Value; }
            if (sty_StudentCourse.Remark != null) { parms[15].Value = sty_StudentCourse.Remark; } else { parms[15].Value = DBNull.Value; }
            parms[16].Value = sty_StudentCourse.AccessPointsMode;
            parms[17].Value = sty_StudentCourse.IsIssueScore;
            if (sty_StudentCourse.ScoreIssueUser != null) { parms[18].Value = sty_StudentCourse.ScoreIssueUser; } else { parms[18].Value = DBNull.Value; }
            parms[19].Value = sty_StudentCourse.ScoreIssueTime;
            #endregion
            SqlHelper.ExecuteNonQuery(ConnectionString.ETMSWrite, CommandType.StoredProcedure, commandName, parms);

        }

        /// <summary>
        /// 删除
        /// </summary>
        public void Remove(Guid studentCourse)
        {
            string commandName = "dbo.Pr_Sty_StudentCourse_Delete";
            #region Parameters
            SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSWrite, commandName);
            if (parms == null)
            {
                parms = new SqlParameter[] {
					new SqlParameter("@StudentCourse", SqlDbType.UniqueIdentifier)
				};
                SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSWrite, commandName, parms);
            }

            parms[0].Value = studentCourse;

            #endregion
            SqlHelper.ExecuteNonQuery(ConnectionString.ETMSWrite, CommandType.StoredProcedure, commandName, parms);
        }

        /// <summary>
        /// 保存
        /// </summary>
        public void Save(Sty_StudentCourse sty_StudentCourse)
        {
            string commandName = "dbo.Pr_Sty_StudentCourse_Update";
            #region Parameters
            SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSWrite, commandName);
            if (parms == null)
            {
                parms = new SqlParameter[] {
					new SqlParameter("@StudentCourse", SqlDbType.UniqueIdentifier),
					new SqlParameter("@StudentSignupID", SqlDbType.UniqueIdentifier),
					new SqlParameter("@TrainingItemCourseID", SqlDbType.UniqueIdentifier),
					new SqlParameter("@SumGrade", SqlDbType.Decimal, 9, ParameterDirection.Input, true, 10, 2, String.Empty, DataRowVersion.Default, null),
					new SqlParameter("@IsPass", SqlDbType.Bit),
					new SqlParameter("@AssessOpinion", SqlDbType.NVarChar, 2048),
					new SqlParameter("@CreateTime", SqlDbType.DateTime),
					new SqlParameter("@CreateUserID", SqlDbType.Int),
					new SqlParameter("@CreateUser", SqlDbType.NVarChar, 128),
					new SqlParameter("@ModifyTime", SqlDbType.DateTime),
					new SqlParameter("@ModifyUser", SqlDbType.NVarChar, 128),
					new SqlParameter("@IsUse", SqlDbType.Int),
					new SqlParameter("@AccessPoints", SqlDbType.Int),
					new SqlParameter("@AccessPointsTime", SqlDbType.DateTime),
					new SqlParameter("@AccessPointsUser", SqlDbType.NVarChar, 128),
					new SqlParameter("@Remark", SqlDbType.NVarChar, -1),
					new SqlParameter("@AccessPointsMode", SqlDbType.Int),
					new SqlParameter("@IsIssueScore", SqlDbType.Bit),
					new SqlParameter("@ScoreIssueUser", SqlDbType.NVarChar, 128),
					new SqlParameter("@ScoreIssueTime", SqlDbType.DateTime)
				};
                SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSWrite, commandName, parms);
            }

            parms[0].Value = sty_StudentCourse.StudentCourse;
            parms[1].Value = sty_StudentCourse.StudentSignupID;
            parms[2].Value = sty_StudentCourse.TrainingItemCourseID;
            parms[3].Value = sty_StudentCourse.SumGrade;
            parms[4].Value = sty_StudentCourse.IsPass;
            if (sty_StudentCourse.AssessOpinion != null) { parms[5].Value = sty_StudentCourse.AssessOpinion; } else { parms[5].Value = DBNull.Value; }
            parms[6].Value = sty_StudentCourse.CreateTime;
            parms[7].Value = sty_StudentCourse.CreateUserID;
            if (sty_StudentCourse.CreateUser != null) { parms[8].Value = sty_StudentCourse.CreateUser; } else { parms[8].Value = DBNull.Value; }
            parms[9].Value = sty_StudentCourse.ModifyTime;
            if (sty_StudentCourse.ModifyUser != null) { parms[10].Value = sty_StudentCourse.ModifyUser; } else { parms[10].Value = DBNull.Value; }
            parms[11].Value = sty_StudentCourse.IsUse;
            parms[12].Value = sty_StudentCourse.AccessPoints;
            parms[13].Value = sty_StudentCourse.AccessPointsTime;
            if (sty_StudentCourse.AccessPointsUser != null) { parms[14].Value = sty_StudentCourse.AccessPointsUser; } else { parms[14].Value = DBNull.Value; }
            if (sty_StudentCourse.Remark != null) { parms[15].Value = sty_StudentCourse.Remark; } else { parms[15].Value = DBNull.Value; }
            parms[16].Value = sty_StudentCourse.AccessPointsMode;
            parms[17].Value = sty_StudentCourse.IsIssueScore;
            if (sty_StudentCourse.ScoreIssueUser != null) { parms[18].Value = sty_StudentCourse.ScoreIssueUser; } else { parms[18].Value = DBNull.Value; }
            parms[19].Value = sty_StudentCourse.ScoreIssueTime;
            #endregion
            SqlHelper.ExecuteNonQuery(ConnectionString.ETMSWrite, CommandType.StoredProcedure, commandName, parms);
        }

        /// <summary>
        /// 根据标识获取对象
        /// </summary>
        public Sty_StudentCourse GetById(Guid studentCourse)
        {
            Sty_StudentCourse sty_StudentCourse = null;

            string commandName = "dbo.Pr_Sty_StudentCourse_GetByPK";
            #region Parameters
            SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSRead, commandName);
            if (parms == null)
            {
                parms = new SqlParameter[] {
					new SqlParameter("@StudentCourse", SqlDbType.UniqueIdentifier)
				};
                SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSRead, commandName, parms);
            }

            parms[0].Value = studentCourse;

            #endregion
            using (SqlDataReader dataReader = SqlHelper.ExecuteReader(ConnectionString.ETMSRead, CommandType.StoredProcedure, commandName, parms))
            {
                if (dataReader.Read())
                {
                    sty_StudentCourse = PopulateSty_StudentCourseFromDataReader(dataReader);
                }
            }

            return sty_StudentCourse;
        }

        /// <summary>
        /// 根据参数获取对象列表（分页，可排序）
        /// </summary>
        public DataTable GetPagedList(int pageIndex, int pageSize, string sortExpression, string criteria, out int totalRecords)
        {
            string commandName = "dbo.Pr_Sty_StudentCourse_GetPagedList";
            #region Parameters
            SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSRead, commandName);
            if (parms == null)
            {
                parms = new SqlParameter[] {
					new SqlParameter("@PageIndex", SqlDbType.Int),
					new SqlParameter("@PageSize", SqlDbType.Int),
					new SqlParameter("@SortExpression", SqlDbType.VarChar),
					new SqlParameter("@Criteria", SqlDbType.VarChar),
					new SqlParameter("@ReturnValue", SqlDbType.Int, 4, ParameterDirection.ReturnValue, false, 0, 0, String.Empty, DataRowVersion.Default, null)
				};
                SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSRead, commandName, parms);
            }

            parms[0].Value = pageIndex;
            parms[1].Value = pageSize;
            parms[2].Value = sortExpression;
            parms[3].Value = criteria;
            #endregion
            DataTable dt = SqlHelper.ExecuteDataset(ConnectionString.ETMSRead, CommandType.StoredProcedure, commandName, parms).Tables[0];
            totalRecords = (int)parms[4].Value;
            return dt;
        }

        /// <summary>
        /// 根据参数获取对象列表（分页，可排序）
        /// </summary>
        public IList<Sty_StudentCourse> GetEntityList(int pageIndex, int pageSize, string sortExpression, string criteria, out int totalRecords)
        {
            IList<Sty_StudentCourse> list = new List<Sty_StudentCourse>();
            string commandName = "dbo.Pr_Sty_StudentCourse_GetPagedList";
            #region Parameters
            SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSRead, commandName);
            if (parms == null)
            {
                parms = new SqlParameter[] {
					new SqlParameter("@PageIndex", SqlDbType.Int),
					new SqlParameter("@PageSize", SqlDbType.Int),
					new SqlParameter("@SortExpression", SqlDbType.VarChar),
					new SqlParameter("@Criteria", SqlDbType.VarChar),
					new SqlParameter("@ReturnValue", SqlDbType.Int, 4, ParameterDirection.ReturnValue, false, 0, 0, String.Empty, DataRowVersion.Default, null)
				};
                SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSRead, commandName, parms);
            }

            parms[0].Value = pageIndex;
            parms[1].Value = pageSize;
            parms[2].Value = sortExpression;
            parms[3].Value = criteria;
            #endregion
            using (SqlDataReader dataReader = SqlHelper.ExecuteReader(ConnectionString.ETMSRead, CommandType.StoredProcedure, commandName, parms))
            {
                while (dataReader.Read())
                {
                    list.Add(PopulateSty_StudentCourseFromDataReader(dataReader));
                }
            }
            totalRecords = (int)parms[4].Value;
            return list;
        }

        /// <summary>
        /// 从DataReader中读取数据到业务对象
        /// </summary>
        private Sty_StudentCourse PopulateSty_StudentCourseFromDataReader(SqlDataReader reader)
        {
            Sty_StudentCourse sty_StudentCourse = new Sty_StudentCourse();

            int studentCourseIndex = reader.GetOrdinal("StudentCourse");
            if (!reader.IsDBNull(studentCourseIndex))
            {
                sty_StudentCourse.StudentCourse = reader.GetGuid(studentCourseIndex);
            }

            int studentSignupIDIndex = reader.GetOrdinal("StudentSignupID");
            if (!reader.IsDBNull(studentSignupIDIndex))
            {
                sty_StudentCourse.StudentSignupID = reader.GetGuid(studentSignupIDIndex);
            }

            int trainingItemCourseIDIndex = reader.GetOrdinal("TrainingItemCourseID");
            if (!reader.IsDBNull(trainingItemCourseIDIndex))
            {
                sty_StudentCourse.TrainingItemCourseID = reader.GetGuid(trainingItemCourseIDIndex);
            }

            int sumGradeIndex = reader.GetOrdinal("SumGrade");
            if (!reader.IsDBNull(sumGradeIndex))
            {
                sty_StudentCourse.SumGrade = reader.GetDecimal(sumGradeIndex);
            }

            int isPassIndex = reader.GetOrdinal("IsPass");
            if (!reader.IsDBNull(isPassIndex))
            {
                sty_StudentCourse.IsPass = reader.GetBoolean(isPassIndex);
            }

            int assessOpinionIndex = reader.GetOrdinal("AssessOpinion");
            if (!reader.IsDBNull(assessOpinionIndex))
            {
                sty_StudentCourse.AssessOpinion = reader.GetString(assessOpinionIndex);
            }

            int createTimeIndex = reader.GetOrdinal("CreateTime");
            if (!reader.IsDBNull(createTimeIndex))
            {
                sty_StudentCourse.CreateTime = reader.GetDateTime(createTimeIndex);
            }

            int createUserIDIndex = reader.GetOrdinal("CreateUserID");
            if (!reader.IsDBNull(createUserIDIndex))
            {
                sty_StudentCourse.CreateUserID = reader.GetInt32(createUserIDIndex);
            }

            int createUserIndex = reader.GetOrdinal("CreateUser");
            if (!reader.IsDBNull(createUserIndex))
            {
                sty_StudentCourse.CreateUser = reader.GetString(createUserIndex);
            }

            int modifyTimeIndex = reader.GetOrdinal("ModifyTime");
            if (!reader.IsDBNull(modifyTimeIndex))
            {
                sty_StudentCourse.ModifyTime = reader.GetDateTime(modifyTimeIndex);
            }

            int modifyUserIndex = reader.GetOrdinal("ModifyUser");
            if (!reader.IsDBNull(modifyUserIndex))
            {
                sty_StudentCourse.ModifyUser = reader.GetString(modifyUserIndex);
            }

            int isUseIndex = reader.GetOrdinal("IsUse");
            if (!reader.IsDBNull(isUseIndex))
            {
                sty_StudentCourse.IsUse = reader.GetInt32(isUseIndex);
            }

            int accessPointsIndex = reader.GetOrdinal("AccessPoints");
            if (!reader.IsDBNull(accessPointsIndex))
            {
                sty_StudentCourse.AccessPoints = reader.GetInt32(accessPointsIndex);
            }

            int accessPointsTimeIndex = reader.GetOrdinal("AccessPointsTime");
            if (!reader.IsDBNull(accessPointsTimeIndex))
            {
                sty_StudentCourse.AccessPointsTime = reader.GetDateTime(accessPointsTimeIndex);
            }

            int accessPointsUserIndex = reader.GetOrdinal("AccessPointsUser");
            if (!reader.IsDBNull(accessPointsUserIndex))
            {
                sty_StudentCourse.AccessPointsUser = reader.GetString(accessPointsUserIndex);
            }

            int remarkIndex = reader.GetOrdinal("Remark");
            if (!reader.IsDBNull(remarkIndex))
            {
                sty_StudentCourse.Remark = reader.GetString(remarkIndex);
            }

            int accessPointsModeIndex = reader.GetOrdinal("AccessPointsMode");
            if (!reader.IsDBNull(accessPointsModeIndex))
            {
                sty_StudentCourse.AccessPointsMode = reader.GetInt32(accessPointsModeIndex);
            }

            int isIssueScoreIndex = reader.GetOrdinal("IsIssueScore");
            if (!reader.IsDBNull(isIssueScoreIndex))
            {
                sty_StudentCourse.IsIssueScore = reader.GetBoolean(isIssueScoreIndex);
            }

            int scoreIssueUserIndex = reader.GetOrdinal("ScoreIssueUser");
            if (!reader.IsDBNull(scoreIssueUserIndex))
            {
                sty_StudentCourse.ScoreIssueUser = reader.GetString(scoreIssueUserIndex);
            }

            int scoreIssueTimeIndex = reader.GetOrdinal("ScoreIssueTime");
            if (!reader.IsDBNull(scoreIssueTimeIndex))
            {
                sty_StudentCourse.ScoreIssueTime = reader.GetDateTime(scoreIssueTimeIndex);
            }

            return sty_StudentCourse;
        }
    }
}
