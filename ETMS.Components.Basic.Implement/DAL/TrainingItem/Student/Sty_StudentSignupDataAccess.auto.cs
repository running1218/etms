//==================================================================================================
//Version 1.0, auto-generated.
//Generated By running1218
//Date: 2012-4-5 19:34:56.
//==================================================================================================
//==================================================================================================
//This file is generated by CodeGenerator(Ver 2.1)
//==================================================================================================

using System;
using System.Data;

using System.Data.SqlClient;
using ETMS.Utility.Data;

using ETMS.Components.Basic.API.Entity.TrainingItem.Student;

namespace ETMS.Components.Basic.Implement.DAL.TrainingItem.Student
{
    /// <summary>
    /// 学员报名表数据访问
    /// </summary>
    public partial class Sty_StudentSignupDataAccess
	{
		/// <summary>
		/// 增加
		/// </summary>
		public void Add(Sty_StudentSignup sty_StudentSignup)
		{
			string commandName = "dbo.Pr_Sty_StudentSignup_Insert";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSWrite, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@StudentSignupID", SqlDbType.UniqueIdentifier),
					new SqlParameter("@SignupModeID", SqlDbType.Int),
					new SqlParameter("@TrainingItemID", SqlDbType.UniqueIdentifier),
					new SqlParameter("@UserID", SqlDbType.Int),
					new SqlParameter("@CreateTime", SqlDbType.DateTime),
					new SqlParameter("@CreateUserID", SqlDbType.Int),
					new SqlParameter("@CreateUser", SqlDbType.NVarChar, 128),
					new SqlParameter("@ModifyTime", SqlDbType.DateTime),
					new SqlParameter("@ModifyUser", SqlDbType.NVarChar, 128),
					new SqlParameter("@Remark", SqlDbType.NVarChar, -1),
					new SqlParameter("@DelFlag", SqlDbType.Bit)
					};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSWrite, commandName, parms);
			}
			
			parms[0].Value = sty_StudentSignup.StudentSignupID;
			parms[1].Value = sty_StudentSignup.SignupModeID;
			parms[2].Value = sty_StudentSignup.TrainingItemID;
			parms[3].Value = sty_StudentSignup.UserID;
			parms[4].Value = sty_StudentSignup.CreateTime;
			parms[5].Value = sty_StudentSignup.CreateUserID;
			if (sty_StudentSignup.CreateUser!= null){ parms[6].Value = sty_StudentSignup.CreateUser; } else { parms[6].Value = DBNull.Value; }
			parms[7].Value = sty_StudentSignup.ModifyTime;
			if (sty_StudentSignup.ModifyUser!= null){ parms[8].Value = sty_StudentSignup.ModifyUser; } else { parms[8].Value = DBNull.Value; }
			if (sty_StudentSignup.Remark!= null){ parms[9].Value = sty_StudentSignup.Remark; } else { parms[9].Value = DBNull.Value; }
			parms[10].Value = sty_StudentSignup.DelFlag;
			#endregion
			SqlHelper.ExecuteNonQuery(ConnectionString.ETMSWrite, CommandType.StoredProcedure, commandName, parms);
			
		}
		
		/// <summary>
		/// 删除
		/// </summary>
		public void Remove(Guid studentSignupID)
		{
			string commandName = "dbo.Pr_Sty_StudentSignup_Delete";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSWrite, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@StudentSignupID", SqlDbType.UniqueIdentifier)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSWrite, commandName, parms);
			}
			
			parms[0].Value = studentSignupID;
			
			#endregion
			SqlHelper.ExecuteNonQuery(ConnectionString.ETMSWrite, CommandType.StoredProcedure, commandName, parms);
		}
		
		/// <summary>
		/// 保存
		/// </summary>
		public void Save(Sty_StudentSignup sty_StudentSignup)
		{
			string commandName = "dbo.Pr_Sty_StudentSignup_Update";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSWrite, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@StudentSignupID", SqlDbType.UniqueIdentifier),
					new SqlParameter("@SignupModeID", SqlDbType.Int),
					new SqlParameter("@TrainingItemID", SqlDbType.UniqueIdentifier),
					new SqlParameter("@UserID", SqlDbType.Int),
					new SqlParameter("@CreateTime", SqlDbType.DateTime),
					new SqlParameter("@CreateUserID", SqlDbType.Int),
					new SqlParameter("@CreateUser", SqlDbType.NVarChar, 128),
					new SqlParameter("@ModifyTime", SqlDbType.DateTime),
					new SqlParameter("@ModifyUser", SqlDbType.NVarChar, 128),
					new SqlParameter("@Remark", SqlDbType.NVarChar, -1),
					new SqlParameter("@DelFlag", SqlDbType.Bit),
                    new SqlParameter("@IsUse", SqlDbType.Int)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSWrite, commandName, parms);
			}
			
			parms[0].Value = sty_StudentSignup.StudentSignupID;
			parms[1].Value = sty_StudentSignup.SignupModeID;
			parms[2].Value = sty_StudentSignup.TrainingItemID;
			parms[3].Value = sty_StudentSignup.UserID;
			parms[4].Value = sty_StudentSignup.CreateTime;
			parms[5].Value = sty_StudentSignup.CreateUserID;
			if (sty_StudentSignup.CreateUser!= null){ parms[6].Value = sty_StudentSignup.CreateUser; } else { parms[6].Value = DBNull.Value; }
			parms[7].Value = sty_StudentSignup.ModifyTime;
			if (sty_StudentSignup.ModifyUser!= null){ parms[8].Value = sty_StudentSignup.ModifyUser; } else { parms[8].Value = DBNull.Value; }
			if (sty_StudentSignup.Remark!= null){ parms[9].Value = sty_StudentSignup.Remark; } else { parms[9].Value = DBNull.Value; }
			parms[10].Value = sty_StudentSignup.DelFlag;
            parms[11].Value = sty_StudentSignup.IsUse;
			#endregion
			SqlHelper.ExecuteNonQuery(ConnectionString.ETMSWrite, CommandType.StoredProcedure, commandName, parms);
		}
		
		/// <summary>
		/// 根据标识获取对象
		/// </summary>
		public Sty_StudentSignup GetById(Guid studentSignupID)
		{
			Sty_StudentSignup sty_StudentSignup = null;
			
			string commandName = "dbo.Pr_Sty_StudentSignup_GetByPK";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSRead, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@StudentSignupID", SqlDbType.UniqueIdentifier)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSRead, commandName, parms);
			}
			
			parms[0].Value = studentSignupID;
			
			#endregion
			using (SqlDataReader dataReader = SqlHelper.ExecuteReader(ConnectionString.ETMSRead, CommandType.StoredProcedure, commandName, parms))
			{
				if (dataReader.Read())
				{
					sty_StudentSignup = PopulateSty_StudentSignupFromDataReader(dataReader);
				}
			}
			
			return sty_StudentSignup;
		}				
		
		/// <summary>
		/// 根据参数获取对象列表（分页，可排序）
		/// </summary>
		public DataTable GetPagedList(int pageIndex, int pageSize, string sortExpression, string criteria, out int totalRecords)
		{			
			string commandName = "dbo.Pr_Sty_StudentSignup_GetPagedList";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSRead, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@PageIndex", SqlDbType.Int),
					new SqlParameter("@PageSize", SqlDbType.Int),
					new SqlParameter("@SortExpression", SqlDbType.VarChar),
					new SqlParameter("@Criteria", SqlDbType.VarChar),
					new SqlParameter("@ReturnValue", SqlDbType.Int, 4, ParameterDirection.ReturnValue, false, 0, 0, String.Empty, DataRowVersion.Default, null)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSRead, commandName, parms);
			}
			
			parms[0].Value = pageIndex;
			parms[1].Value = pageSize;
			parms[2].Value = sortExpression;
			parms[3].Value = criteria;
			#endregion
			DataTable dt=SqlHelper.ExecuteDataset(ConnectionString.ETMSRead, CommandType.StoredProcedure, commandName, parms).Tables[0];
			totalRecords = (int)parms[4].Value;
			return dt;
		}
		
		/// <summary>
		/// 从DataReader中读取数据到业务对象
		/// </summary>
		private Sty_StudentSignup PopulateSty_StudentSignupFromDataReader(SqlDataReader reader)
		{
			Sty_StudentSignup sty_StudentSignup = new Sty_StudentSignup();
			
			int studentSignupIDIndex = reader.GetOrdinal("StudentSignupID"); 
			if(!reader.IsDBNull(studentSignupIDIndex))
			{
				sty_StudentSignup.StudentSignupID= reader.GetGuid(studentSignupIDIndex);
			}
			
			int signupModeIDIndex = reader.GetOrdinal("SignupModeID"); 
			if(!reader.IsDBNull(signupModeIDIndex))
			{
				sty_StudentSignup.SignupModeID= reader.GetInt32(signupModeIDIndex);
			}
			
			int trainingItemIDIndex = reader.GetOrdinal("TrainingItemID"); 
			if(!reader.IsDBNull(trainingItemIDIndex))
			{
				sty_StudentSignup.TrainingItemID= reader.GetGuid(trainingItemIDIndex);
			}
			
			int userIDIndex = reader.GetOrdinal("UserID"); 
			if(!reader.IsDBNull(userIDIndex))
			{
				sty_StudentSignup.UserID= reader.GetInt32(userIDIndex);
			}
			
			int createTimeIndex = reader.GetOrdinal("CreateTime"); 
			if(!reader.IsDBNull(createTimeIndex))
			{
				sty_StudentSignup.CreateTime= reader.GetDateTime(createTimeIndex);
			}
			
			int createUserIDIndex = reader.GetOrdinal("CreateUserID"); 
			if(!reader.IsDBNull(createUserIDIndex))
			{
				sty_StudentSignup.CreateUserID= reader.GetInt32(createUserIDIndex);
			}
			
			int createUserIndex = reader.GetOrdinal("CreateUser"); 
			if(!reader.IsDBNull(createUserIndex))
			{
				sty_StudentSignup.CreateUser= reader.GetString(createUserIndex);
			}
			
			int modifyTimeIndex = reader.GetOrdinal("ModifyTime"); 
			if(!reader.IsDBNull(modifyTimeIndex))
			{
				sty_StudentSignup.ModifyTime= reader.GetDateTime(modifyTimeIndex);
			}
			
			int modifyUserIndex = reader.GetOrdinal("ModifyUser"); 
			if(!reader.IsDBNull(modifyUserIndex))
			{
				sty_StudentSignup.ModifyUser= reader.GetString(modifyUserIndex);
			}
			
			int remarkIndex = reader.GetOrdinal("Remark"); 
			if(!reader.IsDBNull(remarkIndex))
			{
				sty_StudentSignup.Remark= reader.GetString(remarkIndex);
			}
			
			int delFlagIndex = reader.GetOrdinal("DelFlag"); 
			if(!reader.IsDBNull(delFlagIndex))
			{
				sty_StudentSignup.DelFlag= reader.GetBoolean(delFlagIndex);
			}

            int isUseIndex = reader.GetOrdinal("IsUse");
            if (!reader.IsDBNull(isUseIndex))
            {
                sty_StudentSignup.IsUse = reader.GetInt32(isUseIndex);
            }

            return sty_StudentSignup; 
		}
	}
}
