//==================================================================================================
//Version 1.0, auto-generated.
//Generated By huangzhf.
//Date: 2012-5-23 16:11:37.
//==================================================================================================
//==================================================================================================
//This file is generated by CodeGenerator(Ver 2.1), a product of ZhouYonghua(Zhou_Yonghua@163.com).
//==================================================================================================

using System;
using System.Collections.Generic;
using System.Data;

using System.Data.SqlClient;
using ETMS.Utility.Data;

using ETMS.Components.Basic.API.Entity.TrainingItem.Course;

namespace ETMS.Components.Basic.Implement.DAL.TrainingItem.Course
{
    /// <summary>
    /// 培训项目课程表数据访问
    /// </summary>
    public partial class Tr_ItemCourseDataAccess
	{
		/// <summary>
		/// 增加
		/// </summary>
		public void Add(Tr_ItemCourse tr_ItemCourse)
		{
			string commandName = "dbo.Pr_Tr_ItemCourse_Insert";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSWrite, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@TrainingItemCourseID", SqlDbType.UniqueIdentifier),
					new SqlParameter("@TrainingItemID", SqlDbType.UniqueIdentifier),
					new SqlParameter("@CourseID", SqlDbType.UniqueIdentifier),
					new SqlParameter("@TeachModelID", SqlDbType.Int),
					new SqlParameter("@CourseStatus", SqlDbType.Int),
					new SqlParameter("@CourseBeginTime", SqlDbType.DateTime),
					new SqlParameter("@CourseEndTime", SqlDbType.DateTime),
					new SqlParameter("@TrainingModelID", SqlDbType.Int),
					new SqlParameter("@OuterOrgID", SqlDbType.UniqueIdentifier),
					new SqlParameter("@OuterOrgDutyUser", SqlDbType.NVarChar, 128),
					new SqlParameter("@OuterOrgEMAIL", SqlDbType.NVarChar, 256),
					new SqlParameter("@CourseAttrID", SqlDbType.Int),
					new SqlParameter("@Score", SqlDbType.Int),
					new SqlParameter("@CourseHours", SqlDbType.Decimal, 5, ParameterDirection.Input, true, 8, 2, String.Empty, DataRowVersion.Default, null),
					new SqlParameter("@BudgetFee", SqlDbType.Decimal, 9, ParameterDirection.Input, true, 15, 2, String.Empty, DataRowVersion.Default, null),
					new SqlParameter("@Remark", SqlDbType.NVarChar, -1),
					new SqlParameter("@IsNeedApply", SqlDbType.Bit),
					new SqlParameter("@IsPlanCourse", SqlDbType.Bit),
					new SqlParameter("@IsLimit", SqlDbType.Bit),
					new SqlParameter("@MaxNum", SqlDbType.Int),
					new SqlParameter("@IsInputGrade", SqlDbType.Bit),
					new SqlParameter("@IsIssueGrade", SqlDbType.Bit),
					new SqlParameter("@GradeIssueTime", SqlDbType.DateTime),
					new SqlParameter("@GradeIssueUser", SqlDbType.NVarChar, 128),
					new SqlParameter("@CreateTime", SqlDbType.DateTime),
					new SqlParameter("@CreateUserID", SqlDbType.Int),
					new SqlParameter("@CreateUser", SqlDbType.NVarChar, 128),
					new SqlParameter("@ModifyTime", SqlDbType.DateTime),
					new SqlParameter("@ModifyUser", SqlDbType.NVarChar, 128),
					new SqlParameter("@DelFlag", SqlDbType.Bit),
					new SqlParameter("@PassLine", SqlDbType.Decimal, 5, ParameterDirection.Input, true, 6, 2, String.Empty, DataRowVersion.Default, null),
					new SqlParameter("@TotalScore", SqlDbType.Decimal, 5, ParameterDirection.Input, true, 6, 2, String.Empty, DataRowVersion.Default, null),
					new SqlParameter("@IsIssueScore", SqlDbType.Bit),
					new SqlParameter("@ScoreIssueUser", SqlDbType.NVarChar, 128),
					new SqlParameter("@ScoreIssueTime", SqlDbType.DateTime),
					new SqlParameter("@IsComputeScore", SqlDbType.Bit),
					new SqlParameter("@ScoreComputeUser", SqlDbType.NVarChar, 128),
					new SqlParameter("@ScoreComputeTime", SqlDbType.DateTime)
					};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSWrite, commandName, parms);
			}
			
			parms[0].Value = tr_ItemCourse.TrainingItemCourseID;
			parms[1].Value = tr_ItemCourse.TrainingItemID;
			parms[2].Value = tr_ItemCourse.CourseID;
			parms[3].Value = tr_ItemCourse.TeachModelID;
			parms[4].Value = tr_ItemCourse.CourseStatus;
			parms[5].Value = tr_ItemCourse.CourseBeginTime;
			parms[6].Value = tr_ItemCourse.CourseEndTime;
			parms[7].Value = tr_ItemCourse.TrainingModelID;
			parms[8].Value = tr_ItemCourse.OuterOrgID;
			if (tr_ItemCourse.OuterOrgDutyUser!= null){ parms[9].Value = tr_ItemCourse.OuterOrgDutyUser; } else { parms[9].Value = DBNull.Value; }
			if (tr_ItemCourse.OuterOrgEMAIL!= null){ parms[10].Value = tr_ItemCourse.OuterOrgEMAIL; } else { parms[10].Value = DBNull.Value; }
			parms[11].Value = tr_ItemCourse.CourseAttrID;
			parms[12].Value = tr_ItemCourse.Score;
			parms[13].Value = tr_ItemCourse.CourseHours;
			parms[14].Value = tr_ItemCourse.BudgetFee;
			if (tr_ItemCourse.Remark!= null){ parms[15].Value = tr_ItemCourse.Remark; } else { parms[15].Value = DBNull.Value; }
			parms[16].Value = tr_ItemCourse.IsNeedApply;
			parms[17].Value = tr_ItemCourse.IsPlanCourse;
			parms[18].Value = tr_ItemCourse.IsLimit;
			parms[19].Value = tr_ItemCourse.MaxNum;
			parms[20].Value = tr_ItemCourse.IsInputGrade;
			parms[21].Value = tr_ItemCourse.IsIssueGrade;
			parms[22].Value = tr_ItemCourse.GradeIssueTime;
			if (tr_ItemCourse.GradeIssueUser!= null){ parms[23].Value = tr_ItemCourse.GradeIssueUser; } else { parms[23].Value = DBNull.Value; }
			parms[24].Value = tr_ItemCourse.CreateTime;
			parms[25].Value = tr_ItemCourse.CreateUserID;
			if (tr_ItemCourse.CreateUser!= null){ parms[26].Value = tr_ItemCourse.CreateUser; } else { parms[26].Value = DBNull.Value; }
			parms[27].Value = tr_ItemCourse.ModifyTime;
			if (tr_ItemCourse.ModifyUser!= null){ parms[28].Value = tr_ItemCourse.ModifyUser; } else { parms[28].Value = DBNull.Value; }
			parms[29].Value = tr_ItemCourse.DelFlag;
			parms[30].Value = tr_ItemCourse.PassLine;
			parms[31].Value = tr_ItemCourse.TotalScore;
			parms[32].Value = tr_ItemCourse.IsIssueScore;
			if (tr_ItemCourse.ScoreIssueUser!= null){ parms[33].Value = tr_ItemCourse.ScoreIssueUser; } else { parms[33].Value = DBNull.Value; }
			parms[34].Value = tr_ItemCourse.ScoreIssueTime;
			parms[35].Value = tr_ItemCourse.IsComputeScore;
			if (tr_ItemCourse.ScoreComputeUser!= null){ parms[36].Value = tr_ItemCourse.ScoreComputeUser; } else { parms[36].Value = DBNull.Value; }
			parms[37].Value = tr_ItemCourse.ScoreComputeTime;
			#endregion
			SqlHelper.ExecuteNonQuery(ConnectionString.ETMSWrite, CommandType.StoredProcedure, commandName, parms);
			
		}
		
		/// <summary>
		/// 删除
		/// </summary>
		public void Remove(Guid trainingItemCourseID)
		{
			string commandName = "dbo.Pr_Tr_ItemCourse_Delete";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSWrite, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@TrainingItemCourseID", SqlDbType.UniqueIdentifier)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSWrite, commandName, parms);
			}
			
			parms[0].Value = trainingItemCourseID;
			
			#endregion
			SqlHelper.ExecuteNonQuery(ConnectionString.ETMSWrite, CommandType.StoredProcedure, commandName, parms);
		}
		
		/// <summary>
		/// 保存
		/// </summary>
		public void Save(Tr_ItemCourse tr_ItemCourse)
		{
			string commandName = "dbo.Pr_Tr_ItemCourse_Update";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSWrite, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@TrainingItemCourseID", SqlDbType.UniqueIdentifier),
					new SqlParameter("@TrainingItemID", SqlDbType.UniqueIdentifier),
					new SqlParameter("@CourseID", SqlDbType.UniqueIdentifier),
					new SqlParameter("@TeachModelID", SqlDbType.Int),
					new SqlParameter("@CourseStatus", SqlDbType.Int),
					new SqlParameter("@CourseBeginTime", SqlDbType.DateTime),
					new SqlParameter("@CourseEndTime", SqlDbType.DateTime),
					new SqlParameter("@TrainingModelID", SqlDbType.Int),
					new SqlParameter("@OuterOrgID", SqlDbType.UniqueIdentifier),
					new SqlParameter("@OuterOrgDutyUser", SqlDbType.NVarChar, 128),
					new SqlParameter("@OuterOrgEMAIL", SqlDbType.NVarChar, 256),
					new SqlParameter("@CourseAttrID", SqlDbType.Int),
					new SqlParameter("@Score", SqlDbType.Int),
					new SqlParameter("@CourseHours", SqlDbType.Decimal, 5, ParameterDirection.Input, true, 8, 2, String.Empty, DataRowVersion.Default, null),
					new SqlParameter("@BudgetFee", SqlDbType.Decimal, 9, ParameterDirection.Input, true, 15, 2, String.Empty, DataRowVersion.Default, null),
					new SqlParameter("@Remark", SqlDbType.NVarChar, -1),
					new SqlParameter("@IsNeedApply", SqlDbType.Bit),
					new SqlParameter("@IsPlanCourse", SqlDbType.Bit),
					new SqlParameter("@IsLimit", SqlDbType.Bit),
					new SqlParameter("@MaxNum", SqlDbType.Int),
					new SqlParameter("@IsInputGrade", SqlDbType.Bit),
					new SqlParameter("@IsIssueGrade", SqlDbType.Bit),
					new SqlParameter("@GradeIssueTime", SqlDbType.DateTime),
					new SqlParameter("@GradeIssueUser", SqlDbType.NVarChar, 128),
					new SqlParameter("@CreateTime", SqlDbType.DateTime),
					new SqlParameter("@CreateUserID", SqlDbType.Int),
					new SqlParameter("@CreateUser", SqlDbType.NVarChar, 128),
					new SqlParameter("@ModifyTime", SqlDbType.DateTime),
					new SqlParameter("@ModifyUser", SqlDbType.NVarChar, 128),
					new SqlParameter("@DelFlag", SqlDbType.Bit),
					new SqlParameter("@PassLine", SqlDbType.Decimal, 5, ParameterDirection.Input, true, 6, 2, String.Empty, DataRowVersion.Default, null),
					new SqlParameter("@TotalScore", SqlDbType.Decimal, 5, ParameterDirection.Input, true, 6, 2, String.Empty, DataRowVersion.Default, null),
					new SqlParameter("@IsIssueScore", SqlDbType.Bit),
					new SqlParameter("@ScoreIssueUser", SqlDbType.NVarChar, 128),
					new SqlParameter("@ScoreIssueTime", SqlDbType.DateTime),
					new SqlParameter("@IsComputeScore", SqlDbType.Bit),
					new SqlParameter("@ScoreComputeUser", SqlDbType.NVarChar, 128),
					new SqlParameter("@ScoreComputeTime", SqlDbType.DateTime),
                    new SqlParameter("@OrderNum",SqlDbType.Int)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSWrite, commandName, parms);
			}
			
			parms[0].Value = tr_ItemCourse.TrainingItemCourseID;
			parms[1].Value = tr_ItemCourse.TrainingItemID;
			parms[2].Value = tr_ItemCourse.CourseID;
			parms[3].Value = tr_ItemCourse.TeachModelID;
			parms[4].Value = tr_ItemCourse.CourseStatus;
			parms[5].Value = tr_ItemCourse.CourseBeginTime;
			parms[6].Value = tr_ItemCourse.CourseEndTime;
			parms[7].Value = tr_ItemCourse.TrainingModelID;
			parms[8].Value = tr_ItemCourse.OuterOrgID;
			if (tr_ItemCourse.OuterOrgDutyUser!= null){ parms[9].Value = tr_ItemCourse.OuterOrgDutyUser; } else { parms[9].Value = DBNull.Value; }
			if (tr_ItemCourse.OuterOrgEMAIL!= null){ parms[10].Value = tr_ItemCourse.OuterOrgEMAIL; } else { parms[10].Value = DBNull.Value; }
			parms[11].Value = tr_ItemCourse.CourseAttrID;
			parms[12].Value = tr_ItemCourse.Score;
			parms[13].Value = tr_ItemCourse.CourseHours;
			parms[14].Value = tr_ItemCourse.BudgetFee;
			if (tr_ItemCourse.Remark!= null){ parms[15].Value = tr_ItemCourse.Remark; } else { parms[15].Value = DBNull.Value; }
			parms[16].Value = tr_ItemCourse.IsNeedApply;
			parms[17].Value = tr_ItemCourse.IsPlanCourse;
			parms[18].Value = tr_ItemCourse.IsLimit;
			parms[19].Value = tr_ItemCourse.MaxNum;
			parms[20].Value = tr_ItemCourse.IsInputGrade;
			parms[21].Value = tr_ItemCourse.IsIssueGrade;
			parms[22].Value = tr_ItemCourse.GradeIssueTime;
			if (tr_ItemCourse.GradeIssueUser!= null){ parms[23].Value = tr_ItemCourse.GradeIssueUser; } else { parms[23].Value = DBNull.Value; }
			parms[24].Value = tr_ItemCourse.CreateTime;
			parms[25].Value = tr_ItemCourse.CreateUserID;
			if (tr_ItemCourse.CreateUser!= null){ parms[26].Value = tr_ItemCourse.CreateUser; } else { parms[26].Value = DBNull.Value; }
			parms[27].Value = tr_ItemCourse.ModifyTime;
			if (tr_ItemCourse.ModifyUser!= null){ parms[28].Value = tr_ItemCourse.ModifyUser; } else { parms[28].Value = DBNull.Value; }
			parms[29].Value = tr_ItemCourse.DelFlag;
			parms[30].Value = tr_ItemCourse.PassLine;
			parms[31].Value = tr_ItemCourse.TotalScore;
			parms[32].Value = tr_ItemCourse.IsIssueScore;
			if (tr_ItemCourse.ScoreIssueUser!= null){ parms[33].Value = tr_ItemCourse.ScoreIssueUser; } else { parms[33].Value = DBNull.Value; }
			parms[34].Value = tr_ItemCourse.ScoreIssueTime;
			parms[35].Value = tr_ItemCourse.IsComputeScore;
			if (tr_ItemCourse.ScoreComputeUser!= null){ parms[36].Value = tr_ItemCourse.ScoreComputeUser; } else { parms[36].Value = DBNull.Value; }
			parms[37].Value = tr_ItemCourse.ScoreComputeTime;
            parms[38].Value = tr_ItemCourse.OrderNum;
			#endregion
			SqlHelper.ExecuteNonQuery(ConnectionString.ETMSWrite, CommandType.StoredProcedure, commandName, parms);
		}
		
		/// <summary>
		/// 根据标识获取对象
		/// </summary>
		public Tr_ItemCourse GetById(Guid trainingItemCourseID)
		{
			Tr_ItemCourse tr_ItemCourse = null;
			
			string commandName = "dbo.Pr_Tr_ItemCourse_GetByPK";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSRead, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@TrainingItemCourseID", SqlDbType.UniqueIdentifier)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSRead, commandName, parms);
			}
			
			parms[0].Value = trainingItemCourseID;
			
			#endregion
			using (SqlDataReader dataReader = SqlHelper.ExecuteReader(ConnectionString.ETMSRead, CommandType.StoredProcedure, commandName, parms))
			{
				if (dataReader.Read())
				{
					tr_ItemCourse = PopulateTr_ItemCourseFromDataReader(dataReader);
				}
			}
			
			return tr_ItemCourse;
		}				
		
	
	    /// <summary>
		/// 根据参数获取对象列表（分页，可排序）
		/// </summary>
		public IList<Tr_ItemCourse> GetEntityList(int pageIndex, int pageSize, string sortExpression, string criteria, out int totalRecords)
		{			
            IList<Tr_ItemCourse> list=new List<Tr_ItemCourse>();
			string commandName = "dbo.Pr_Tr_ItemCourse_GetPagedList";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSRead, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@PageIndex", SqlDbType.Int),
					new SqlParameter("@PageSize", SqlDbType.Int),
					new SqlParameter("@SortExpression", SqlDbType.VarChar),
					new SqlParameter("@Criteria", SqlDbType.VarChar),
					new SqlParameter("@ReturnValue", SqlDbType.Int, 4, ParameterDirection.ReturnValue, false, 0, 0, String.Empty, DataRowVersion.Default, null)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSRead, commandName, parms);
			}
			
			parms[0].Value = pageIndex;
			parms[1].Value = pageSize;
			parms[2].Value = sortExpression;
			parms[3].Value = criteria;
			#endregion
            using (SqlDataReader dataReader = SqlHelper.ExecuteReader(ConnectionString.ETMSRead, CommandType.StoredProcedure, commandName, parms))
			{
				while (dataReader.Read())
				{
					list.Add(PopulateTr_ItemCourseFromDataReader(dataReader));
				}
			}			
			totalRecords = (int)parms[4].Value;
			return list;
		}
		
		/// <summary>
		/// 从DataReader中读取数据到业务对象
		/// </summary>
		private Tr_ItemCourse PopulateTr_ItemCourseFromDataReader(SqlDataReader reader)
		{
			Tr_ItemCourse tr_ItemCourse = new Tr_ItemCourse();
			
			int trainingItemCourseIDIndex = reader.GetOrdinal("TrainingItemCourseID"); 
			if(!reader.IsDBNull(trainingItemCourseIDIndex))
			{
				tr_ItemCourse.TrainingItemCourseID= reader.GetGuid(trainingItemCourseIDIndex);
			}
			
			int trainingItemIDIndex = reader.GetOrdinal("TrainingItemID"); 
			if(!reader.IsDBNull(trainingItemIDIndex))
			{
				tr_ItemCourse.TrainingItemID= reader.GetGuid(trainingItemIDIndex);
			}
			
			int courseIDIndex = reader.GetOrdinal("CourseID"); 
			if(!reader.IsDBNull(courseIDIndex))
			{
				tr_ItemCourse.CourseID= reader.GetGuid(courseIDIndex);
			}
			
			int teachModelIDIndex = reader.GetOrdinal("TeachModelID"); 
			if(!reader.IsDBNull(teachModelIDIndex))
			{
				tr_ItemCourse.TeachModelID= reader.GetInt32(teachModelIDIndex);
			}
			
			int courseStatusIndex = reader.GetOrdinal("CourseStatus"); 
			if(!reader.IsDBNull(courseStatusIndex))
			{
				tr_ItemCourse.CourseStatus= reader.GetInt32(courseStatusIndex);
			}
			
			int courseBeginTimeIndex = reader.GetOrdinal("CourseBeginTime"); 
			if(!reader.IsDBNull(courseBeginTimeIndex))
			{
				tr_ItemCourse.CourseBeginTime= reader.GetDateTime(courseBeginTimeIndex);
			}
			
			int courseEndTimeIndex = reader.GetOrdinal("CourseEndTime"); 
			if(!reader.IsDBNull(courseEndTimeIndex))
			{
				tr_ItemCourse.CourseEndTime= reader.GetDateTime(courseEndTimeIndex);
			}
			
			int trainingModelIDIndex = reader.GetOrdinal("TrainingModelID"); 
			if(!reader.IsDBNull(trainingModelIDIndex))
			{
				tr_ItemCourse.TrainingModelID= reader.GetInt32(trainingModelIDIndex);
			}
			
			int outerOrgIDIndex = reader.GetOrdinal("OuterOrgID"); 
			if(!reader.IsDBNull(outerOrgIDIndex))
			{
				tr_ItemCourse.OuterOrgID= reader.GetGuid(outerOrgIDIndex);
			}
			
			int outerOrgDutyUserIndex = reader.GetOrdinal("OuterOrgDutyUser"); 
			if(!reader.IsDBNull(outerOrgDutyUserIndex))
			{
				tr_ItemCourse.OuterOrgDutyUser= reader.GetString(outerOrgDutyUserIndex);
			}
			
			int outerOrgEMAILIndex = reader.GetOrdinal("OuterOrgEMAIL"); 
			if(!reader.IsDBNull(outerOrgEMAILIndex))
			{
				tr_ItemCourse.OuterOrgEMAIL= reader.GetString(outerOrgEMAILIndex);
			}
			
			int courseAttrIDIndex = reader.GetOrdinal("CourseAttrID"); 
			if(!reader.IsDBNull(courseAttrIDIndex))
			{
				tr_ItemCourse.CourseAttrID= reader.GetInt32(courseAttrIDIndex);
			}
			
			int scoreIndex = reader.GetOrdinal("Score"); 
			if(!reader.IsDBNull(scoreIndex))
			{
				tr_ItemCourse.Score= reader.GetInt32(scoreIndex);
			}
			
			int courseHoursIndex = reader.GetOrdinal("CourseHours"); 
			if(!reader.IsDBNull(courseHoursIndex))
			{
				tr_ItemCourse.CourseHours= reader.GetDecimal(courseHoursIndex);
			}
			
			int budgetFeeIndex = reader.GetOrdinal("BudgetFee"); 
			if(!reader.IsDBNull(budgetFeeIndex))
			{
				tr_ItemCourse.BudgetFee= reader.GetDecimal(budgetFeeIndex);
			}
			
			int remarkIndex = reader.GetOrdinal("Remark"); 
			if(!reader.IsDBNull(remarkIndex))
			{
				tr_ItemCourse.Remark= reader.GetString(remarkIndex);
			}
			
			int isNeedApplyIndex = reader.GetOrdinal("IsNeedApply"); 
			if(!reader.IsDBNull(isNeedApplyIndex))
			{
				tr_ItemCourse.IsNeedApply= reader.GetBoolean(isNeedApplyIndex);
			}
			
			int isPlanCourseIndex = reader.GetOrdinal("IsPlanCourse"); 
			if(!reader.IsDBNull(isPlanCourseIndex))
			{
				tr_ItemCourse.IsPlanCourse= reader.GetBoolean(isPlanCourseIndex);
			}
			
			int isLimitIndex = reader.GetOrdinal("IsLimit"); 
			if(!reader.IsDBNull(isLimitIndex))
			{
				tr_ItemCourse.IsLimit= reader.GetBoolean(isLimitIndex);
			}
			
			int maxNumIndex = reader.GetOrdinal("MaxNum"); 
			if(!reader.IsDBNull(maxNumIndex))
			{
				tr_ItemCourse.MaxNum= reader.GetInt32(maxNumIndex);
			}
			
			int isInputGradeIndex = reader.GetOrdinal("IsInputGrade"); 
			if(!reader.IsDBNull(isInputGradeIndex))
			{
				tr_ItemCourse.IsInputGrade= reader.GetBoolean(isInputGradeIndex);
			}
			
			int isIssueGradeIndex = reader.GetOrdinal("IsIssueGrade"); 
			if(!reader.IsDBNull(isIssueGradeIndex))
			{
				tr_ItemCourse.IsIssueGrade= reader.GetBoolean(isIssueGradeIndex);
			}
			
			int gradeIssueTimeIndex = reader.GetOrdinal("GradeIssueTime"); 
			if(!reader.IsDBNull(gradeIssueTimeIndex))
			{
				tr_ItemCourse.GradeIssueTime= reader.GetDateTime(gradeIssueTimeIndex);
			}
			
			int gradeIssueUserIndex = reader.GetOrdinal("GradeIssueUser"); 
			if(!reader.IsDBNull(gradeIssueUserIndex))
			{
				tr_ItemCourse.GradeIssueUser= reader.GetString(gradeIssueUserIndex);
			}
			
			int createTimeIndex = reader.GetOrdinal("CreateTime"); 
			if(!reader.IsDBNull(createTimeIndex))
			{
				tr_ItemCourse.CreateTime= reader.GetDateTime(createTimeIndex);
			}
			
			int createUserIDIndex = reader.GetOrdinal("CreateUserID"); 
			if(!reader.IsDBNull(createUserIDIndex))
			{
				tr_ItemCourse.CreateUserID= reader.GetInt32(createUserIDIndex);
			}
			
			int createUserIndex = reader.GetOrdinal("CreateUser"); 
			if(!reader.IsDBNull(createUserIndex))
			{
				tr_ItemCourse.CreateUser= reader.GetString(createUserIndex);
			}
			
			int modifyTimeIndex = reader.GetOrdinal("ModifyTime"); 
			if(!reader.IsDBNull(modifyTimeIndex))
			{
				tr_ItemCourse.ModifyTime= reader.GetDateTime(modifyTimeIndex);
			}
			
			int modifyUserIndex = reader.GetOrdinal("ModifyUser"); 
			if(!reader.IsDBNull(modifyUserIndex))
			{
				tr_ItemCourse.ModifyUser= reader.GetString(modifyUserIndex);
			}
			
			int delFlagIndex = reader.GetOrdinal("DelFlag"); 
			if(!reader.IsDBNull(delFlagIndex))
			{
				tr_ItemCourse.DelFlag= reader.GetBoolean(delFlagIndex);
			}
			
			int passLineIndex = reader.GetOrdinal("PassLine"); 
			if(!reader.IsDBNull(passLineIndex))
			{
				tr_ItemCourse.PassLine= reader.GetDecimal(passLineIndex);
			}
			
			int totalScoreIndex = reader.GetOrdinal("TotalScore"); 
			if(!reader.IsDBNull(totalScoreIndex))
			{
				tr_ItemCourse.TotalScore= reader.GetDecimal(totalScoreIndex);
			}
			
			int isIssueScoreIndex = reader.GetOrdinal("IsIssueScore"); 
			if(!reader.IsDBNull(isIssueScoreIndex))
			{
				tr_ItemCourse.IsIssueScore= reader.GetBoolean(isIssueScoreIndex);
			}
			
			int scoreIssueUserIndex = reader.GetOrdinal("ScoreIssueUser"); 
			if(!reader.IsDBNull(scoreIssueUserIndex))
			{
				tr_ItemCourse.ScoreIssueUser= reader.GetString(scoreIssueUserIndex);
			}
			
			int scoreIssueTimeIndex = reader.GetOrdinal("ScoreIssueTime"); 
			if(!reader.IsDBNull(scoreIssueTimeIndex))
			{
				tr_ItemCourse.ScoreIssueTime= reader.GetDateTime(scoreIssueTimeIndex);
			}
			
			int isComputeScoreIndex = reader.GetOrdinal("IsComputeScore"); 
			if(!reader.IsDBNull(isComputeScoreIndex))
			{
				tr_ItemCourse.IsComputeScore= reader.GetBoolean(isComputeScoreIndex);
			}
			
			int scoreComputeUserIndex = reader.GetOrdinal("ScoreComputeUser"); 
			if(!reader.IsDBNull(scoreComputeUserIndex))
			{
				tr_ItemCourse.ScoreComputeUser= reader.GetString(scoreComputeUserIndex);
			}
			
			int scoreComputeTimeIndex = reader.GetOrdinal("ScoreComputeTime"); 
			if(!reader.IsDBNull(scoreComputeTimeIndex))
			{
				tr_ItemCourse.ScoreComputeTime= reader.GetDateTime(scoreComputeTimeIndex);
			}

            int orderNumIndex = reader.GetOrdinal("OrderNum");
            if (!reader.IsDBNull(orderNumIndex))
            {
                tr_ItemCourse.OrderNum = reader.GetInt32(orderNumIndex);
            }
			return tr_ItemCourse; 
		}
	}
}
