//==================================================================================================
//Version 1.0, auto-generated.
//Generated By huangzhongfu.
//Date: 2012-3-31 8:58:53.
//==================================================================================================
//==================================================================================================
//This file is generated by CodeGenerator(Ver 2.1), a product of ZhouYonghua(Zhou_Yonghua@163.com).
//==================================================================================================

using System;
using System.Data;

using System.Data.SqlClient;
using ETMS.Utility.Data;

using ETMS.Components.Basic.API.Entity.TrainingItem.Course.Resources;

namespace ETMS.Components.Basic.Implement.DAL.TrainingItem.Course.Resources
{
    /// <summary>
    /// 培训项目课程资源表数据访问
    /// </summary>
    public partial class Tr_ItemCourseResDataAccess
	{
		/// <summary>
		/// 增加
		/// </summary>
		public void Add(Tr_ItemCourseRes tr_ItemCourseRes)
		{
			string commandName = "dbo.Pr_Tr_ItemCourseRes_Insert";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSWrite, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@ItemCourseResID", SqlDbType.UniqueIdentifier),
					new SqlParameter("@TrainingItemCourseID", SqlDbType.UniqueIdentifier),
					new SqlParameter("@CourseResTypeID", SqlDbType.Int),
					new SqlParameter("@CourseResID", SqlDbType.NVarChar, 100),
					new SqlParameter("@ResName", SqlDbType.NVarChar, 200),
					new SqlParameter("@IsUse", SqlDbType.Int),
					new SqlParameter("@ResBeginTime", SqlDbType.DateTime),
					new SqlParameter("@ResEndTime", SqlDbType.DateTime),
					new SqlParameter("@CreateTime", SqlDbType.DateTime),
					new SqlParameter("@CreateUser", SqlDbType.NVarChar, 128),
					new SqlParameter("@CreateUserID", SqlDbType.Int)
					};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSWrite, commandName, parms);
			}
			
			parms[0].Value = tr_ItemCourseRes.ItemCourseResID;
			parms[1].Value = tr_ItemCourseRes.TrainingItemCourseID;
			parms[2].Value = tr_ItemCourseRes.CourseResTypeID;
			if (tr_ItemCourseRes.CourseResID!= null){ parms[3].Value = tr_ItemCourseRes.CourseResID; } else { parms[3].Value = DBNull.Value; }
			if (tr_ItemCourseRes.ResName!= null){ parms[4].Value = tr_ItemCourseRes.ResName; } else { parms[4].Value = DBNull.Value; }
			parms[5].Value = tr_ItemCourseRes.IsUse;
			parms[6].Value = tr_ItemCourseRes.ResBeginTime;
			parms[7].Value = tr_ItemCourseRes.ResEndTime;
			parms[8].Value = tr_ItemCourseRes.CreateTime;
			if (tr_ItemCourseRes.CreateUser!= null){ parms[9].Value = tr_ItemCourseRes.CreateUser; } else { parms[9].Value = DBNull.Value; }
			parms[10].Value = tr_ItemCourseRes.CreateUserID;
			#endregion
			SqlHelper.ExecuteNonQuery(ConnectionString.ETMSWrite, CommandType.StoredProcedure, commandName, parms);
			
		}
		
		/// <summary>
		/// 删除
		/// </summary>
		public void Remove(Guid itemCourseResID)
		{
			string commandName = "dbo.Pr_Tr_ItemCourseRes_Delete";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSWrite, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@ItemCourseResID", SqlDbType.UniqueIdentifier)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSWrite, commandName, parms);
			}
			
			parms[0].Value = itemCourseResID;
			
			#endregion
			SqlHelper.ExecuteNonQuery(ConnectionString.ETMSWrite, CommandType.StoredProcedure, commandName, parms);
		}
		
		/// <summary>
		/// 保存
		/// </summary>
		public void Save(Tr_ItemCourseRes tr_ItemCourseRes)
		{
			string commandName = "dbo.Pr_Tr_ItemCourseRes_Update";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSWrite, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@ItemCourseResID", SqlDbType.UniqueIdentifier),
					new SqlParameter("@TrainingItemCourseID", SqlDbType.UniqueIdentifier),
					new SqlParameter("@CourseResTypeID", SqlDbType.Int),
					new SqlParameter("@CourseResID", SqlDbType.NVarChar, 100),
					new SqlParameter("@ResName", SqlDbType.NVarChar, 200),
					new SqlParameter("@IsUse", SqlDbType.Int),
					new SqlParameter("@ResBeginTime", SqlDbType.DateTime),
					new SqlParameter("@ResEndTime", SqlDbType.DateTime),
					new SqlParameter("@CreateTime", SqlDbType.DateTime),
					new SqlParameter("@CreateUser", SqlDbType.NVarChar, 128),
					new SqlParameter("@CreateUserID", SqlDbType.Int)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSWrite, commandName, parms);
			}
			
			parms[0].Value = tr_ItemCourseRes.ItemCourseResID;
			parms[1].Value = tr_ItemCourseRes.TrainingItemCourseID;
			parms[2].Value = tr_ItemCourseRes.CourseResTypeID;
			if (tr_ItemCourseRes.CourseResID!= null){ parms[3].Value = tr_ItemCourseRes.CourseResID; } else { parms[3].Value = DBNull.Value; }
			if (tr_ItemCourseRes.ResName!= null){ parms[4].Value = tr_ItemCourseRes.ResName; } else { parms[4].Value = DBNull.Value; }
			parms[5].Value = tr_ItemCourseRes.IsUse;
			parms[6].Value = tr_ItemCourseRes.ResBeginTime;
			parms[7].Value = tr_ItemCourseRes.ResEndTime;
			parms[8].Value = tr_ItemCourseRes.CreateTime;
			if (tr_ItemCourseRes.CreateUser!= null){ parms[9].Value = tr_ItemCourseRes.CreateUser; } else { parms[9].Value = DBNull.Value; }
			parms[10].Value = tr_ItemCourseRes.CreateUserID;
			#endregion
			SqlHelper.ExecuteNonQuery(ConnectionString.ETMSWrite, CommandType.StoredProcedure, commandName, parms);
		}
		
		/// <summary>
		/// 根据标识获取对象
		/// </summary>
		public Tr_ItemCourseRes GetById(Guid itemCourseResID)
		{
			Tr_ItemCourseRes tr_ItemCourseRes = null;
			
			string commandName = "dbo.Pr_Tr_ItemCourseRes_GetByPK";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSRead, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@ItemCourseResID", SqlDbType.UniqueIdentifier)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSRead, commandName, parms);
			}
			
			parms[0].Value = itemCourseResID;
			
			#endregion
			using (SqlDataReader dataReader = SqlHelper.ExecuteReader(ConnectionString.ETMSRead, CommandType.StoredProcedure, commandName, parms))
			{
				if (dataReader.Read())
				{
					tr_ItemCourseRes = PopulateTr_ItemCourseResFromDataReader(dataReader);
				}
			}
			
			return tr_ItemCourseRes;
		}				
		
		/// <summary>
		/// 根据参数获取对象列表（分页，可排序）
		/// </summary>
		public DataTable GetPagedList(int pageIndex, int pageSize, string sortExpression, string criteria, out int totalRecords)
		{			
			string commandName = "dbo.Pr_Tr_ItemCourseRes_GetPagedList";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSRead, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@PageIndex", SqlDbType.Int),
					new SqlParameter("@PageSize", SqlDbType.Int),
					new SqlParameter("@SortExpression", SqlDbType.VarChar),
					new SqlParameter("@Criteria", SqlDbType.VarChar),
					new SqlParameter("@ReturnValue", SqlDbType.Int, 4, ParameterDirection.ReturnValue, false, 0, 0, String.Empty, DataRowVersion.Default, null)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSRead, commandName, parms);
			}
			
			parms[0].Value = pageIndex;
			parms[1].Value = pageSize;
			parms[2].Value = sortExpression;
			parms[3].Value = criteria;
			#endregion
			DataTable dt=SqlHelper.ExecuteDataset(ConnectionString.ETMSRead, CommandType.StoredProcedure, commandName, parms).Tables[0];
			totalRecords = (int)parms[4].Value;
			return dt;
		}
		
		/// <summary>
		/// 从DataReader中读取数据到业务对象
		/// </summary>
		private Tr_ItemCourseRes PopulateTr_ItemCourseResFromDataReader(SqlDataReader reader)
		{
			Tr_ItemCourseRes tr_ItemCourseRes = new Tr_ItemCourseRes();
			
			int itemCourseResIDIndex = reader.GetOrdinal("ItemCourseResID"); 
			if(!reader.IsDBNull(itemCourseResIDIndex))
			{
				tr_ItemCourseRes.ItemCourseResID= reader.GetGuid(itemCourseResIDIndex);
			}
			
			int trainingItemCourseIDIndex = reader.GetOrdinal("TrainingItemCourseID"); 
			if(!reader.IsDBNull(trainingItemCourseIDIndex))
			{
				tr_ItemCourseRes.TrainingItemCourseID= reader.GetGuid(trainingItemCourseIDIndex);
			}
			
			int courseResTypeIDIndex = reader.GetOrdinal("CourseResTypeID"); 
			if(!reader.IsDBNull(courseResTypeIDIndex))
			{
				tr_ItemCourseRes.CourseResTypeID= reader.GetInt32(courseResTypeIDIndex);
			}
			
			int courseResIDIndex = reader.GetOrdinal("CourseResID"); 
			if(!reader.IsDBNull(courseResIDIndex))
			{
				tr_ItemCourseRes.CourseResID= reader.GetString(courseResIDIndex);
			}
			
			int resNameIndex = reader.GetOrdinal("ResName"); 
			if(!reader.IsDBNull(resNameIndex))
			{
				tr_ItemCourseRes.ResName= reader.GetString(resNameIndex);
			}
			
			int isUseIndex = reader.GetOrdinal("IsUse"); 
			if(!reader.IsDBNull(isUseIndex))
			{
				tr_ItemCourseRes.IsUse= reader.GetInt32(isUseIndex);
			}
			
			int resBeginTimeIndex = reader.GetOrdinal("ResBeginTime"); 
			if(!reader.IsDBNull(resBeginTimeIndex))
			{
				tr_ItemCourseRes.ResBeginTime= reader.GetDateTime(resBeginTimeIndex);
			}
			
			int resEndTimeIndex = reader.GetOrdinal("ResEndTime"); 
			if(!reader.IsDBNull(resEndTimeIndex))
			{
				tr_ItemCourseRes.ResEndTime= reader.GetDateTime(resEndTimeIndex);
			}
			
			int createTimeIndex = reader.GetOrdinal("CreateTime"); 
			if(!reader.IsDBNull(createTimeIndex))
			{
				tr_ItemCourseRes.CreateTime= reader.GetDateTime(createTimeIndex);
			}
			
			int createUserIndex = reader.GetOrdinal("CreateUser"); 
			if(!reader.IsDBNull(createUserIndex))
			{
				tr_ItemCourseRes.CreateUser= reader.GetString(createUserIndex);
			}
			
			int createUserIDIndex = reader.GetOrdinal("CreateUserID"); 
			if(!reader.IsDBNull(createUserIDIndex))
			{
				tr_ItemCourseRes.CreateUserID= reader.GetInt32(createUserIDIndex);
			}
			
			return tr_ItemCourseRes; 
		}
	}
}
