//==================================================================================================
//Version 1.0, auto-generated.
//Generated By xueyb.
//Date: 2012-4-11 9:06:02.
//==================================================================================================
//==================================================================================================
//This file is generated by CodeGenerator(Ver 2.1), a product of ZhouYonghua(Zhou_Yonghua@163.com).
//==================================================================================================

using System;
using System.Collections.Generic;
using System.Data;

using System.Data.SqlClient;
using ETMS.Utility.Data;

using ETMS.Components.Basic.API.Entity.Notify;

namespace ETMS.Components.Basic.Implement.DAL.Notify
{
    /// <summary>
    /// 消息提醒清单数据访问
    /// </summary>
    public partial class Notify_MessageDataAccess
    {
        /// <summary>
        /// 增加
        /// </summary>
        public void Add(Notify_Message notify_Message)
        {
            string commandName = "dbo.Pr_Notify_Message_Insert";
            #region Parameters
            SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSWrite, commandName);
            if (parms == null)
            {
                parms = new SqlParameter[] {	new SqlParameter("@MessageID", SqlDbType.Int, 4, ParameterDirection.Output, false, 0, 0, String.Empty, DataRowVersion.Default, null),
				
					new SqlParameter("@MessageClassID", SqlDbType.SmallInt),
					new SqlParameter("@MessageTypeID", SqlDbType.SmallInt),
					new SqlParameter("@OrganizationID", SqlDbType.Int),
					new SqlParameter("@Subject", SqlDbType.NVarChar, 400),
					new SqlParameter("@Body", SqlDbType.NVarChar, -1),
					new SqlParameter("@Receiver", SqlDbType.VarChar, -1),
					new SqlParameter("@Status", SqlDbType.SmallInt),
					new SqlParameter("@Remark", SqlDbType.VarChar, -1),
					new SqlParameter("@CreatorID", SqlDbType.Int),
					new SqlParameter("@CreateTime", SqlDbType.DateTime),
					new SqlParameter("@ReceiveTime", SqlDbType.DateTime),
                    new SqlParameter("@MessageEndTime", SqlDbType.DateTime)
					};
                SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSWrite, commandName, parms);
            }

            parms[1].Value = notify_Message.MessageClassID;
            parms[2].Value = notify_Message.MessageTypeID;
            parms[3].Value = notify_Message.OrganizationID;
            if (notify_Message.Subject != null) { parms[4].Value = notify_Message.Subject; } else { parms[4].Value = DBNull.Value; }
            if (notify_Message.Body != null) { parms[5].Value = notify_Message.Body; } else { parms[5].Value = DBNull.Value; }
            if (notify_Message.Receiver != null) { parms[6].Value = notify_Message.Receiver; } else { parms[6].Value = DBNull.Value; }
            parms[7].Value = notify_Message.Status;
            if (notify_Message.Remark != null) { parms[8].Value = notify_Message.Remark; } else { parms[8].Value = DBNull.Value; }
            parms[9].Value = notify_Message.CreatorID;
            parms[10].Value = notify_Message.CreateTime;
            parms[11].Value = notify_Message.ReceiveTime;
            if (notify_Message.MessageEndTime != default(DateTime)) { parms[12].Value = notify_Message.MessageEndTime; } else { parms[12].Value = DBNull.Value; }
            #endregion
            SqlHelper.ExecuteNonQuery(ConnectionString.ETMSWrite, CommandType.StoredProcedure, commandName, parms);

            notify_Message.MessageID = (Int32)parms[0].Value;

        }

        /// <summary>
        /// 删除
        /// </summary>
        public void Remove(Int32 messageID)
        {
            string commandName = "dbo.Pr_Notify_Message_Delete";
            #region Parameters
            SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSWrite, commandName);
            if (parms == null)
            {
                parms = new SqlParameter[] {
					new SqlParameter("@MessageID", SqlDbType.Int)
				};
                SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSWrite, commandName, parms);
            }

            parms[0].Value = messageID;

            #endregion
            SqlHelper.ExecuteNonQuery(ConnectionString.ETMSWrite, CommandType.StoredProcedure, commandName, parms);
        }

        /// <summary>
        /// 保存
        /// </summary>
        public void Save(Notify_Message notify_Message)
        {
            string commandName = "dbo.Pr_Notify_Message_Update";
            #region Parameters
            SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSWrite, commandName);
            if (parms == null)
            {
                parms = new SqlParameter[] {
					new SqlParameter("@MessageID", SqlDbType.Int),
					new SqlParameter("@MessageClassID", SqlDbType.SmallInt),
					new SqlParameter("@MessageTypeID", SqlDbType.SmallInt),
					new SqlParameter("@OrganizationID", SqlDbType.Int),
					new SqlParameter("@Subject", SqlDbType.NVarChar, 400),
					new SqlParameter("@Body", SqlDbType.NVarChar, -1),
					new SqlParameter("@Receiver", SqlDbType.VarChar, -1),
					new SqlParameter("@Status", SqlDbType.SmallInt),
					new SqlParameter("@Remark", SqlDbType.VarChar, -1),
					new SqlParameter("@CreatorID", SqlDbType.Int),
					new SqlParameter("@CreateTime", SqlDbType.DateTime),
					new SqlParameter("@ReceiveTime", SqlDbType.DateTime)
				};
                SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSWrite, commandName, parms);
            }

            parms[0].Value = notify_Message.MessageID;
            parms[1].Value = notify_Message.MessageClassID;
            parms[2].Value = notify_Message.MessageTypeID;
            parms[3].Value = notify_Message.OrganizationID;
            if (notify_Message.Subject != null) { parms[4].Value = notify_Message.Subject; } else { parms[4].Value = DBNull.Value; }
            if (notify_Message.Body != null) { parms[5].Value = notify_Message.Body; } else { parms[5].Value = DBNull.Value; }
            if (notify_Message.Receiver != null) { parms[6].Value = notify_Message.Receiver; } else { parms[6].Value = DBNull.Value; }
            parms[7].Value = notify_Message.Status;
            if (notify_Message.Remark != null) { parms[8].Value = notify_Message.Remark; } else { parms[8].Value = DBNull.Value; }
            parms[9].Value = notify_Message.CreatorID;
            parms[10].Value = notify_Message.CreateTime;
            parms[11].Value = notify_Message.ReceiveTime;
            #endregion
            SqlHelper.ExecuteNonQuery(ConnectionString.ETMSWrite, CommandType.StoredProcedure, commandName, parms);
        }

        /// <summary>
        /// 根据标识获取对象
        /// </summary>
        public Notify_Message GetById(Int32 messageID)
        {
            Notify_Message notify_Message = null;

            string commandName = "dbo.Pr_Notify_Message_GetByPK";
            #region Parameters
            SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSRead, commandName);
            if (parms == null)
            {
                parms = new SqlParameter[] {
					new SqlParameter("@MessageID", SqlDbType.Int)
				};
                SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSRead, commandName, parms);
            }

            parms[0].Value = messageID;

            #endregion
            using (SqlDataReader dataReader = SqlHelper.ExecuteReader(ConnectionString.ETMSRead, CommandType.StoredProcedure, commandName, parms))
            {
                if (dataReader.Read())
                {
                    notify_Message = PopulateNotify_MessageFromDataReader(dataReader);
                }
            }

            return notify_Message;
        }

        /// <summary>
        /// 根据参数获取对象列表（分页，可排序）
        /// </summary>
        public DataTable GetPagedList(int pageIndex, int pageSize, string sortExpression, string criteria, out int totalRecords)
        {
            string commandName = "dbo.Pr_Notify_Message_GetPagedList";
            #region Parameters
            SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSRead, commandName);
            if (parms == null)
            {
                parms = new SqlParameter[] {
					new SqlParameter("@PageIndex", SqlDbType.Int),
					new SqlParameter("@PageSize", SqlDbType.Int),
					new SqlParameter("@SortExpression", SqlDbType.VarChar),
					new SqlParameter("@Criteria", SqlDbType.VarChar),
					new SqlParameter("@ReturnValue", SqlDbType.Int, 4, ParameterDirection.ReturnValue, false, 0, 0, String.Empty, DataRowVersion.Default, null)
				};
                SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSRead, commandName, parms);
            }

            parms[0].Value = pageIndex;
            parms[1].Value = pageSize;
            parms[2].Value = sortExpression;
            parms[3].Value = criteria;
            #endregion
            DataTable dt = SqlHelper.ExecuteDataset(ConnectionString.ETMSRead, CommandType.StoredProcedure, commandName, parms).Tables[0];
            totalRecords = (int)parms[4].Value;
            return dt;
        }

        /// <summary>
        /// 根据参数获取对象列表（分页，可排序）
        /// </summary>
        public IList<Notify_Message> GetEntityList(int pageIndex, int pageSize, string sortExpression, string criteria, out int totalRecords)
        {
            IList<Notify_Message> list = new List<Notify_Message>();
            string commandName = "dbo.Pr_Notify_Message_GetPagedList";
            #region Parameters
            SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSRead, commandName);
            if (parms == null)
            {
                parms = new SqlParameter[] {
					new SqlParameter("@PageIndex", SqlDbType.Int),
					new SqlParameter("@PageSize", SqlDbType.Int),
					new SqlParameter("@SortExpression", SqlDbType.VarChar),
					new SqlParameter("@Criteria", SqlDbType.VarChar),
					new SqlParameter("@ReturnValue", SqlDbType.Int, 4, ParameterDirection.ReturnValue, false, 0, 0, String.Empty, DataRowVersion.Default, null)
				};
                SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSRead, commandName, parms);
            }

            parms[0].Value = pageIndex;
            parms[1].Value = pageSize;
            parms[2].Value = sortExpression;
            parms[3].Value = criteria;
            #endregion
            using (SqlDataReader dataReader = SqlHelper.ExecuteReader(ConnectionString.ETMSRead, CommandType.StoredProcedure, commandName, parms))
            {
                while (dataReader.Read())
                {
                    list.Add(PopulateNotify_MessageFromDataReader(dataReader));
                }
            }
            totalRecords = (int)parms[4].Value;
            return list;
        }

        /// <summary>
        /// 从DataReader中读取数据到业务对象
        /// </summary>
        private Notify_Message PopulateNotify_MessageFromDataReader(SqlDataReader reader)
        {
            Notify_Message notify_Message = new Notify_Message();

            int messageIDIndex = reader.GetOrdinal("MessageID");
            if (!reader.IsDBNull(messageIDIndex))
            {
                notify_Message.MessageID = reader.GetInt32(messageIDIndex);
            }

            int messageClassIDIndex = reader.GetOrdinal("MessageClassID");
            if (!reader.IsDBNull(messageClassIDIndex))
            {
                notify_Message.MessageClassID = reader.GetInt16(messageClassIDIndex);
            }

            int messageTypeIDIndex = reader.GetOrdinal("MessageTypeID");
            if (!reader.IsDBNull(messageTypeIDIndex))
            {
                notify_Message.MessageTypeID = reader.GetInt16(messageTypeIDIndex);
            }

            int organizationIDIndex = reader.GetOrdinal("OrganizationID");
            if (!reader.IsDBNull(organizationIDIndex))
            {
                notify_Message.OrganizationID = reader.GetInt32(organizationIDIndex);
            }

            int subjectIndex = reader.GetOrdinal("Subject");
            if (!reader.IsDBNull(subjectIndex))
            {
                notify_Message.Subject = reader.GetString(subjectIndex);
            }

            int bodyIndex = reader.GetOrdinal("Body");
            if (!reader.IsDBNull(bodyIndex))
            {
                notify_Message.Body = reader.GetString(bodyIndex);
            }

            int receiverIndex = reader.GetOrdinal("Receiver");
            if (!reader.IsDBNull(receiverIndex))
            {
                notify_Message.Receiver = reader.GetString(receiverIndex);
            }

            int statusIndex = reader.GetOrdinal("Status");
            if (!reader.IsDBNull(statusIndex))
            {
                notify_Message.Status = reader.GetInt16(statusIndex);
            }

            int remarkIndex = reader.GetOrdinal("Remark");
            if (!reader.IsDBNull(remarkIndex))
            {
                notify_Message.Remark = reader.GetString(remarkIndex);
            }

            int creatorIDIndex = reader.GetOrdinal("CreatorID");
            if (!reader.IsDBNull(creatorIDIndex))
            {
                notify_Message.CreatorID = reader.GetInt32(creatorIDIndex);
            }

            int createTimeIndex = reader.GetOrdinal("CreateTime");
            if (!reader.IsDBNull(createTimeIndex))
            {
                notify_Message.CreateTime = reader.GetDateTime(createTimeIndex);
            }

            int receiveTimeIndex = reader.GetOrdinal("ReceiveTime");
            if (!reader.IsDBNull(receiveTimeIndex))
            {
                notify_Message.ReceiveTime = reader.GetDateTime(receiveTimeIndex);
            }

            return notify_Message;
        }
    }
}
