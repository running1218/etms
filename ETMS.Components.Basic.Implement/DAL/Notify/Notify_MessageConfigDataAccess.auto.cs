//==================================================================================================
//Version 1.0, auto-generated.
//Generated By xueyb.
//Date: 2012-4-11 9:06:02.
//==================================================================================================
//==================================================================================================
//This file is generated by CodeGenerator(Ver 2.1), a product of ZhouYonghua(Zhou_Yonghua@163.com).
//==================================================================================================

using System;
using System.Collections.Generic;
using System.Data;

using System.Data.SqlClient;
using ETMS.Utility.Data;

using ETMS.Components.Basic.API.Entity.Notify;

namespace ETMS.Components.Basic.Implement.DAL.Notify
{
    /// <summary>
    /// 消息配置定义（消息模板及发送策略）数据访问
    /// </summary>
    public partial class Notify_MessageConfigDataAccess
    {
        /// <summary>
        /// 增加
        /// </summary>
        public void Add(Notify_MessageConfig notify_MessageConfig)
        {
            string commandName = "dbo.Pr_Notify_MessageConfig_Insert";
            #region Parameters
            SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSWrite, commandName);
            if (parms == null)
            {
                parms = new SqlParameter[] {	new SqlParameter("@ConfigID", SqlDbType.Int, 4, ParameterDirection.Output, false, 0, 0, String.Empty, DataRowVersion.Default, null),
				
					new SqlParameter("@MessageClassID", SqlDbType.SmallInt),
					new SqlParameter("@OrganizationID", SqlDbType.Int),
					new SqlParameter("@EmailSubjectTemplate", SqlDbType.NVarChar, 200),
					new SqlParameter("@EmailBodyTemplate", SqlDbType.NVarChar, -1),
					new SqlParameter("@IsEnableEmail", SqlDbType.Bit),
					new SqlParameter("@SMSSubjectTemplate", SqlDbType.NVarChar, 100),
					new SqlParameter("@SMSBodyTemplate", SqlDbType.NVarChar, 1000),
					new SqlParameter("@IsEnableSMS", SqlDbType.Bit),
					new SqlParameter("@SiteInfoSubjectTemplate", SqlDbType.NVarChar, 200),
					new SqlParameter("@SiteInfoBodyTemplate", SqlDbType.NVarChar, -1),
					new SqlParameter("@IsEnableSiteInfo", SqlDbType.Bit),
					new SqlParameter("@TemplateVariableDefine", SqlDbType.VarChar, 5000),
					new SqlParameter("@Status", SqlDbType.SmallInt),
					new SqlParameter("@CreatorID", SqlDbType.Int),
					new SqlParameter("@CreateTime", SqlDbType.DateTime),
					new SqlParameter("@UpdaterID", SqlDbType.Int),
					new SqlParameter("@UpdateTime", SqlDbType.DateTime)
					};
                SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSWrite, commandName, parms);
            }

            parms[1].Value = notify_MessageConfig.MessageClassID;
            parms[2].Value = notify_MessageConfig.OrganizationID;
            if (notify_MessageConfig.EmailSubjectTemplate != null) { parms[3].Value = notify_MessageConfig.EmailSubjectTemplate; } else { parms[3].Value = DBNull.Value; }
            if (notify_MessageConfig.EmailBodyTemplate != null) { parms[4].Value = notify_MessageConfig.EmailBodyTemplate; } else { parms[4].Value = DBNull.Value; }
            parms[5].Value = notify_MessageConfig.IsEnableEmail;
            if (notify_MessageConfig.SMSSubjectTemplate != null) { parms[6].Value = notify_MessageConfig.SMSSubjectTemplate; } else { parms[6].Value = DBNull.Value; }
            if (notify_MessageConfig.SMSBodyTemplate != null) { parms[7].Value = notify_MessageConfig.SMSBodyTemplate; } else { parms[7].Value = DBNull.Value; }
            parms[8].Value = notify_MessageConfig.IsEnableSMS;
            if (notify_MessageConfig.SiteInfoSubjectTemplate != null) { parms[9].Value = notify_MessageConfig.SiteInfoSubjectTemplate; } else { parms[9].Value = DBNull.Value; }
            if (notify_MessageConfig.SiteInfoBodyTemplate != null) { parms[10].Value = notify_MessageConfig.SiteInfoBodyTemplate; } else { parms[10].Value = DBNull.Value; }
            parms[11].Value = notify_MessageConfig.IsEnableSiteInfo;
            if (notify_MessageConfig.TemplateVariableDefine != null) { parms[12].Value = notify_MessageConfig.TemplateVariableDefine; } else { parms[12].Value = DBNull.Value; }
            parms[13].Value = notify_MessageConfig.Status;
            parms[14].Value = notify_MessageConfig.CreatorID;
            parms[15].Value = notify_MessageConfig.CreateTime;
            parms[16].Value = notify_MessageConfig.UpdaterID;
            parms[17].Value = notify_MessageConfig.UpdateTime;
            #endregion
            SqlHelper.ExecuteNonQuery(ConnectionString.ETMSWrite, CommandType.StoredProcedure, commandName, parms);

            notify_MessageConfig.ConfigID = (Int32)parms[0].Value;

        }

        /// <summary>
        /// 删除
        /// </summary>
        public void Remove(Int32 configID)
        {
            string commandName = "dbo.Pr_Notify_MessageConfig_Delete";
            #region Parameters
            SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSWrite, commandName);
            if (parms == null)
            {
                parms = new SqlParameter[] {
					new SqlParameter("@ConfigID", SqlDbType.Int)
				};
                SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSWrite, commandName, parms);
            }

            parms[0].Value = configID;

            #endregion
            SqlHelper.ExecuteNonQuery(ConnectionString.ETMSWrite, CommandType.StoredProcedure, commandName, parms);
        }

        /// <summary>
        /// 保存
        /// </summary>
        public void Save(Notify_MessageConfig notify_MessageConfig)
        {
            string commandName = "dbo.Pr_Notify_MessageConfig_Update";
            #region Parameters
            SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSWrite, commandName);
            if (parms == null)
            {
                parms = new SqlParameter[] {
					new SqlParameter("@ConfigID", SqlDbType.Int),
					new SqlParameter("@MessageClassID", SqlDbType.SmallInt),
					new SqlParameter("@OrganizationID", SqlDbType.Int),
					new SqlParameter("@EmailSubjectTemplate", SqlDbType.NVarChar, 200),
					new SqlParameter("@EmailBodyTemplate", SqlDbType.NVarChar, -1),
					new SqlParameter("@IsEnableEmail", SqlDbType.Bit),
					new SqlParameter("@SMSSubjectTemplate", SqlDbType.NVarChar, 100),
					new SqlParameter("@SMSBodyTemplate", SqlDbType.NVarChar, 1000),
					new SqlParameter("@IsEnableSMS", SqlDbType.Bit),
					new SqlParameter("@SiteInfoSubjectTemplate", SqlDbType.NVarChar, 200),
					new SqlParameter("@SiteInfoBodyTemplate", SqlDbType.NVarChar, -1),
					new SqlParameter("@IsEnableSiteInfo", SqlDbType.Bit),
					new SqlParameter("@TemplateVariableDefine", SqlDbType.VarChar, 5000),
					new SqlParameter("@Status", SqlDbType.SmallInt),
					new SqlParameter("@CreatorID", SqlDbType.Int),
					new SqlParameter("@CreateTime", SqlDbType.DateTime),
					new SqlParameter("@UpdaterID", SqlDbType.Int),
					new SqlParameter("@UpdateTime", SqlDbType.DateTime)
				};
                SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSWrite, commandName, parms);
            }

            parms[0].Value = notify_MessageConfig.ConfigID;
            parms[1].Value = notify_MessageConfig.MessageClassID;
            parms[2].Value = notify_MessageConfig.OrganizationID;
            if (notify_MessageConfig.EmailSubjectTemplate != null) { parms[3].Value = notify_MessageConfig.EmailSubjectTemplate; } else { parms[3].Value = DBNull.Value; }
            if (notify_MessageConfig.EmailBodyTemplate != null) { parms[4].Value = notify_MessageConfig.EmailBodyTemplate; } else { parms[4].Value = DBNull.Value; }
            parms[5].Value = notify_MessageConfig.IsEnableEmail;
            if (notify_MessageConfig.SMSSubjectTemplate != null) { parms[6].Value = notify_MessageConfig.SMSSubjectTemplate; } else { parms[6].Value = DBNull.Value; }
            if (notify_MessageConfig.SMSBodyTemplate != null) { parms[7].Value = notify_MessageConfig.SMSBodyTemplate; } else { parms[7].Value = DBNull.Value; }
            parms[8].Value = notify_MessageConfig.IsEnableSMS;
            if (notify_MessageConfig.SiteInfoSubjectTemplate != null) { parms[9].Value = notify_MessageConfig.SiteInfoSubjectTemplate; } else { parms[9].Value = DBNull.Value; }
            if (notify_MessageConfig.SiteInfoBodyTemplate != null) { parms[10].Value = notify_MessageConfig.SiteInfoBodyTemplate; } else { parms[10].Value = DBNull.Value; }
            parms[11].Value = notify_MessageConfig.IsEnableSiteInfo;
            if (notify_MessageConfig.TemplateVariableDefine != null) { parms[12].Value = notify_MessageConfig.TemplateVariableDefine; } else { parms[12].Value = DBNull.Value; }
            parms[13].Value = notify_MessageConfig.Status;
            parms[14].Value = notify_MessageConfig.CreatorID;
            parms[15].Value = notify_MessageConfig.CreateTime;
            parms[16].Value = notify_MessageConfig.UpdaterID;
            parms[17].Value = notify_MessageConfig.UpdateTime;
            #endregion
            SqlHelper.ExecuteNonQuery(ConnectionString.ETMSWrite, CommandType.StoredProcedure, commandName, parms);
        }

        /// <summary>
        /// 根据标识获取对象
        /// </summary>
        public Notify_MessageConfig GetById(Int32 configID)
        {
            Notify_MessageConfig notify_MessageConfig = null;

            string commandName = "dbo.Pr_Notify_MessageConfig_GetByPK";
            #region Parameters
            SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSRead, commandName);
            if (parms == null)
            {
                parms = new SqlParameter[] {
					new SqlParameter("@ConfigID", SqlDbType.Int)
				};
                SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSRead, commandName, parms);
            }

            parms[0].Value = configID;

            #endregion
            using (SqlDataReader dataReader = SqlHelper.ExecuteReader(ConnectionString.ETMSRead, CommandType.StoredProcedure, commandName, parms))
            {
                if (dataReader.Read())
                {
                    notify_MessageConfig = PopulateNotify_MessageConfigFromDataReader(dataReader);
                }
            }

            return notify_MessageConfig;
        }

        /// <summary>
        /// 根据参数获取对象列表（分页，可排序）
        /// </summary>
        public DataTable GetPagedList(int pageIndex, int pageSize, string sortExpression, string criteria, out int totalRecords)
        {
            string commandName = "dbo.Pr_Notify_MessageConfig_GetPagedList";
            #region Parameters
            SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSRead, commandName);
            if (parms == null)
            {
                parms = new SqlParameter[] {
					new SqlParameter("@PageIndex", SqlDbType.Int),
					new SqlParameter("@PageSize", SqlDbType.Int),
					new SqlParameter("@SortExpression", SqlDbType.VarChar),
					new SqlParameter("@Criteria", SqlDbType.VarChar),
					new SqlParameter("@ReturnValue", SqlDbType.Int, 4, ParameterDirection.ReturnValue, false, 0, 0, String.Empty, DataRowVersion.Default, null)
				};
                SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSRead, commandName, parms);
            }

            parms[0].Value = pageIndex;
            parms[1].Value = pageSize;
            parms[2].Value = sortExpression;
            parms[3].Value = criteria;
            #endregion
            DataTable dt = SqlHelper.ExecuteDataset(ConnectionString.ETMSRead, CommandType.StoredProcedure, commandName, parms).Tables[0];
            totalRecords = (int)parms[4].Value;
            return dt;
        }

        /// <summary>
        /// 根据参数获取对象列表（分页，可排序）
        /// </summary>
        public IList<Notify_MessageConfig> GetEntityList(int pageIndex, int pageSize, string sortExpression, string criteria, out int totalRecords)
        {
            IList<Notify_MessageConfig> list = new List<Notify_MessageConfig>();
            string commandName = "dbo.Pr_Notify_MessageConfig_GetPagedList";
            #region Parameters
            SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSRead, commandName);
            if (parms == null)
            {
                parms = new SqlParameter[] {
					new SqlParameter("@PageIndex", SqlDbType.Int),
					new SqlParameter("@PageSize", SqlDbType.Int),
					new SqlParameter("@SortExpression", SqlDbType.VarChar),
					new SqlParameter("@Criteria", SqlDbType.VarChar),
					new SqlParameter("@ReturnValue", SqlDbType.Int, 4, ParameterDirection.ReturnValue, false, 0, 0, String.Empty, DataRowVersion.Default, null)
				};
                SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSRead, commandName, parms);
            }

            parms[0].Value = pageIndex;
            parms[1].Value = pageSize;
            parms[2].Value = sortExpression;
            parms[3].Value = criteria;
            #endregion
            using (SqlDataReader dataReader = SqlHelper.ExecuteReader(ConnectionString.ETMSRead, CommandType.StoredProcedure, commandName, parms))
            {
                while (dataReader.Read())
                {
                    list.Add(PopulateNotify_MessageConfigFromDataReader(dataReader));
                }
            }
            totalRecords = (int)parms[4].Value;
            return list;
        }

        /// <summary>
        /// 从DataReader中读取数据到业务对象
        /// </summary>
        private Notify_MessageConfig PopulateNotify_MessageConfigFromDataReader(SqlDataReader reader)
        {
            Notify_MessageConfig notify_MessageConfig = new Notify_MessageConfig();

            int configIDIndex = reader.GetOrdinal("ConfigID");
            if (!reader.IsDBNull(configIDIndex))
            {
                notify_MessageConfig.ConfigID = reader.GetInt32(configIDIndex);
            }

            int messageClassIDIndex = reader.GetOrdinal("MessageClassID");
            if (!reader.IsDBNull(messageClassIDIndex))
            {
                notify_MessageConfig.MessageClassID = reader.GetInt16(messageClassIDIndex);
            }

            int organizationIDIndex = reader.GetOrdinal("OrganizationID");
            if (!reader.IsDBNull(organizationIDIndex))
            {
                notify_MessageConfig.OrganizationID = reader.GetInt32(organizationIDIndex);
            }

            int emailSubjectTemplateIndex = reader.GetOrdinal("EmailSubjectTemplate");
            if (!reader.IsDBNull(emailSubjectTemplateIndex))
            {
                notify_MessageConfig.EmailSubjectTemplate = reader.GetString(emailSubjectTemplateIndex);
            }

            int emailBodyTemplateIndex = reader.GetOrdinal("EmailBodyTemplate");
            if (!reader.IsDBNull(emailBodyTemplateIndex))
            {
                notify_MessageConfig.EmailBodyTemplate = reader.GetString(emailBodyTemplateIndex);
            }

            int isEnableEmailIndex = reader.GetOrdinal("IsEnableEmail");
            if (!reader.IsDBNull(isEnableEmailIndex))
            {
                notify_MessageConfig.IsEnableEmail = reader.GetBoolean(isEnableEmailIndex);
            }

            int sMSSubjectTemplateIndex = reader.GetOrdinal("SMSSubjectTemplate");
            if (!reader.IsDBNull(sMSSubjectTemplateIndex))
            {
                notify_MessageConfig.SMSSubjectTemplate = reader.GetString(sMSSubjectTemplateIndex);
            }

            int sMSBodyTemplateIndex = reader.GetOrdinal("SMSBodyTemplate");
            if (!reader.IsDBNull(sMSBodyTemplateIndex))
            {
                notify_MessageConfig.SMSBodyTemplate = reader.GetString(sMSBodyTemplateIndex);
            }

            int isEnableSMSIndex = reader.GetOrdinal("IsEnableSMS");
            if (!reader.IsDBNull(isEnableSMSIndex))
            {
                notify_MessageConfig.IsEnableSMS = reader.GetBoolean(isEnableSMSIndex);
            }

            int siteInfoSubjectTemplateIndex = reader.GetOrdinal("SiteInfoSubjectTemplate");
            if (!reader.IsDBNull(siteInfoSubjectTemplateIndex))
            {
                notify_MessageConfig.SiteInfoSubjectTemplate = reader.GetString(siteInfoSubjectTemplateIndex);
            }

            int siteInfoBodyTemplateIndex = reader.GetOrdinal("SiteInfoBodyTemplate");
            if (!reader.IsDBNull(siteInfoBodyTemplateIndex))
            {
                notify_MessageConfig.SiteInfoBodyTemplate = reader.GetString(siteInfoBodyTemplateIndex);
            }

            int isEnableSiteInfoIndex = reader.GetOrdinal("IsEnableSiteInfo");
            if (!reader.IsDBNull(isEnableSiteInfoIndex))
            {
                notify_MessageConfig.IsEnableSiteInfo = reader.GetBoolean(isEnableSiteInfoIndex);
            }

            int templateVariableDefineIndex = reader.GetOrdinal("TemplateVariableDefine");
            if (!reader.IsDBNull(templateVariableDefineIndex))
            {
                notify_MessageConfig.TemplateVariableDefine = reader.GetString(templateVariableDefineIndex);
            }

            int statusIndex = reader.GetOrdinal("Status");
            if (!reader.IsDBNull(statusIndex))
            {
                notify_MessageConfig.Status = reader.GetInt16(statusIndex);
            }

            int creatorIDIndex = reader.GetOrdinal("CreatorID");
            if (!reader.IsDBNull(creatorIDIndex))
            {
                notify_MessageConfig.CreatorID = reader.GetInt32(creatorIDIndex);
            }

            int createTimeIndex = reader.GetOrdinal("CreateTime");
            if (!reader.IsDBNull(createTimeIndex))
            {
                notify_MessageConfig.CreateTime = reader.GetDateTime(createTimeIndex);
            }

            int updaterIDIndex = reader.GetOrdinal("UpdaterID");
            if (!reader.IsDBNull(updaterIDIndex))
            {
                notify_MessageConfig.UpdaterID = reader.GetInt32(updaterIDIndex);
            }

            int updateTimeIndex = reader.GetOrdinal("UpdateTime");
            if (!reader.IsDBNull(updateTimeIndex))
            {
                notify_MessageConfig.UpdateTime = reader.GetDateTime(updateTimeIndex);
            }

            return notify_MessageConfig;
        }
    }
}
