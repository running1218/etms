//==================================================================================================
//Version 1.0, auto-generated.
//Generated By running1218
//Date: 2012-4-11 9:06:02.
//==================================================================================================
//==================================================================================================
//This file is generated by CodeGenerator(Ver 2.1)
//==================================================================================================

using System;
using System.Collections.Generic;
using System.Data;

using System.Data.SqlClient;
using ETMS.Utility.Data;

using ETMS.Components.Basic.API.Entity.Notify;

namespace ETMS.Components.Basic.Implement.DAL.Notify
{
    /// <summary>
    /// 消息类别，指定了消息业务归类数据访问
    /// </summary>
    public partial class Notify_MessageClassDataAccess
    {
        /// <summary>
        /// 增加
        /// </summary>
        public void Add(Notify_MessageClass notify_MessageClass)
        {
            string commandName = "dbo.Pr_Notify_MessageClass_Insert";
            #region Parameters
            SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSWrite, commandName);
            if (parms == null)
            {
                parms = new SqlParameter[] {
					new SqlParameter("@MessageClassID", SqlDbType.SmallInt),
					new SqlParameter("@MessageClassName", SqlDbType.VarChar, 100),
					new SqlParameter("@OrderNum", SqlDbType.Int),
					new SqlParameter("@IsUse", SqlDbType.Int)
					};
                SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSWrite, commandName, parms);
            }

            parms[0].Value = notify_MessageClass.MessageClassID;
            if (notify_MessageClass.MessageClassName != null) { parms[1].Value = notify_MessageClass.MessageClassName; } else { parms[1].Value = DBNull.Value; }
            parms[2].Value = notify_MessageClass.OrderNum;
            parms[3].Value = notify_MessageClass.IsUse;
            #endregion
            SqlHelper.ExecuteNonQuery(ConnectionString.ETMSWrite, CommandType.StoredProcedure, commandName, parms);

        }

        /// <summary>
        /// 删除
        /// </summary>
        public void Remove(Int16 messageClassID)
        {
            string commandName = "dbo.Pr_Notify_MessageClass_Delete";
            #region Parameters
            SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSWrite, commandName);
            if (parms == null)
            {
                parms = new SqlParameter[] {
					new SqlParameter("@MessageClassID", SqlDbType.SmallInt)
				};
                SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSWrite, commandName, parms);
            }

            parms[0].Value = messageClassID;

            #endregion
            SqlHelper.ExecuteNonQuery(ConnectionString.ETMSWrite, CommandType.StoredProcedure, commandName, parms);
        }

        /// <summary>
        /// 保存
        /// </summary>
        public void Save(Notify_MessageClass notify_MessageClass)
        {
            string commandName = "dbo.Pr_Notify_MessageClass_Update";
            #region Parameters
            SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSWrite, commandName);
            if (parms == null)
            {
                parms = new SqlParameter[] {
					new SqlParameter("@MessageClassID", SqlDbType.SmallInt),
					new SqlParameter("@MessageClassName", SqlDbType.VarChar, 100),
					new SqlParameter("@OrderNum", SqlDbType.Int),
					new SqlParameter("@IsUse", SqlDbType.Int)
				};
                SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSWrite, commandName, parms);
            }

            parms[0].Value = notify_MessageClass.MessageClassID;
            if (notify_MessageClass.MessageClassName != null) { parms[1].Value = notify_MessageClass.MessageClassName; } else { parms[1].Value = DBNull.Value; }
            parms[2].Value = notify_MessageClass.OrderNum;
            parms[3].Value = notify_MessageClass.IsUse;
            #endregion
            SqlHelper.ExecuteNonQuery(ConnectionString.ETMSWrite, CommandType.StoredProcedure, commandName, parms);
        }

        /// <summary>
        /// 根据标识获取对象
        /// </summary>
        public Notify_MessageClass GetById(Int16 messageClassID)
        {
            Notify_MessageClass notify_MessageClass = null;

            string commandName = "dbo.Pr_Notify_MessageClass_GetByPK";
            #region Parameters
            SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSRead, commandName);
            if (parms == null)
            {
                parms = new SqlParameter[] {
					new SqlParameter("@MessageClassID", SqlDbType.SmallInt)
				};
                SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSRead, commandName, parms);
            }

            parms[0].Value = messageClassID;

            #endregion
            using (SqlDataReader dataReader = SqlHelper.ExecuteReader(ConnectionString.ETMSRead, CommandType.StoredProcedure, commandName, parms))
            {
                if (dataReader.Read())
                {
                    notify_MessageClass = PopulateNotify_MessageClassFromDataReader(dataReader);
                }
            }

            return notify_MessageClass;
        }

        /// <summary>
        /// 根据参数获取对象列表（分页，可排序）
        /// </summary>
        public DataTable GetPagedList(int pageIndex, int pageSize, string sortExpression, string criteria, out int totalRecords)
        {
            string commandName = "dbo.Pr_Notify_MessageClass_GetPagedList";
            #region Parameters
            SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSRead, commandName);
            if (parms == null)
            {
                parms = new SqlParameter[] {
					new SqlParameter("@PageIndex", SqlDbType.Int),
					new SqlParameter("@PageSize", SqlDbType.Int),
					new SqlParameter("@SortExpression", SqlDbType.VarChar),
					new SqlParameter("@Criteria", SqlDbType.VarChar),
					new SqlParameter("@ReturnValue", SqlDbType.Int, 4, ParameterDirection.ReturnValue, false, 0, 0, String.Empty, DataRowVersion.Default, null)
				};
                SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSRead, commandName, parms);
            }

            parms[0].Value = pageIndex;
            parms[1].Value = pageSize;
            parms[2].Value = sortExpression;
            parms[3].Value = criteria;
            #endregion
            DataTable dt = SqlHelper.ExecuteDataset(ConnectionString.ETMSRead, CommandType.StoredProcedure, commandName, parms).Tables[0];
            totalRecords = (int)parms[4].Value;
            return dt;
        }

        /// <summary>
        /// 根据参数获取对象列表（分页，可排序）
        /// </summary>
        public IList<Notify_MessageClass> GetEntityList(int pageIndex, int pageSize, string sortExpression, string criteria, out int totalRecords)
        {
            IList<Notify_MessageClass> list = new List<Notify_MessageClass>();
            string commandName = "dbo.Pr_Notify_MessageClass_GetPagedList";
            #region Parameters
            SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSRead, commandName);
            if (parms == null)
            {
                parms = new SqlParameter[] {
					new SqlParameter("@PageIndex", SqlDbType.Int),
					new SqlParameter("@PageSize", SqlDbType.Int),
					new SqlParameter("@SortExpression", SqlDbType.VarChar),
					new SqlParameter("@Criteria", SqlDbType.VarChar),
					new SqlParameter("@ReturnValue", SqlDbType.Int, 4, ParameterDirection.ReturnValue, false, 0, 0, String.Empty, DataRowVersion.Default, null)
				};
                SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSRead, commandName, parms);
            }

            parms[0].Value = pageIndex;
            parms[1].Value = pageSize;
            parms[2].Value = sortExpression;
            parms[3].Value = criteria;
            #endregion
            using (SqlDataReader dataReader = SqlHelper.ExecuteReader(ConnectionString.ETMSRead, CommandType.StoredProcedure, commandName, parms))
            {
                while (dataReader.Read())
                {
                    list.Add(PopulateNotify_MessageClassFromDataReader(dataReader));
                }
            }
            totalRecords = (int)parms[4].Value;
            return list;
        }

        /// <summary>
        /// 从DataReader中读取数据到业务对象
        /// </summary>
        private Notify_MessageClass PopulateNotify_MessageClassFromDataReader(SqlDataReader reader)
        {
            Notify_MessageClass notify_MessageClass = new Notify_MessageClass();

            int messageClassIDIndex = reader.GetOrdinal("MessageClassID");
            if (!reader.IsDBNull(messageClassIDIndex))
            {
                notify_MessageClass.MessageClassID = reader.GetInt16(messageClassIDIndex);
            }

            int messageClassNameIndex = reader.GetOrdinal("MessageClassName");
            if (!reader.IsDBNull(messageClassNameIndex))
            {
                notify_MessageClass.MessageClassName = reader.GetString(messageClassNameIndex);
            }

            int orderNumIndex = reader.GetOrdinal("OrderNum");
            if (!reader.IsDBNull(orderNumIndex))
            {
                notify_MessageClass.OrderNum = reader.GetInt32(orderNumIndex);
            }

            int isUseIndex = reader.GetOrdinal("IsUse");
            if (!reader.IsDBNull(isUseIndex))
            {
                notify_MessageClass.IsUse = reader.GetInt32(isUseIndex);
            }

            return notify_MessageClass;
        }
    }
}
