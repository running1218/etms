//==================================================================================================
//Version 1.0, auto-generated.
//Generated By running1218
//Date: 2012-3-29 22:16:00.
//==================================================================================================
//==================================================================================================
//This file is generated by CodeGenerator(Ver 2.1)
//==================================================================================================

using System;
using System.Data;

using System.Data.SqlClient;
using ETMS.Utility.Data;

using ETMS.Components.Basic.API.Entity.ELearningMap;

namespace ETMS.Components.Basic.Implement.DAL.ELearningMap
{
    /// <summary>
    /// 学习地图与课程关系表数据访问
    /// </summary>
    public partial class Res_StudyMapReferCourseDataAccess
	{
		/// <summary>
		/// 增加
		/// </summary>
		public void Add(Res_StudyMapReferCourse res_StudyMapReferCourse)
		{
			string commandName = "dbo.Pr_Res_StudyMapReferCourse_Insert";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSWrite, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@StudyMapReferCourseID", SqlDbType.UniqueIdentifier),
					new SqlParameter("@StudyMapID", SqlDbType.UniqueIdentifier),
					new SqlParameter("@CourseID", SqlDbType.UniqueIdentifier),                   
					new SqlParameter("@CreateTime", SqlDbType.DateTime),
					new SqlParameter("@CreateUserID", SqlDbType.Int),
					new SqlParameter("@CreateUser", SqlDbType.NVarChar, 128),
					new SqlParameter("@ModifyTime", SqlDbType.DateTime),
					new SqlParameter("@ModifyUser", SqlDbType.NVarChar, 128),
					new SqlParameter("@Remark", SqlDbType.NVarChar, -1),
					new SqlParameter("@DelFlag", SqlDbType.Bit),
                    new SqlParameter("@StudyModelID", SqlDbType.Int),
                    new SqlParameter("@ChargeMan", SqlDbType.NVarChar),
					};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSWrite, commandName, parms);
			}
			
			parms[0].Value = res_StudyMapReferCourse.StudyMapReferCourseID;
			parms[1].Value = res_StudyMapReferCourse.StudyMapID;
			parms[2].Value = res_StudyMapReferCourse.CourseID;
			parms[3].Value = res_StudyMapReferCourse.CreateTime;
			parms[4].Value = res_StudyMapReferCourse.CreateUserID;
			if (res_StudyMapReferCourse.CreateUser!= null){ parms[5].Value = res_StudyMapReferCourse.CreateUser; } else { parms[5].Value = DBNull.Value; }
			parms[6].Value = res_StudyMapReferCourse.ModifyTime;
			if (res_StudyMapReferCourse.ModifyUser!= null){ parms[7].Value = res_StudyMapReferCourse.ModifyUser; } else { parms[7].Value = DBNull.Value; }
			if (res_StudyMapReferCourse.Remark!= null){ parms[8].Value = res_StudyMapReferCourse.Remark; } else { parms[8].Value = DBNull.Value; }
			parms[9].Value = res_StudyMapReferCourse.DelFlag;
            parms[10].Value = res_StudyMapReferCourse.StudyModelID;
            parms[11].Value = res_StudyMapReferCourse.ChargeMan;
			#endregion
			SqlHelper.ExecuteNonQuery(ConnectionString.ETMSWrite, CommandType.StoredProcedure, commandName, parms);
			
		}
		
		/// <summary>
		/// 删除
		/// </summary>
		public void Remove(Guid studyMapReferCourseID)
		{
			string commandName = "dbo.Pr_Res_StudyMapReferCourse_Delete";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSWrite, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@StudyMapReferCourseID", SqlDbType.UniqueIdentifier)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSWrite, commandName, parms);
			}
			
			parms[0].Value = studyMapReferCourseID;
			
			#endregion
			SqlHelper.ExecuteNonQuery(ConnectionString.ETMSWrite, CommandType.StoredProcedure, commandName, parms);
		}
		
		/// <summary>
		/// 保存
		/// </summary>
		public void Save(Res_StudyMapReferCourse res_StudyMapReferCourse)
		{
			string commandName = "dbo.Pr_Res_StudyMapReferCourse_Update";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSWrite, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@StudyMapReferCourseID", SqlDbType.UniqueIdentifier),
					new SqlParameter("@StudyMapID", SqlDbType.UniqueIdentifier),
					new SqlParameter("@CourseID", SqlDbType.UniqueIdentifier),                   
					new SqlParameter("@CreateTime", SqlDbType.DateTime),
					new SqlParameter("@CreateUserID", SqlDbType.Int),
					new SqlParameter("@CreateUser", SqlDbType.NVarChar, 128),
					new SqlParameter("@ModifyTime", SqlDbType.DateTime),
					new SqlParameter("@ModifyUser", SqlDbType.NVarChar, 128),
					new SqlParameter("@Remark", SqlDbType.NVarChar, -1),
					new SqlParameter("@DelFlag", SqlDbType.Bit),
                    new SqlParameter("@StudyModelID", SqlDbType.Int),
                    new SqlParameter("@ChargeMan", SqlDbType.NVarChar),
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSWrite, commandName, parms);
			}
			
			parms[0].Value = res_StudyMapReferCourse.StudyMapReferCourseID;
			parms[1].Value = res_StudyMapReferCourse.StudyMapID;
			parms[2].Value = res_StudyMapReferCourse.CourseID;
			parms[3].Value = res_StudyMapReferCourse.CreateTime;
			parms[4].Value = res_StudyMapReferCourse.CreateUserID;
			if (res_StudyMapReferCourse.CreateUser!= null){ parms[5].Value = res_StudyMapReferCourse.CreateUser; } else { parms[5].Value = DBNull.Value; }
			parms[6].Value = res_StudyMapReferCourse.ModifyTime;
			if (res_StudyMapReferCourse.ModifyUser!= null){ parms[7].Value = res_StudyMapReferCourse.ModifyUser; } else { parms[7].Value = DBNull.Value; }
			if (res_StudyMapReferCourse.Remark!= null){ parms[8].Value = res_StudyMapReferCourse.Remark; } else { parms[8].Value = DBNull.Value; }
			parms[9].Value = res_StudyMapReferCourse.DelFlag;
            parms[10].Value = res_StudyMapReferCourse.StudyModelID;
            parms[11].Value = res_StudyMapReferCourse.ChargeMan;
			#endregion
			SqlHelper.ExecuteNonQuery(ConnectionString.ETMSWrite, CommandType.StoredProcedure, commandName, parms);
		}
		
		/// <summary>
		/// 根据标识获取对象
		/// </summary>
		public Res_StudyMapReferCourse GetById(Guid studyMapReferCourseID)
		{
			Res_StudyMapReferCourse res_StudyMapReferCourse = null;
			
			string commandName = "dbo.Pr_Res_StudyMapReferCourse_GetByPK";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSRead, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@StudyMapReferCourseID", SqlDbType.UniqueIdentifier)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSRead, commandName, parms);
			}
			
			parms[0].Value = studyMapReferCourseID;
			
			#endregion
			using (SqlDataReader dataReader = SqlHelper.ExecuteReader(ConnectionString.ETMSRead, CommandType.StoredProcedure, commandName, parms))
			{
				if (dataReader.Read())
				{
					res_StudyMapReferCourse = PopulateRes_StudyMapReferCourseFromDataReader(dataReader);
				}
			}
			
			return res_StudyMapReferCourse;
		}				
		
		/// <summary>
		/// 根据参数获取对象列表（分页，可排序）
		/// </summary>
		public DataTable GetPagedList(int pageIndex, int pageSize, string sortExpression, string criteria, out int totalRecords)
		{			
			string commandName = "dbo.Pr_Res_StudyMapReferCourse_GetPagedList";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSRead, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@PageIndex", SqlDbType.Int),
					new SqlParameter("@PageSize", SqlDbType.Int),
					new SqlParameter("@SortExpression", SqlDbType.VarChar),
					new SqlParameter("@Criteria", SqlDbType.VarChar),
					new SqlParameter("@ReturnValue", SqlDbType.Int, 4, ParameterDirection.ReturnValue, false, 0, 0, String.Empty, DataRowVersion.Default, null)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSRead, commandName, parms);
			}
			
			parms[0].Value = pageIndex;
			parms[1].Value = pageSize;
			parms[2].Value = sortExpression;
			parms[3].Value = criteria;
			#endregion
			DataTable dt=SqlHelper.ExecuteDataset(ConnectionString.ETMSRead, CommandType.StoredProcedure, commandName, parms).Tables[0];
			totalRecords = (int)parms[4].Value;
			return dt;
		}
		
		/// <summary>
		/// 从DataReader中读取数据到业务对象
		/// </summary>
		private Res_StudyMapReferCourse PopulateRes_StudyMapReferCourseFromDataReader(SqlDataReader reader)
		{
			Res_StudyMapReferCourse res_StudyMapReferCourse = new Res_StudyMapReferCourse();
			
			int studyMapReferCourseIDIndex = reader.GetOrdinal("StudyMapReferCourseID"); 
			if(!reader.IsDBNull(studyMapReferCourseIDIndex))
			{
				res_StudyMapReferCourse.StudyMapReferCourseID= reader.GetGuid(studyMapReferCourseIDIndex);
			}
			
			int studyMapIDIndex = reader.GetOrdinal("StudyMapID"); 
			if(!reader.IsDBNull(studyMapIDIndex))
			{
				res_StudyMapReferCourse.StudyMapID= reader.GetGuid(studyMapIDIndex);
			}
			
			int courseIDIndex = reader.GetOrdinal("CourseID"); 
			if(!reader.IsDBNull(courseIDIndex))
			{
				res_StudyMapReferCourse.CourseID= reader.GetGuid(courseIDIndex);
			}

            int studyModelIDIndex = reader.GetOrdinal("StudyModelID");
            if (!reader.IsDBNull(studyModelIDIndex))
            {
                res_StudyMapReferCourse.StudyModelID = reader.GetInt32(studyModelIDIndex);
            }

            int chargeManIndex = reader.GetOrdinal("ChargeMan");
            if (!reader.IsDBNull(chargeManIndex))
            {
                res_StudyMapReferCourse.ChargeMan = reader.GetString(chargeManIndex);
            }
			
			int createTimeIndex = reader.GetOrdinal("CreateTime"); 
			if(!reader.IsDBNull(createTimeIndex))
			{
				res_StudyMapReferCourse.CreateTime= reader.GetDateTime(createTimeIndex);
			}
			
			int createUserIDIndex = reader.GetOrdinal("CreateUserID"); 
			if(!reader.IsDBNull(createUserIDIndex))
			{
				res_StudyMapReferCourse.CreateUserID= reader.GetInt32(createUserIDIndex);
			}
			
			int createUserIndex = reader.GetOrdinal("CreateUser"); 
			if(!reader.IsDBNull(createUserIndex))
			{
				res_StudyMapReferCourse.CreateUser= reader.GetString(createUserIndex);
			}
			
			int modifyTimeIndex = reader.GetOrdinal("ModifyTime"); 
			if(!reader.IsDBNull(modifyTimeIndex))
			{
				res_StudyMapReferCourse.ModifyTime= reader.GetDateTime(modifyTimeIndex);
			}
			
			int modifyUserIndex = reader.GetOrdinal("ModifyUser"); 
			if(!reader.IsDBNull(modifyUserIndex))
			{
				res_StudyMapReferCourse.ModifyUser= reader.GetString(modifyUserIndex);
			}
			
			int remarkIndex = reader.GetOrdinal("Remark"); 
			if(!reader.IsDBNull(remarkIndex))
			{
				res_StudyMapReferCourse.Remark= reader.GetString(remarkIndex);
			}
			
			int delFlagIndex = reader.GetOrdinal("DelFlag"); 
			if(!reader.IsDBNull(delFlagIndex))
			{
				res_StudyMapReferCourse.DelFlag= reader.GetBoolean(delFlagIndex);
			}
			
			return res_StudyMapReferCourse; 
		}
	}
}
