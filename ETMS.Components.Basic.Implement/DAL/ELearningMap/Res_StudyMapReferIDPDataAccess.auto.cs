//==================================================================================================
//Version 1.0, auto-generated.
//Generated By xinyb.
//Date: 2012-05-09 09:25:00.
//==================================================================================================
//==================================================================================================
//This file is generated by CodeGenerator(Ver 2.1)
//==================================================================================================

using System;
using System.Collections.Generic;
using System.Data;

using System.Data.SqlClient;
using ETMS.Utility.Data;

using ETMS.Components.Basic.API.Entity;

namespace ETMS.Components.Basic.Implement.DAL
{
    /// <summary>
    /// 学习地图与IDP非课程资料关系表数据访问
    /// </summary>
    public partial class Res_StudyMapReferIDPDataAccess
	{
		/// <summary>
		/// 增加
		/// </summary>
		public void Add(Res_StudyMapReferIDP res_StudyMapReferIDP)
		{
			string commandName = "dbo.Pr_Res_StudyMapReferIDP_Insert";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSWrite, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@Res_StudyMapReferIDPID", SqlDbType.UniqueIdentifier),
					new SqlParameter("@StudyMapID", SqlDbType.UniqueIdentifier),
					new SqlParameter("@IDP_NotCourseDataID", SqlDbType.UniqueIdentifier),
					new SqlParameter("@CreateTime", SqlDbType.DateTime),
					new SqlParameter("@CreateUserID", SqlDbType.Int),
					new SqlParameter("@CreateUser", SqlDbType.NVarChar, 128),
					new SqlParameter("@ModifyTime", SqlDbType.DateTime),
					new SqlParameter("@ModifyUser", SqlDbType.NVarChar, 128),
					new SqlParameter("@Remark", SqlDbType.NVarChar, -1),
					new SqlParameter("@DelFlag", SqlDbType.Bit)
					};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSWrite, commandName, parms);
			}
			
			parms[0].Value = res_StudyMapReferIDP.Res_StudyMapReferIDPID;
			parms[1].Value = res_StudyMapReferIDP.StudyMapID;
			parms[2].Value = res_StudyMapReferIDP.IDP_NotCourseDataID;
			parms[3].Value = res_StudyMapReferIDP.CreateTime;
			parms[4].Value = res_StudyMapReferIDP.CreateUserID;
			if (res_StudyMapReferIDP.CreateUser!= null){ parms[5].Value = res_StudyMapReferIDP.CreateUser; } else { parms[5].Value = DBNull.Value; }
			parms[6].Value = res_StudyMapReferIDP.ModifyTime;
			if (res_StudyMapReferIDP.ModifyUser!= null){ parms[7].Value = res_StudyMapReferIDP.ModifyUser; } else { parms[7].Value = DBNull.Value; }
			if (res_StudyMapReferIDP.Remark!= null){ parms[8].Value = res_StudyMapReferIDP.Remark; } else { parms[8].Value = DBNull.Value; }
			parms[9].Value = res_StudyMapReferIDP.DelFlag;
			#endregion
			SqlHelper.ExecuteNonQuery(ConnectionString.ETMSWrite, CommandType.StoredProcedure, commandName, parms);
			
		}
		
		/// <summary>
		/// 删除
		/// </summary>
		public void Remove(Guid res_StudyMapReferIDPID)
		{
			string commandName = "dbo.Pr_Res_StudyMapReferIDP_Delete";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSWrite, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@Res_StudyMapReferIDPID", SqlDbType.UniqueIdentifier)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSWrite, commandName, parms);
			}
			
			parms[0].Value = res_StudyMapReferIDPID;
			
			#endregion
			SqlHelper.ExecuteNonQuery(ConnectionString.ETMSWrite, CommandType.StoredProcedure, commandName, parms);
		}
		
		/// <summary>
		/// 保存
		/// </summary>
		public void Save(Res_StudyMapReferIDP res_StudyMapReferIDP)
		{
			string commandName = "dbo.Pr_Res_StudyMapReferIDP_Update";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSWrite, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@Res_StudyMapReferIDPID", SqlDbType.UniqueIdentifier),
					new SqlParameter("@StudyMapID", SqlDbType.UniqueIdentifier),
					new SqlParameter("@IDP_NotCourseDataID", SqlDbType.UniqueIdentifier),
					new SqlParameter("@CreateTime", SqlDbType.DateTime),
					new SqlParameter("@CreateUserID", SqlDbType.Int),
					new SqlParameter("@CreateUser", SqlDbType.NVarChar, 128),
					new SqlParameter("@ModifyTime", SqlDbType.DateTime),
					new SqlParameter("@ModifyUser", SqlDbType.NVarChar, 128),
					new SqlParameter("@Remark", SqlDbType.NVarChar, -1),
					new SqlParameter("@DelFlag", SqlDbType.Bit)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSWrite, commandName, parms);
			}
			
			parms[0].Value = res_StudyMapReferIDP.Res_StudyMapReferIDPID;
			parms[1].Value = res_StudyMapReferIDP.StudyMapID;
			parms[2].Value = res_StudyMapReferIDP.IDP_NotCourseDataID;
			parms[3].Value = res_StudyMapReferIDP.CreateTime;
			parms[4].Value = res_StudyMapReferIDP.CreateUserID;
			if (res_StudyMapReferIDP.CreateUser!= null){ parms[5].Value = res_StudyMapReferIDP.CreateUser; } else { parms[5].Value = DBNull.Value; }
			parms[6].Value = res_StudyMapReferIDP.ModifyTime;
			if (res_StudyMapReferIDP.ModifyUser!= null){ parms[7].Value = res_StudyMapReferIDP.ModifyUser; } else { parms[7].Value = DBNull.Value; }
			if (res_StudyMapReferIDP.Remark!= null){ parms[8].Value = res_StudyMapReferIDP.Remark; } else { parms[8].Value = DBNull.Value; }
			parms[9].Value = res_StudyMapReferIDP.DelFlag;
			#endregion
			SqlHelper.ExecuteNonQuery(ConnectionString.ETMSWrite, CommandType.StoredProcedure, commandName, parms);
		}
		
		/// <summary>
		/// 根据标识获取对象
		/// </summary>
		public Res_StudyMapReferIDP GetById(Guid res_StudyMapReferIDPID)
		{
			Res_StudyMapReferIDP res_StudyMapReferIDP = null;
			
			string commandName = "dbo.Pr_Res_StudyMapReferIDP_GetByPK";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSRead, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@Res_StudyMapReferIDPID", SqlDbType.UniqueIdentifier)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSRead, commandName, parms);
			}
			
			parms[0].Value = res_StudyMapReferIDPID;
			
			#endregion
			using (SqlDataReader dataReader = SqlHelper.ExecuteReader(ConnectionString.ETMSRead, CommandType.StoredProcedure, commandName, parms))
			{
				if (dataReader.Read())
				{
					res_StudyMapReferIDP = PopulateRes_StudyMapReferIDPFromDataReader(dataReader);
				}
			}
			
			return res_StudyMapReferIDP;
		}				
		
		/// <summary>
		/// 根据参数获取对象列表（分页，可排序）
		/// </summary>
		public DataTable GetPagedList(int pageIndex, int pageSize, string sortExpression, string criteria, out int totalRecords)
		{			
			string commandName = "dbo.Pr_Res_StudyMapReferIDP_GetPagedList";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSRead, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@PageIndex", SqlDbType.Int),
					new SqlParameter("@PageSize", SqlDbType.Int),
					new SqlParameter("@SortExpression", SqlDbType.VarChar),
					new SqlParameter("@Criteria", SqlDbType.VarChar),
					new SqlParameter("@ReturnValue", SqlDbType.Int, 4, ParameterDirection.ReturnValue, false, 0, 0, String.Empty, DataRowVersion.Default, null)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSRead, commandName, parms);
			}
			
			parms[0].Value = pageIndex;
			parms[1].Value = pageSize;
			parms[2].Value = sortExpression;
			parms[3].Value = criteria;
			#endregion
			DataTable dt=SqlHelper.ExecuteDataset(ConnectionString.ETMSRead, CommandType.StoredProcedure, commandName, parms).Tables[0];
			totalRecords = (int)parms[4].Value;
			return dt;
		}
		
	    /// <summary>
		/// 根据参数获取对象列表（分页，可排序）
		/// </summary>
		public IList<Res_StudyMapReferIDP> GetEntityList(int pageIndex, int pageSize, string sortExpression, string criteria, out int totalRecords)
		{			
            IList<Res_StudyMapReferIDP> list=new List<Res_StudyMapReferIDP>();
			string commandName = "dbo.Pr_Res_StudyMapReferIDP_GetPagedList";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSRead, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@PageIndex", SqlDbType.Int),
					new SqlParameter("@PageSize", SqlDbType.Int),
					new SqlParameter("@SortExpression", SqlDbType.VarChar),
					new SqlParameter("@Criteria", SqlDbType.VarChar),
					new SqlParameter("@ReturnValue", SqlDbType.Int, 4, ParameterDirection.ReturnValue, false, 0, 0, String.Empty, DataRowVersion.Default, null)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSRead, commandName, parms);
			}
			
			parms[0].Value = pageIndex;
			parms[1].Value = pageSize;
			parms[2].Value = sortExpression;
			parms[3].Value = criteria;
			#endregion
            using (SqlDataReader dataReader = SqlHelper.ExecuteReader(ConnectionString.ETMSRead, CommandType.StoredProcedure, commandName, parms))
			{
				while (dataReader.Read())
				{
					list.Add(PopulateRes_StudyMapReferIDPFromDataReader(dataReader));
				}
			}			
			totalRecords = (int)parms[4].Value;
			return list;
		}
		
		/// <summary>
		/// 从DataReader中读取数据到业务对象
		/// </summary>
		private Res_StudyMapReferIDP PopulateRes_StudyMapReferIDPFromDataReader(SqlDataReader reader)
		{
			Res_StudyMapReferIDP res_StudyMapReferIDP = new Res_StudyMapReferIDP();
			
			int res_StudyMapReferIDPIDIndex = reader.GetOrdinal("Res_StudyMapReferIDPID"); 
			if(!reader.IsDBNull(res_StudyMapReferIDPIDIndex))
			{
				res_StudyMapReferIDP.Res_StudyMapReferIDPID= reader.GetGuid(res_StudyMapReferIDPIDIndex);
			}
			
			int studyMapIDIndex = reader.GetOrdinal("StudyMapID"); 
			if(!reader.IsDBNull(studyMapIDIndex))
			{
				res_StudyMapReferIDP.StudyMapID= reader.GetGuid(studyMapIDIndex);
			}
			
			int iDP_NotCourseDataIDIndex = reader.GetOrdinal("IDP_NotCourseDataID"); 
			if(!reader.IsDBNull(iDP_NotCourseDataIDIndex))
			{
				res_StudyMapReferIDP.IDP_NotCourseDataID= reader.GetGuid(iDP_NotCourseDataIDIndex);
			}
			
			int createTimeIndex = reader.GetOrdinal("CreateTime"); 
			if(!reader.IsDBNull(createTimeIndex))
			{
				res_StudyMapReferIDP.CreateTime= reader.GetDateTime(createTimeIndex);
			}
			
			int createUserIDIndex = reader.GetOrdinal("CreateUserID"); 
			if(!reader.IsDBNull(createUserIDIndex))
			{
				res_StudyMapReferIDP.CreateUserID= reader.GetInt32(createUserIDIndex);
			}
			
			int createUserIndex = reader.GetOrdinal("CreateUser"); 
			if(!reader.IsDBNull(createUserIndex))
			{
				res_StudyMapReferIDP.CreateUser= reader.GetString(createUserIndex);
			}
			
			int modifyTimeIndex = reader.GetOrdinal("ModifyTime"); 
			if(!reader.IsDBNull(modifyTimeIndex))
			{
				res_StudyMapReferIDP.ModifyTime= reader.GetDateTime(modifyTimeIndex);
			}
			
			int modifyUserIndex = reader.GetOrdinal("ModifyUser"); 
			if(!reader.IsDBNull(modifyUserIndex))
			{
				res_StudyMapReferIDP.ModifyUser= reader.GetString(modifyUserIndex);
			}
			
			int remarkIndex = reader.GetOrdinal("Remark"); 
			if(!reader.IsDBNull(remarkIndex))
			{
				res_StudyMapReferIDP.Remark= reader.GetString(remarkIndex);
			}
			
			int delFlagIndex = reader.GetOrdinal("DelFlag"); 
			if(!reader.IsDBNull(delFlagIndex))
			{
				res_StudyMapReferIDP.DelFlag= reader.GetBoolean(delFlagIndex);
			}
			
			return res_StudyMapReferIDP; 
		}
	}
}
