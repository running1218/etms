//==================================================================================================
//Version 1.0, auto-generated.
//Generated By liuyx.
//Date: 2012-4-17 9:26:23.
//==================================================================================================
//==================================================================================================
//This file is generated by CodeGenerator(Ver 2.1)
//==================================================================================================

using System;
using System.Collections.Generic;
using System.Data;

using System.Data.SqlClient;
using ETMS.Utility.Data;

using ETMS.Components.Basic.API.Entity.ClassRoom;

namespace ETMS.Components.Basic.Implement.DAL.ClassRoom
{
    /// <summary>
    /// 教室表数据访问
    /// </summary>
    public partial class Res_ClassRoomDataAccess
	{
        /// <summary>
        /// 增加
        /// </summary>
        public void Add(Res_ClassRoom res_ClassRoom)
        {
            string commandName = "dbo.Pr_Res_ClassRoom_Insert";
            #region Parameters
            SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSWrite, commandName);
            if (parms == null)
            {
                parms = new SqlParameter[] {
					new SqlParameter("@ClassRoomID", SqlDbType.UniqueIdentifier),
					new SqlParameter("@ClassRoomCode", SqlDbType.NVarChar, 100),
					new SqlParameter("@ClassRoomName", SqlDbType.NVarChar, 200),
					new SqlParameter("@ClassRoomStatus", SqlDbType.Bit),
					new SqlParameter("@Capacity", SqlDbType.Int),
					new SqlParameter("@DutyUser", SqlDbType.NVarChar, 128),
					new SqlParameter("@Phone", SqlDbType.NVarChar, 40),
					new SqlParameter("@Address", SqlDbType.NVarChar, 400),
					new SqlParameter("@Description", SqlDbType.NVarChar, -1),
					new SqlParameter("@Regulations", SqlDbType.NVarChar, -1),
					new SqlParameter("@CreateTime", SqlDbType.DateTime),
					new SqlParameter("@CreateUserID", SqlDbType.Int),
					new SqlParameter("@CreateUser", SqlDbType.NVarChar, 128),
					new SqlParameter("@ModifyTime", SqlDbType.DateTime),
					new SqlParameter("@ModifyUser", SqlDbType.NVarChar, 128),
					new SqlParameter("@DelFlag", SqlDbType.Bit),
					new SqlParameter("@ClassRoomPurpose", SqlDbType.NVarChar, -1),
					new SqlParameter("@Price", SqlDbType.Decimal, 9, ParameterDirection.Input, true, 18, 0, String.Empty, DataRowVersion.Default, null),
					new SqlParameter("@OrgID", SqlDbType.Int)
					};
                SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSWrite, commandName, parms);
            }

            parms[0].Value = res_ClassRoom.ClassRoomID;
            if (res_ClassRoom.ClassRoomCode != null) { parms[1].Value = res_ClassRoom.ClassRoomCode; } else { parms[1].Value = DBNull.Value; }
            if (res_ClassRoom.ClassRoomName != null) { parms[2].Value = res_ClassRoom.ClassRoomName; } else { parms[2].Value = DBNull.Value; }
            parms[3].Value = res_ClassRoom.ClassRoomStatus;
            parms[4].Value = res_ClassRoom.Capacity;
            if (res_ClassRoom.DutyUser != null) { parms[5].Value = res_ClassRoom.DutyUser; } else { parms[5].Value = DBNull.Value; }
            if (res_ClassRoom.Phone != null) { parms[6].Value = res_ClassRoom.Phone; } else { parms[6].Value = DBNull.Value; }
            if (res_ClassRoom.Address != null) { parms[7].Value = res_ClassRoom.Address; } else { parms[7].Value = DBNull.Value; }
            if (res_ClassRoom.Description != null) { parms[8].Value = res_ClassRoom.Description; } else { parms[8].Value = DBNull.Value; }
            if (res_ClassRoom.Regulations != null) { parms[9].Value = res_ClassRoom.Regulations; } else { parms[9].Value = DBNull.Value; }
            parms[10].Value = res_ClassRoom.CreateTime;
            parms[11].Value = res_ClassRoom.CreateUserID;
            if (res_ClassRoom.CreateUser != null) { parms[12].Value = res_ClassRoom.CreateUser; } else { parms[12].Value = DBNull.Value; }
            parms[13].Value = res_ClassRoom.ModifyTime;
            if (res_ClassRoom.ModifyUser != null) { parms[14].Value = res_ClassRoom.ModifyUser; } else { parms[14].Value = DBNull.Value; }
            parms[15].Value = res_ClassRoom.DelFlag;
            if (res_ClassRoom.ClassRoomPurpose != null) { parms[16].Value = res_ClassRoom.ClassRoomPurpose; } else { parms[16].Value = DBNull.Value; }
            parms[17].Value = res_ClassRoom.Price;
            parms[18].Value = res_ClassRoom.OrgID;
            #endregion
            SqlHelper.ExecuteNonQuery(ConnectionString.ETMSWrite, CommandType.StoredProcedure, commandName, parms);

        }

        /// <summary>
        /// 删除
        /// </summary>
        public void Remove(Guid classRoomID)
        {
            string commandName = "dbo.Pr_Res_ClassRoom_Delete";
            #region Parameters
            SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSWrite, commandName);
            if (parms == null)
            {
                parms = new SqlParameter[] {
					new SqlParameter("@ClassRoomID", SqlDbType.UniqueIdentifier)
				};
                SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSWrite, commandName, parms);
            }

            parms[0].Value = classRoomID;

            #endregion
            SqlHelper.ExecuteNonQuery(ConnectionString.ETMSWrite, CommandType.StoredProcedure, commandName, parms);
        }

        /// <summary>
        /// 保存
        /// </summary>
        public void Save(Res_ClassRoom res_ClassRoom)
        {
            string commandName = "dbo.Pr_Res_ClassRoom_Update";
            #region Parameters
            SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSWrite, commandName);
            if (parms == null)
            {
                parms = new SqlParameter[] {
					new SqlParameter("@ClassRoomID", SqlDbType.UniqueIdentifier),
					new SqlParameter("@ClassRoomCode", SqlDbType.NVarChar, 100),
					new SqlParameter("@ClassRoomName", SqlDbType.NVarChar, 200),
					new SqlParameter("@ClassRoomStatus", SqlDbType.Bit),
					new SqlParameter("@Capacity", SqlDbType.Int),
					new SqlParameter("@DutyUser", SqlDbType.NVarChar, 128),
					new SqlParameter("@Phone", SqlDbType.NVarChar, 40),
					new SqlParameter("@Address", SqlDbType.NVarChar, 400),
					new SqlParameter("@Description", SqlDbType.NVarChar, -1),
					new SqlParameter("@Regulations", SqlDbType.NVarChar, -1),
					new SqlParameter("@CreateTime", SqlDbType.DateTime),
					new SqlParameter("@CreateUserID", SqlDbType.Int),
					new SqlParameter("@CreateUser", SqlDbType.NVarChar, 128),
					new SqlParameter("@ModifyTime", SqlDbType.DateTime),
					new SqlParameter("@ModifyUser", SqlDbType.NVarChar, 128),
					new SqlParameter("@DelFlag", SqlDbType.Bit),
					new SqlParameter("@ClassRoomPurpose", SqlDbType.NVarChar, -1),
					new SqlParameter("@Price", SqlDbType.Decimal, 9, ParameterDirection.Input, true, 18, 0, String.Empty, DataRowVersion.Default, null),
					new SqlParameter("@OrgID", SqlDbType.Int)
				};
                SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSWrite, commandName, parms);
            }

            parms[0].Value = res_ClassRoom.ClassRoomID;
            if (res_ClassRoom.ClassRoomCode != null) { parms[1].Value = res_ClassRoom.ClassRoomCode; } else { parms[1].Value = DBNull.Value; }
            if (res_ClassRoom.ClassRoomName != null) { parms[2].Value = res_ClassRoom.ClassRoomName; } else { parms[2].Value = DBNull.Value; }
            parms[3].Value = res_ClassRoom.ClassRoomStatus;
            parms[4].Value = res_ClassRoom.Capacity;
            if (res_ClassRoom.DutyUser != null) { parms[5].Value = res_ClassRoom.DutyUser; } else { parms[5].Value = DBNull.Value; }
            if (res_ClassRoom.Phone != null) { parms[6].Value = res_ClassRoom.Phone; } else { parms[6].Value = DBNull.Value; }
            if (res_ClassRoom.Address != null) { parms[7].Value = res_ClassRoom.Address; } else { parms[7].Value = DBNull.Value; }
            if (res_ClassRoom.Description != null) { parms[8].Value = res_ClassRoom.Description; } else { parms[8].Value = DBNull.Value; }
            if (res_ClassRoom.Regulations != null) { parms[9].Value = res_ClassRoom.Regulations; } else { parms[9].Value = DBNull.Value; }
            parms[10].Value = res_ClassRoom.CreateTime;
            parms[11].Value = res_ClassRoom.CreateUserID;
            if (res_ClassRoom.CreateUser != null) { parms[12].Value = res_ClassRoom.CreateUser; } else { parms[12].Value = DBNull.Value; }
            parms[13].Value = res_ClassRoom.ModifyTime;
            if (res_ClassRoom.ModifyUser != null) { parms[14].Value = res_ClassRoom.ModifyUser; } else { parms[14].Value = DBNull.Value; }
            parms[15].Value = res_ClassRoom.DelFlag;
            if (res_ClassRoom.ClassRoomPurpose != null) { parms[16].Value = res_ClassRoom.ClassRoomPurpose; } else { parms[16].Value = DBNull.Value; }
            parms[17].Value = res_ClassRoom.Price;
            parms[18].Value = res_ClassRoom.OrgID;
            #endregion
            SqlHelper.ExecuteNonQuery(ConnectionString.ETMSWrite, CommandType.StoredProcedure, commandName, parms);
        }

        /// <summary>
        /// 根据标识获取对象
        /// </summary>
        public Res_ClassRoom GetById(Guid classRoomID)
        {
            Res_ClassRoom res_ClassRoom = null;

            string commandName = "dbo.Pr_Res_ClassRoom_GetByPK";
            #region Parameters
            SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSRead, commandName);
            if (parms == null)
            {
                parms = new SqlParameter[] {
					new SqlParameter("@ClassRoomID", SqlDbType.UniqueIdentifier)
				};
                SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSRead, commandName, parms);
            }

            parms[0].Value = classRoomID;

            #endregion
            using (SqlDataReader dataReader = SqlHelper.ExecuteReader(ConnectionString.ETMSRead, CommandType.StoredProcedure, commandName, parms))
            {
                if (dataReader.Read())
                {
                    res_ClassRoom = PopulateRes_ClassRoomFromDataReader(dataReader);
                }
            }

            return res_ClassRoom;
        }

        /// <summary>
        /// 根据参数获取对象列表（分页，可排序）
        /// </summary>
        public DataTable GetPagedList(int pageIndex, int pageSize, string sortExpression, string criteria, out int totalRecords)
        {
            string commandName = "dbo.Pr_Res_ClassRoom_GetPagedList";
            #region Parameters
            SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSRead, commandName);
            if (parms == null)
            {
                parms = new SqlParameter[] {
					new SqlParameter("@PageIndex", SqlDbType.Int),
					new SqlParameter("@PageSize", SqlDbType.Int),
					new SqlParameter("@SortExpression", SqlDbType.VarChar),
					new SqlParameter("@Criteria", SqlDbType.VarChar),
					new SqlParameter("@ReturnValue", SqlDbType.Int, 4, ParameterDirection.ReturnValue, false, 0, 0, String.Empty, DataRowVersion.Default, null)
				};
                SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSRead, commandName, parms);
            }

            parms[0].Value = pageIndex;
            parms[1].Value = pageSize;
            parms[2].Value = sortExpression;
            parms[3].Value = criteria;
            #endregion
            DataTable dt = SqlHelper.ExecuteDataset(ConnectionString.ETMSRead, CommandType.StoredProcedure, commandName, parms).Tables[0];
            totalRecords = (int)parms[4].Value;
            return dt;
        }

        /// <summary>
        /// 根据参数获取对象列表（分页，可排序）
        /// </summary>
        public IList<Res_ClassRoom> GetEntityList(int pageIndex, int pageSize, string sortExpression, string criteria, out int totalRecords)
        {
            IList<Res_ClassRoom> list = new List<Res_ClassRoom>();
            string commandName = "dbo.Pr_Res_ClassRoom_GetPagedList";
            #region Parameters
            SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSRead, commandName);
            if (parms == null)
            {
                parms = new SqlParameter[] {
					new SqlParameter("@PageIndex", SqlDbType.Int),
					new SqlParameter("@PageSize", SqlDbType.Int),
					new SqlParameter("@SortExpression", SqlDbType.VarChar),
					new SqlParameter("@Criteria", SqlDbType.VarChar),
					new SqlParameter("@ReturnValue", SqlDbType.Int, 4, ParameterDirection.ReturnValue, false, 0, 0, String.Empty, DataRowVersion.Default, null)
				};
                SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSRead, commandName, parms);
            }

            parms[0].Value = pageIndex;
            parms[1].Value = pageSize;
            parms[2].Value = sortExpression;
            parms[3].Value = criteria;
            #endregion
            using (SqlDataReader dataReader = SqlHelper.ExecuteReader(ConnectionString.ETMSRead, CommandType.StoredProcedure, commandName, parms))
            {
                while (dataReader.Read())
                {
                    list.Add(PopulateRes_ClassRoomFromDataReader(dataReader));
                }
            }
            totalRecords = (int)parms[4].Value;
            return list;
        }

        /// <summary>
        /// 从DataReader中读取数据到业务对象
        /// </summary>
        private Res_ClassRoom PopulateRes_ClassRoomFromDataReader(SqlDataReader reader)
        {
            Res_ClassRoom res_ClassRoom = new Res_ClassRoom();

            int classRoomIDIndex = reader.GetOrdinal("ClassRoomID");
            if (!reader.IsDBNull(classRoomIDIndex))
            {
                res_ClassRoom.ClassRoomID = reader.GetGuid(classRoomIDIndex);
            }

            int classRoomCodeIndex = reader.GetOrdinal("ClassRoomCode");
            if (!reader.IsDBNull(classRoomCodeIndex))
            {
                res_ClassRoom.ClassRoomCode = reader.GetString(classRoomCodeIndex);
            }

            int classRoomNameIndex = reader.GetOrdinal("ClassRoomName");
            if (!reader.IsDBNull(classRoomNameIndex))
            {
                res_ClassRoom.ClassRoomName = reader.GetString(classRoomNameIndex);
            }

            int classRoomStatusIndex = reader.GetOrdinal("ClassRoomStatus");
            if (!reader.IsDBNull(classRoomStatusIndex))
            {
                res_ClassRoom.ClassRoomStatus = reader.GetBoolean(classRoomStatusIndex);
            }

            int capacityIndex = reader.GetOrdinal("Capacity");
            if (!reader.IsDBNull(capacityIndex))
            {
                res_ClassRoom.Capacity = reader.GetInt32(capacityIndex);
            }

            int dutyUserIndex = reader.GetOrdinal("DutyUser");
            if (!reader.IsDBNull(dutyUserIndex))
            {
                res_ClassRoom.DutyUser = reader.GetString(dutyUserIndex);
            }

            int phoneIndex = reader.GetOrdinal("Phone");
            if (!reader.IsDBNull(phoneIndex))
            {
                res_ClassRoom.Phone = reader.GetString(phoneIndex);
            }

            int addressIndex = reader.GetOrdinal("Address");
            if (!reader.IsDBNull(addressIndex))
            {
                res_ClassRoom.Address = reader.GetString(addressIndex);
            }

            int descriptionIndex = reader.GetOrdinal("Description");
            if (!reader.IsDBNull(descriptionIndex))
            {
                res_ClassRoom.Description = reader.GetString(descriptionIndex);
            }

            int regulationsIndex = reader.GetOrdinal("Regulations");
            if (!reader.IsDBNull(regulationsIndex))
            {
                res_ClassRoom.Regulations = reader.GetString(regulationsIndex);
            }

            int createTimeIndex = reader.GetOrdinal("CreateTime");
            if (!reader.IsDBNull(createTimeIndex))
            {
                res_ClassRoom.CreateTime = reader.GetDateTime(createTimeIndex);
            }

            int createUserIDIndex = reader.GetOrdinal("CreateUserID");
            if (!reader.IsDBNull(createUserIDIndex))
            {
                res_ClassRoom.CreateUserID = reader.GetInt32(createUserIDIndex);
            }

            int createUserIndex = reader.GetOrdinal("CreateUser");
            if (!reader.IsDBNull(createUserIndex))
            {
                res_ClassRoom.CreateUser = reader.GetString(createUserIndex);
            }

            int modifyTimeIndex = reader.GetOrdinal("ModifyTime");
            if (!reader.IsDBNull(modifyTimeIndex))
            {
                res_ClassRoom.ModifyTime = reader.GetDateTime(modifyTimeIndex);
            }

            int modifyUserIndex = reader.GetOrdinal("ModifyUser");
            if (!reader.IsDBNull(modifyUserIndex))
            {
                res_ClassRoom.ModifyUser = reader.GetString(modifyUserIndex);
            }

            int delFlagIndex = reader.GetOrdinal("DelFlag");
            if (!reader.IsDBNull(delFlagIndex))
            {
                res_ClassRoom.DelFlag = reader.GetBoolean(delFlagIndex);
            }

            int classRoomPurposeIndex = reader.GetOrdinal("ClassRoomPurpose");
            if (!reader.IsDBNull(classRoomPurposeIndex))
            {
                res_ClassRoom.ClassRoomPurpose = reader.GetString(classRoomPurposeIndex);
            }

            int priceIndex = reader.GetOrdinal("Price");
            if (!reader.IsDBNull(priceIndex))
            {
                res_ClassRoom.Price = reader.GetDecimal(priceIndex);
            }

            int orgIDIndex = reader.GetOrdinal("OrgID");
            if (!reader.IsDBNull(orgIDIndex))
            {
                res_ClassRoom.OrgID = reader.GetInt32(orgIDIndex);
            }

            return res_ClassRoom;
        }
	}
}
