//==================================================================================================
//Version 1.0, auto-generated.
//Generated By running1218
//Date: 2012-4-11 9:06:02.
//==================================================================================================
//==================================================================================================
//This file is generated by CodeGenerator(Ver 2.1)
//==================================================================================================

using System;
using System.Collections.Generic;
using ETMS.Utility;
using ETMS.Utility.Logging;
using ETMS.Components.Basic.API.Entity.Notify;
namespace ETMS.Components.Basic.Implement.BLL.Notify
{
    /// <summary>
    /// 消息提醒清单业务逻辑
    /// </summary>
    public partial class Notify_MessageLogic
    {
        /// <summary>
        /// 保存操作
        /// </summary>
        public void Save(Notify_Message notify_Message)
        {
            try
            {
                if (notify_Message.MessageID.IsEmpty())
                {
                    //设置主键ID（仅类型为GUID有效，Int型则由数据库自增产生）
                    notify_Message.MessageID = notify_Message.MessageID.NewID();
                    Add(notify_Message);
                }
                else
                {
                    Update(notify_Message);
                }
            }
            catch (System.Data.SqlClient.SqlException ex)
            {
                //枚举数据约束异常并转换为业务异常
                if (ex.Message.IndexOf("Index_U_Notify_MessageCode", StringComparison.InvariantCultureIgnoreCase) != -1)
                {
                    throw new ETMS.AppContext.BusinessException("Notify.Notify_Message.CodeExists");
                }
                else if (ex.Message.IndexOf("Index_U_Notify_MessageName", StringComparison.InvariantCultureIgnoreCase) != -1)
                {
                    throw new ETMS.AppContext.BusinessException("Notify.Notify_Message.NameExists");
                }
                //如果仍未处理，则抛出
                throw ex;
            }
        }

        /// <summary>
        /// 删除
        /// </summary>
        protected void doRemove(Int32 messageID)
        {
            try
            {
                DAL.Remove(messageID);
                //记录删除日志（根据ID删除）
                BizLogHelper.Operate(messageID, "删除");
            }
            catch (System.Data.SqlClient.SqlException ex)
            {
                //枚举数据约束异常并转换为业务异常，数据已经使用
                if (ex.Message.IndexOf("FK_", StringComparison.InvariantCultureIgnoreCase) != -1)
                {
                    throw new ETMS.AppContext.BusinessException("Notify.Notify_Message.DataUsed");
                }
                //如果仍未处理，则抛出
                throw ex;
            }
        }

        /// <summary>
        /// 阅读站内消息
        /// </summary>
        /// <param name="messageID"></param>
        public void ReadSiteInfoMessage(Notify_Message notify_Message)
        {
            notify_Message.Status = 4;
            notify_Message.ReceiveTime = DateTime.Now;
            //保存
            Update(notify_Message);
        }

        /// <summary>
        /// 获取用户站内消息
        /// </summary>
        /// <param name="userID">用户ID</param>
        /// <param name="isIncludeReadedMessage">是否包含已阅读的信息</param>
        /// <param name="pageIndex">页号</param>
        /// <param name="pageSize">页面大小</param>
        /// <param name="totalRecords">总记录数</param>
        /// <returns></returns>
        public IList<Notify_Message> GetMySiteInfoMessageList(int userID, bool isIncludeReadedMessage, int pageIndex, int pageSize, out int totalRecords)
        {
            string sortExpression = " MessageID desc ";//消息ID倒序
            string criteria = string.Format(" AND [MessageTypeID]=3 AND [Receiver]='{0}' AND [Status] IN ({1}) And MessageEndTime >='{2}' "
                , userID, isIncludeReadedMessage ? "3,4" : "3", DateTime.Now.ToDate().ToDateTime());//仅取站内消息类型，接收人为UserID，且消息类型：未读及已读（3,4）或3（未读）
            return GetEntityList(pageIndex, pageSize, sortExpression, criteria, out totalRecords);
        }
    }


}

