//==================================================================================================
//Version 1.0, auto-generated.
//Generated By running1218
//Date: 2012-4-11 9:06:02.
//==================================================================================================
//==================================================================================================
//This file is generated by CodeGenerator(Ver 2.1)
//==================================================================================================

using System;
using System.Collections.Generic;

using ETMS.AppContext;
using ETMS.Utility;
using ETMS.Utility.Logging;
using ETMS.Components.Basic.API.Entity.Notify;
namespace ETMS.Components.Basic.Implement.BLL.Notify
{
    /// <summary>
    /// 消息类别，指定了消息业务归类业务逻辑
    /// </summary>
    public partial class Notify_MessageClassLogic
    {
        /// <summary>
        /// 保存操作
        /// </summary>
        public void Save(Notify_MessageClass notify_MessageClass)
        {
            try
            {
                if (notify_MessageClass.MessageClassID.IsEmpty())
                {
                    //设置主键ID（仅类型为GUID有效，Int型则由数据库自增产生）
                    notify_MessageClass.MessageClassID = notify_MessageClass.MessageClassID.NewID(); ;
                    Add(notify_MessageClass);
                }
                else
                {
                    Update(notify_MessageClass);
                }
            }
            catch (System.Data.SqlClient.SqlException ex)
            {
                //枚举数据约束异常并转换为业务异常
                if (ex.Message.IndexOf("Index_U_Notify_MessageClassCode", StringComparison.InvariantCultureIgnoreCase) != -1)
                {
                    throw new ETMS.AppContext.BusinessException("Notify.Notify_MessageClass.CodeExists");
                }
                else if (ex.Message.IndexOf("Index_U_Notify_MessageClassName", StringComparison.InvariantCultureIgnoreCase) != -1)
                {
                    throw new ETMS.AppContext.BusinessException("Notify.Notify_MessageClass.NameExists");
                }
                //如果仍未处理，则抛出
                throw ex;
            }
        }

        /// <summary>
        /// 删除
        /// </summary>
        protected void doRemove(Int16 messageClassID)
        {
            try
            {
                DAL.Remove(messageClassID);
                //记录删除日志（根据ID删除）
                BizLogHelper.Operate(messageClassID, "删除");
            }
            catch (System.Data.SqlClient.SqlException ex)
            {
                //枚举数据约束异常并转换为业务异常，数据已经使用
                if (ex.Message.IndexOf("FK_", StringComparison.InvariantCultureIgnoreCase) != -1)
                {
                    throw new ETMS.AppContext.BusinessException("Notify.Notify_MessageClass.DataUsed");
                }
                //如果仍未处理，则抛出
                throw ex;
            }
        }

        /// <summary>
        /// 根据消息类别名称获取消息类别实体
        /// </summary>
        /// <param name="className">消息类别名称</param>
        /// <returns>消息类别实体</returns>
        public Notify_MessageClass GetMessageClassByClassName(string className)
        {
            //config/BizCache.config中定义缓存过期策略
            string key = "Notify_MessageClassDefines";
            return ETMS.Utility.BizCache.BizCacheHelper.GetOrInsertItem<Notify_MessageClass>(key, className, () =>
              {
                  int totalRecords = 0;
                  IList<Notify_MessageClass> messageClassItems = GetEntityList(1, 1, "", string.Format(" AND MessageClassName='{0}'", className), out totalRecords);
                  if (totalRecords == 0)
                  {
                      throw new BusinessException("Notify.Notify_MessageClass.NotFoundByClassName", new object[] { className });
                  }
                  return messageClassItems[0];
              });
        }


    }


}

