//==================================================================================================
//Version 1.0, auto-generated.
//Generated By running1218
//Date: 2012-4-2 11:05:29.
//==================================================================================================
//==================================================================================================
//This file is generated by CodeGenerator(Ver 2.1)
//==================================================================================================

using System;
using System.Collections.Generic;
using System.Data;
using ETMS.Utility;
using ETMS.Utility.Logging;
using ETMS.Components.Basic.API.Entity.Import;
using ETMS.Utility.Data;
using System.Data.OleDb;
namespace ETMS.Components.Basic.Implement.BLL.Import
{
    /// <summary>
    /// 学员信息导入业务逻辑
    /// </summary>
    public partial class Import_Detail_StudentLogic
    {
        ExcelDataAccess EDA = new ExcelDataAccess();
        Import_TaskLogic TaskLogic = new Import_TaskLogic();
        string SheetName = "";
        /// <summary>
        /// 导入学员信息
        /// </summary>
        /// <param name="importTask">导入任务</param>
        /// <param name="xlsFile">学员信息excel文件</param>
        /// <returns>成功或失败状态，如果失败，请从importTask中获取错误信息！</returns>
        public bool ImportStudentInfo(Import_Task importTask, string xlsFile, string defaultPassword)
        {
            try
            {
                //1、验证excel是否符合标准
                if (!ValidateExcel(importTask, xlsFile))
                {
                    return false;
                }

                //2、验证业务数据（临时表）
                if (!ValidateData(importTask, xlsFile))
                {
                    return false;
                }

                //3、临时表数据==》正式表（用户基本信息表+学员信息表）
                int dataCount = DAL.DoImport(importTask, ETMS.Utility.Cryptography.MD5Utility.MD516(defaultPassword));

                importTask.Status = 3;//成功
                importTask.Remark = "共" + dataCount.ToString() + "学员信息导入成功";
                return true;
            }
            catch (Exception ex)
            {
                importTask.Status = 1;//导入失败
                importTask.Remark = ex.Message;
                return false;
            }
            finally
            {
                //更新任务状态
                TaskLogic.Save(importTask);
            }
        }

        #region helper
        private bool ValidateExcel(Import_Task importTask, string xlsFile)
        {
            //1、读取sheet，验证excel文件是否符合
            List<string> sheets = EDA.getSheetName(xlsFile);
            if (sheets.Count == 0)
            {
                importTask.Status = 1;
                importTask.Remark = "excel文件不符合！";
                TaskLogic.Save(importTask);
                return false;
            }
            this.SheetName = sheets[0];//默认取第一个sheet
            using (OleDbDataReader reader = EDA.ReadExcelData(xlsFile, SheetName))
            {
                DataTable dt = reader.GetSchemaTable();

                //学员账号 学员姓名 部门 职级 岗位 邮箱 手机 工号 性别	身份证号	工作职务	直接上级	出生日期	电话	最高学历	专业	入职日期
                if ((dt.Select(" ColumnName='学员账号'").Length > 0) && (dt.Select(" ColumnName='学员姓名'").Length > 0) && (dt.Select(" ColumnName='学员身份'").Length > 0) && (dt.Select(" ColumnName='邮箱'").Length > 0) && (dt.Select(" ColumnName='手机'").Length > 0) && (dt.Select(" ColumnName='工号'").Length > 0) && (dt.Select(" ColumnName='性别'").Length > 0) && (dt.Select(" ColumnName='身份证号'").Length > 0) && (dt.Select(" ColumnName='工作职务'").Length > 0) && (dt.Select(" ColumnName='直接上级'").Length > 0) && (dt.Select(" ColumnName='出生日期'").Length > 0) && (dt.Select(" ColumnName='电话'").Length > 0) && (dt.Select(" ColumnName='最高学历'").Length > 0) && (dt.Select(" ColumnName='专业'").Length > 0) && (dt.Select(" ColumnName='入职日期'").Length > 0) )
                {
                    return true;
                }
                else
                {
                    importTask.Status = 1;
                    importTask.Remark = "excel文件不符合！";
                    TaskLogic.Save(importTask);
                    return false;
                }
            }
        }
        private bool ValidateData(Import_Task importTask, string xlsFile)
        {
            //1、excel入临时表
            DataTable dt = EDA.ImportDataTable(xlsFile, this.SheetName);
            foreach (DataRow row in dt.Rows)
            {
                Import_Detail_Student studentInfo = new Import_Detail_Student()
                {
                    TaskID = importTask.TaskID,//外键关联
                    LoginName = row["学员账号"].Equals(DBNull.Value) ? string.Empty : Convert.ToString(row["学员账号"]).Trim(),
                    RealName = row["学员姓名"].Equals(DBNull.Value) ? string.Empty : Convert.ToString(row["学员姓名"]).Trim(),
                    ResettlementWayName = row["学员身份"].Equals(DBNull.Value) ? string.Empty : Convert.ToString(row["学员身份"]).Trim(),
                    Email = row["邮箱"].Equals(DBNull.Value) ? string.Empty : Convert.ToString(row["邮箱"]).Trim(),
                    Mobile = row["手机"].Equals(DBNull.Value) ? string.Empty : Convert.ToString(row["手机"]).Trim(),
                    WorkerNo = row["工号"].Equals(DBNull.Value) ? string.Empty : Convert.ToString(row["工号"]).Trim(),
                    SexTypeID = row["性别"].Equals(DBNull.Value) ? 1 : (Convert.ToString(row["性别"]).Trim().Equals("男") ? 1 : 2),
                    Identity = row["身份证号"].Equals(DBNull.Value) ? string.Empty : Convert.ToString(row["身份证号"]).Trim(),
                    TitleName = row["工作职务"].Equals(DBNull.Value) ? string.Empty : Convert.ToString(row["工作职务"]).Trim(),
                    Superior = row["直接上级"].Equals(DBNull.Value) ? string.Empty : Convert.ToString(row["直接上级"]).Trim(),
                    Birthday = row["出生日期"].Equals(DBNull.Value) ? DateTime.MinValue : Convert.ToString(row["出生日期"]).Trim().ToDateTime(),
                    OfficeTelphone = row["电话"].Equals(DBNull.Value) ? string.Empty : Convert.ToString(row["电话"]).Trim(),
                    LastEducation = row["最高学历"].Equals(DBNull.Value) ? string.Empty : Convert.ToString(row["最高学历"]).Trim(),
                    Specialty = row["专业"].Equals(DBNull.Value) ? string.Empty : Convert.ToString(row["专业"]).Trim(),
                    JoinTime = row["入职日期"].Equals(DBNull.Value) ? DateTime.MinValue : Convert.ToString(row["入职日期"]).Trim().ToDateTime(),
                };
                this.Save(studentInfo);
            }
            //2、核对临时表数据
            int errorCount = DAL.DoValid(importTask);
            if (errorCount > 0)
            {
                importTask.Status = 2;
                importTask.Remark = "共" + dt.Rows.Count.ToString() + "条，其中" + errorCount.ToString() + "条数据校验出错！";
                //更新
                TaskLogic.Save(importTask);
                return false;
            }
            return true;
        }
        #endregion

        /// <summary>
        /// 保存操作
        /// </summary>
        public void Save(Import_Detail_Student import_Detail_Student)
        {
            try
            {
                if (import_Detail_Student.DetailID.IsEmpty())
                {
                    //设置主键ID（仅类型为GUID有效，Int型则由数据库自增产生）
                    import_Detail_Student.DetailID = import_Detail_Student.DetailID.NewID(); ;
                    Add(import_Detail_Student);
                }
                else
                {
                    Update(import_Detail_Student);
                }
            }
            catch (System.Data.SqlClient.SqlException ex)
            {
                //枚举数据约束异常并转换为业务异常
                if (ex.Message.IndexOf("Index_U_Import_Detail_StudentCode", StringComparison.InvariantCultureIgnoreCase) != -1)
                {
                    throw new ETMS.AppContext.BusinessException("Import.Import_Detail_Student.CodeExists");
                }
                else if (ex.Message.IndexOf("Index_U_Import_Detail_StudentName", StringComparison.InvariantCultureIgnoreCase) != -1)
                {
                    throw new ETMS.AppContext.BusinessException("Import.Import_Detail_Student.NameExists");
                }
                //如果仍未处理，则抛出
                throw ex;
            }
        }

        /// <summary>
        /// 删除
        /// </summary>
        protected void doRemove(Int32 detailID)
        {
            try
            {
                DAL.Remove(detailID);
                //记录删除日志（根据ID删除）
                BizLogHelper.Operate(detailID, "删除");
            }
            catch (System.Data.SqlClient.SqlException ex)
            {
                //枚举数据约束异常并转换为业务异常，数据已经使用
                if (ex.Message.IndexOf("FK_", StringComparison.InvariantCultureIgnoreCase) != -1)
                {
                    throw new ETMS.AppContext.BusinessException("Import.Import_Detail_Student.DataUsed");
                }
                //如果仍未处理，则抛出
                throw ex;
            }
        }
    }


}

