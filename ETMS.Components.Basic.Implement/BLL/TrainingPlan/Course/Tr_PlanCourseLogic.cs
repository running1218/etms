//==================================================================================================
//Version 1.0, auto-generated.
//Generated By xueyb.
//Date: 2012-4-17 9:51:23.
//==================================================================================================
//==================================================================================================
//This file is generated by CodeGenerator(Ver 2.1), a product of ZhouYonghua(Zhou_Yonghua@163.com).
//==================================================================================================

using System;
using System.Data;

using ETMS.AppContext;
using ETMS.Utility.Logging;
using ETMS.Components.Basic.API.Entity.TrainingPlan.Course;
using ETMS.Components.Basic.Implement.DAL.Common;

namespace ETMS.Components.Basic.Implement.BLL.TrainingPlan.Course
{
    /// <summary>
    /// 培训计划课程表业务逻辑
    /// </summary>
    public partial class Tr_PlanCourseLogic
    {




        #region 业务操作方法，如：添加、修改、删除、审核等



        /// <summary>
        /// 保存操作
        /// </summary>
        public void Save(Tr_PlanCourse entity, OperationAction action)
        {
            try
            {
                if (action == OperationAction.Add)
                    Add(entity);
                else if (action == OperationAction.Edit)
                    Update(entity);
            }
            catch (System.Data.SqlClient.SqlException ex)
            {
                string errorMsg = ex.Message;
                //枚举数据约束异常并转换为业务异常
                if (errorMsg.IndexOf("Index_U_CourseCode", StringComparison.InvariantCultureIgnoreCase) != -1)
                {
                    throw new ETMS.AppContext.BusinessException("该课程编码已经存在，请修改！");
                }
                else if (errorMsg.IndexOf("Index_U_CourseName", StringComparison.InvariantCultureIgnoreCase) != -1)
                {
                    throw new ETMS.AppContext.BusinessException("该课程名称已经存在，请修改！");
                }
                //如果仍未处理，则抛出
                throw ex;
            }
        }


        /// <summary>
        /// 删除
        /// </summary>
        protected void doRemove(Guid planCourseID)
        {
            try
            {
                DAL.Remove(planCourseID);
                //记录删除日志（根据ID删除）
                BizLogHelper.Operate(planCourseID, "删除");
            }
            catch (System.Data.SqlClient.SqlException ex)
            {
                string errorMsg = ex.Message.ToUpper();
                //枚举数据约束异常并转换为业务异常，数据已经使用
                if (errorMsg.IndexOf("FK_TR_PLANC_REFERENCE_TR_PLANC", StringComparison.InvariantCultureIgnoreCase) != -1)
                {
                    throw new ETMS.AppContext.BusinessException("该课程已经有“培训计划课程课时安排”，不能删除！");
                }
                //如果仍未处理，则抛出
                throw ex;
            }
        }

        /// <summary>
        /// 批量添加课程到指定计划中
        /// </summary>
        /// <param name="trainingItemID">培训计划ID</param>
        /// <param name="courseIDArray">要添加的课程ID数组（GUID）</param>
        public void BatchAdd(Guid PlanID, Guid[] courseIDArray, int TrainingModelID, int TeachModelID, decimal BudgetFee, int CreateUserID, string CreateUser)
        {
            foreach (Guid courseID in courseIDArray)
            {
                Tr_PlanCourse entity = new Tr_PlanCourse();
                entity.PlanCourseID = System.Guid.NewGuid();
                entity.CourseID = courseID;
                entity.PlanID = PlanID;
                entity.CourseStatus =true;
                entity.TrainingModelID = TrainingModelID;
                entity.TeachModelID = TeachModelID;
                entity.BudgetFee = BudgetFee;
                
                //hzf2012-10-19加
                entity.CreateUserID = CreateUserID;
                entity.CreateUser = CreateUser;
                entity.CreateTime = System.DateTime.Now;
                entity.ModifyUser = CreateUser;
                entity.ModifyTime = System.DateTime.Now;

                try
                {
                    //如果添加不成功，继续添加下一条
                    DAL.Add(entity);
                }
                catch
                {
                }
            }
        }

        #endregion



        #region 数据查询


        //字段等于查询条件模板
        private static string fieldEqualModal = " AND ([{0}].[{1}] = '{2}') ";



        /// <summary>
        /// 查询某个培训计划尚未选择的课程列表
        /// from Res_Course
        /// </summary>
        /// <param name="orgID">组织机构ID</param>
        /// <param name="planID">培训计划ID</param>
        /// <param name="pageIndex">起始页</param>
        /// <param name="pageSize">每页的记录数</param>
        /// <param name="sortExpression">排序方式</param>
        /// <param name="criteria">与 AND 开头的查询条件</param>
        /// <param name="totalRecords">返回总的满足条件的记录数</param>
        /// <returns>DataTable</returns>
        public DataTable GetNoSelectCourseListByPlanID(int orgID, Guid planID, int pageIndex, int pageSize, string sortExpression, string criteria, out int totalRecords)
        {
            string sqlModalNoSelectCourse = @"
                select 
                    Res_Course.*
                    from vw_Res_OrgCourse Res_Course 
                    where Res_Course.CourseStatus='1' --课程状态为“启用”
                        and Res_Course.OrgID='{0}'
                        and Res_Course.CourseModel = 1 
                        and Res_Course.CourseID not in (
                            select b.CourseID
                            from Tr_PlanCourse b
                            inner join Tr_Plan c on c.PlanID=b.PlanID
                            where b.PlanID ='{1}')
                        {2} ";
            string sql = string.Format(sqlModalNoSelectCourse, orgID, planID, criteria);
            if (sortExpression == "")
                sortExpression = " order by Res_Course.CourseName ";
            return GetData.GetPagedListFromSQL(sql, pageIndex, pageSize, sortExpression, out totalRecords);
        }



        /// <summary>
        /// 获取某个培训计划的课程列表
        /// </summary>
        /// <param name="planID">培训计划ID</param>
        /// <param name="pageIndex">起始页</param>
        /// <param name="pageSize">每页的记录数</param>
        /// <param name="totalRecords">返回总的满足条件的记录数</param>
        /// <returns>DataTable</returns>
        /// <returns></returns>
        public DataTable GetPlanCourseListByPlanID(Guid planID, int pageIndex, int pageSize, string criteria, out int totalRecords)
        {
            //培训计划课程列表查询语句，
            string sqlModal = @"select 
                Tr_Plan.PlanCode, Tr_Plan.PlanName,Tr_Plan.PlanStatus,Tr_Plan.PlanBeginTime,Tr_Plan.PlanEndTime
                ,Res_Course.CourseCode, Res_Course.CourseName,Res_Course.CourseTypeID,Res_Course.ThumbnailURL
                ,Tr_PlanCourse.*
                from Tr_PlanCourse
                inner join Res_Course on Res_Course.CourseID = Tr_PlanCourse.CourseID
                inner join Tr_Plan on Tr_Plan.PlanID = Tr_PlanCourse.PlanID
                where 1=1 {0}  ";
            string orderBySQL = "order by Tr_PlanCourse.CreateTime DESC";
            criteria += string.Format(fieldEqualModal, "Tr_PlanCourse", "PlanID", planID);
            string sql = string.Format(sqlModal, criteria);
            return GetData.GetPagedListFromSQL(sql, pageIndex, pageSize, orderBySQL, out totalRecords);
        }



        /// <summary>
        /// 获取培训计划下的所有课程列表
        /// 默认按创建时间倒序排序
        /// </summary>
        /// <param name="planID">培训计划ID</param>
        /// <returns>DataTable</returns>
        public DataTable GetPlanCourseListByPlanID(Guid planID)
        {
            int totalRecords = 0;
            return GetPlanCourseListByPlanID(planID, 1, int.MaxValue - 1000,"", out  totalRecords);

        }



        /// <summary>
        /// 获取培训计划的所有课程信息列表
        ///FROM Tr_PlanCourse a 
        ///inner join Tr_Plan c on c.PlanID = a.PlanID
        ///inner join Res_Course e on e.CourseID = a.CourseID
        ///left join Tr_OuterOrg b on b.OuterOrgID = a.OuterOrgID
        /// </summary>
        /// <param name="pageIndex">起始页</param>
        /// <param name="pageSize">每页的记录数</param>
        /// <param name="sortExpression">排序方式</param>
        /// <param name="criteria">以 AND 打头的查询条件</param>
        /// <param name="totalRecords">所有满足条件的记录数</param>
        public DataTable GetPlanCourseALLInfoList(int pageIndex, int pageSize, string sortExpression, string criteria, out int totalRecords)
        {
            return DAL.GetPlanCourseALLInfoList(pageIndex, pageSize, sortExpression, criteria, out  totalRecords);
        }



        /// <summary>
        /// 获取某个培训计划的所有课程信息列表
        ///FROM Tr_PlanCourse a 
        ///inner join Tr_Plan c on c.PlanID = a.PlanID
        ///inner join Res_Course e on e.CourseID = a.CourseID
        ///left join Tr_OuterOrg b on b.OuterOrgID = a.OuterOrgID
        /// </summary>
        /// <param name="planID">培训计划ID</param>
        /// <param name="pageIndex">起始页</param>
        /// <param name="pageSize">每页的记录数</param>
        /// <param name="sortExpression">排序方式</param>
        /// <param name="criteria">以 AND 打头的查询条件</param>
        /// <param name="totalRecords">所有满足条件的记录数</param>
        public DataTable GetPlanCourseALLInfoListByPlanID(Guid planID, int pageIndex, int pageSize, string sortExpression, string criteria, out int totalRecords)
        {
            criteria += string.Format(" AND c.PlanID='{0}'", planID);
            return GetPlanCourseALLInfoList(pageIndex, pageSize, sortExpression, criteria, out  totalRecords);
        }







        #endregion







    }


}

