//==================================================================================================
//Version 1.0, auto-generated.
//Generated By xueyb.
//Date: 2012-4-17 9:20:28.
//==================================================================================================
//==================================================================================================
//This file is generated by CodeGenerator(Ver 2.1), a product of ZhouYonghua(Zhou_Yonghua@163.com).
//==================================================================================================

using System;
using System.Data;

using ETMS.AppContext;
using ETMS.Utility.Logging;
using ETMS.Components.Basic.API.Entity.TrainingPlan;

namespace ETMS.Components.Basic.Implement.BLL.TrainingPlan
{
    /// <summary>
    /// 培训计划表业务逻辑
    /// 黄中福2012－04－17
    /// </summary>
    public partial class Tr_PlanLogic
    {


        #region 业务操作方法，如：添加、修改、删除、审核等


        /// <summary>
        /// 培训计划保存
        /// </summary>
        /// <param name="entity">培训计划实体</param>
        /// <param name="action">操作方法：添加或者删除</param>
        public void Save(Tr_Plan entity, OperationAction action)
        {
            try
            {
                if (action == OperationAction.Add)
                    Add(entity);
                else if (action == OperationAction.Edit)
                    Update(entity);
            }
            catch (System.Data.SqlClient.SqlException ex)
            {
                string errorMsg = ex.Message;
                //枚举数据约束异常并转换为业务异常
                if (errorMsg.IndexOf("Index_U_PlanCode", StringComparison.InvariantCultureIgnoreCase) != -1)
                {
                    throw new ETMS.AppContext.BusinessException("该培训计划的编码已经存在，请修改！");
                }
                else if (errorMsg.IndexOf("Index_U_PlanName", StringComparison.InvariantCultureIgnoreCase) != -1)
                {
                    throw new ETMS.AppContext.BusinessException("该培训计划的名称已经存在，请修改");
                }
                else if (errorMsg.IndexOf("Index_PK_Tr_Plan", StringComparison.InvariantCultureIgnoreCase) != -1)
                {
                    throw new ETMS.AppContext.BusinessException("计划的主键重复！");
                }
                //如果仍未处理，则抛出
                throw ex;
            }
        }



        /// <summary>
        /// 删除
        /// </summary>
        protected void doRemove(Guid planID)
        {
            try
            {
                DAL.Remove(planID);
                //记录删除日志（根据ID删除）
                BizLogHelper.Operate(planID, "删除");
            }
            catch (System.Data.SqlClient.SqlException ex)
            {
                string errorMsg = ex.Message.ToUpper();
                //枚举数据约束异常并转换为业务异常，数据已经使用
                if (errorMsg.IndexOf("FK_TR_PLANC_REFERENCE_TR_PLAN", StringComparison.InvariantCultureIgnoreCase) != -1)
                {
                    throw new ETMS.AppContext.BusinessException("该培训计划已经设置有“课程”，不能删除！");
                }
                else if (errorMsg.IndexOf("FK_TR_ITEM_REFERENCE_TR_PLAN", StringComparison.InvariantCultureIgnoreCase) != -1)
                {
                    throw new ETMS.AppContext.BusinessException("该培训计划已经设置有“培训项目”，不能删除！");
                }

                //如果仍未处理，则抛出
                throw ex;
            }
        }


        /// <summary>
        /// 设置培训计划的使用状态:1启用 0停用 
        /// </summary>
        /// <param name="planID">培训项目课程ID</param>
        /// <param name="isUse">培训计划使用状态:  1启用 0停用</param>
        public void SetTrainingPlanStatus(Guid planID, int isUse)
        {
            //根据培训计划ID获取其具体信息
            Tr_Plan tr_Plan = GetById(planID);
            //判断计划的使状态是否发生改变
            if (tr_Plan.IsUse != isUse)
            {
                //如果改变，则修改
                tr_Plan.IsUse = isUse;
                Update(tr_Plan);
            }
        }


        /// <summary>
        /// 审核某个培训计划
        /// </summary>
        /// <param name="planID">培训计划ID</param>
        /// <param name="planStatus">审核结果（20：审核通过，40：审核不通过）</param>
        /// <param name="auditUser">审核人</param>
        /// <param name="auditOpinion">审核意见</param>
        public void Tr_Plan_Audit(Guid planID, int planStatus, string auditUser, string auditOpinion)
        {
            try
            {
                DAL.Tr_Plan_Audit(planID, planStatus, auditUser, auditOpinion);
            }
            catch (System.Data.SqlClient.SqlException ex)
            {
                throw new ETMS.AppContext.BusinessException(ex.Message);
            }

        }

        /// <summary>
        /// 取消审核某个培训计划
        /// </summary>
        /// <param name="planID">培训计划ID</param>
        /// <param name="auditUser">审核人</param>
        /// <param name="auditOpinion">审核意见</param>
        public void Tr_Plan_CancelAudit(Guid planID, string auditUser, string auditOpinion)
        {
            try
            {
                DAL.Tr_Plan_CancelAudit(planID, auditUser, auditOpinion);
            }
            catch (System.Data.SqlClient.SqlException ex)
            {
                throw new ETMS.AppContext.BusinessException(ex.Message);
            }
        }



        /// <summary>
        /// 归档某个培训计划
        /// </summary>
        /// <param name="planID">培训计划ID</param>
        /// <param name="planEndModeID">归档方式（1:正常结束,2:异常结束,3:审核通过结束,4:审核不通过结束）</param>
        /// <param name="planEndReMark">归档备注</param>
        /// <param name="modifyUser">归档人</param>
        public void Tr_Plan_Achive(Guid planID, int planEndModeID, string planEndReMark, string modifyUser)
        {
            try
            {
                DAL.Tr_Plan_Achive(planID, planEndModeID, planEndReMark, modifyUser);
            }
            catch (System.Data.SqlClient.SqlException ex)
            {
                throw new ETMS.AppContext.BusinessException(ex.Message);
            }
        }




        #endregion


        #region 数据查询


        /// <summary>
        /// 获取某培训计划下的所有课程数量
        /// </summary>
        /// <param name="planID">培训计划ID</param>
        /// <returns></returns>
        public int GetPlanCourseTotal(Guid planID)
        {
            return DAL.GetPlanCourseTotal( planID);
        }



        /// <summary>
        /// 获取某个组织机构的所有培训计划列表
        /// </summary>
        /// <param name="orgID">组织机构ID</param>
        /// <param name="pageIndex">起始页</param>
        /// <param name="pageSize">每页的记录数</param>
        /// <param name="sortExpression">排序方式</param>
        /// <param name="criteria">与 AND 开头的查询条件</param>
        /// <param name="totalRecords">返回总的满足条件的记录数</param>
        /// <returns>DataTable</returns>
        public DataTable GetPlanListByOrgID(int orgID, int pageIndex, int pageSize, string sortExpression, string criteria, out int totalRecords)
        {
            return DAL.GetPlanListByOrgID(orgID, pageIndex, pageSize, sortExpression, criteria, out  totalRecords);
        }


        #endregion





    }


}

