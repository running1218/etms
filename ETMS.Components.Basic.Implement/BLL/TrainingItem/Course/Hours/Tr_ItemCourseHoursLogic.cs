//==================================================================================================
//Version 1.0, auto-generated.
//Generated By huangzhf.
//Date: 2012-4-20 22:20:18.
//==================================================================================================
//==================================================================================================
//This file is generated by CodeGenerator(Ver 2.1), a product of ZhouYonghua(Zhou_Yonghua@163.com).
//==================================================================================================

using System;
using System.Data;

using ETMS.AppContext;
using ETMS.Utility.Logging;

using ETMS.Components.Basic.API.Entity.Teacher;
using ETMS.Components.Basic.Implement.BLL.Teacher;

using ETMS.Components.Basic.API.Entity.TrainingItem.Course.Hours;

//引用费用组件，用来获取课酬
using ETMS.Components.Basic.API;

namespace ETMS.Components.Basic.Implement.BLL.TrainingItem.Course.Hours
{
    /// <summary>
    /// 培训项目课程课时安排表业务逻辑
    /// </summary>
    public partial class Tr_ItemCourseHoursLogic
    {

        #region 操作方法




        /// <summary>
        /// 保存操作
        /// </summary>
        public void Save(Tr_ItemCourseHours tr_ItemCourseHours, OperationAction action)
        {
            try
            {
                //取讲师的课酬标准
                Site_TeacherLogic teacherLogic = new Site_TeacherLogic();
                Site_Teacher site_Teacher = teacherLogic.GetById(tr_ItemCourseHours.TeacherID);
                switch (site_Teacher.TeacherSourceID)
                {
                    case 1://内部讲师
                        //通过费用接口提供的相应方法获取课酬标准
                        IFeeFacade feeFacade = ETMS.AppContext.ApplicationContext.Current.ComponentRepository.GetBizComponentByID<IFeeFacade>();

                        tr_ItemCourseHours.CourseFee = feeFacade.GetCourseFee(tr_ItemCourseHours.TrainingTimeDescID, site_Teacher.TeacherLevelID);
                        break;
                    case 2://外部讲师
                        tr_ItemCourseHours.CourseFee = site_Teacher.ClassReward;//取到外部讲师的课酬，作为该讲师的课时的课酬标准
                        break;
                    default:
                        break;
                }



                if (action == OperationAction.Add)
                {
                    if (CheckHoursIsUsedByClassRoom(tr_ItemCourseHours.ClassRoomID, tr_ItemCourseHours.TrainingBeginTime))
                    {
                        throw new ETMS.AppContext.BusinessException("该教室在这时间段已经被别的课时使用，不能添加，请修改！");
                    }
                    if (CheckHoursIsUsedByTeacher(tr_ItemCourseHours.TeacherID, tr_ItemCourseHours.TrainingBeginTime))
                    {
                        throw new ETMS.AppContext.BusinessException("该讲师在这时间段已经被别的课时使用，不能添加，请修改！");
                    }
                    //添加
                    Add(tr_ItemCourseHours);
                }
                else if (action == OperationAction.Edit)
                {
                    if (CheckHoursIsUsedByClassRoom(tr_ItemCourseHours.ItemCourseHoursID, tr_ItemCourseHours.ClassRoomID, tr_ItemCourseHours.TrainingBeginTime, tr_ItemCourseHours.TrainingEndTime))
                    {
                        throw new ETMS.AppContext.BusinessException("该教室在这时间段已经被别的课时使用，不能保存！");
                    }
                    if (CheckHoursIsUsedByTeacher(tr_ItemCourseHours.ItemCourseHoursID, tr_ItemCourseHours.TeacherID, tr_ItemCourseHours.TrainingBeginTime, tr_ItemCourseHours.TrainingEndTime))
                    {
                        throw new ETMS.AppContext.BusinessException("该讲师在这时间段已经被别的课时使用，不能保存！");
                    }
                    //修改
                    Update(tr_ItemCourseHours);
                }
            }
            catch (System.Data.SqlClient.SqlException ex)
            {
                //枚举数据约束异常并转换为业务异常
                if (ex.Message.IndexOf("Index_U_Tr_ItemCourseHoursCode", StringComparison.InvariantCultureIgnoreCase) != -1)
                {
                    throw new ETMS.AppContext.BusinessException("TrainingItem.Course.Hours.Tr_ItemCourseHours.CodeExists");
                }
                else if (ex.Message.IndexOf("Index_U_Tr_ItemCourseHoursName", StringComparison.InvariantCultureIgnoreCase) != -1)
                {
                    throw new ETMS.AppContext.BusinessException("TrainingItem.Course.Hours.Tr_ItemCourseHours.NameExists");
                }
                //如果仍未处理，则抛出
                throw ex;
            }
        }

        /// <summary>
        /// 删除
        /// </summary>
        protected void doRemove(Guid itemCourseHoursID)
        {
            try
            {
                //从数据库查询最新的课时信息
                Tr_ItemCourseHours tr_ItemCourseHours = DAL.GetById(itemCourseHoursID);
                if (tr_ItemCourseHours.PayStatus == 1)
                {
                    throw new ETMS.AppContext.BusinessException("该课时的课酬已经支付，不能删除！");
                }
                DAL.Remove(itemCourseHoursID);
                //记录删除日志（根据ID删除）
                BizLogHelper.Operate(itemCourseHoursID, "删除");
            }
            catch (System.Data.SqlClient.SqlException ex)
            {
                string errorMsg = ex.Message.ToUpper();
                if (errorMsg.IndexOf("FK_TR_ITEMC_REFERENCE_TR_ITEMC", StringComparison.InvariantCultureIgnoreCase) != -1)
                {
                    throw new ETMS.AppContext.BusinessException("该课时已经设置有“学员”，不能删除！");
                }
                throw ex;
            }
        }

        #endregion


        #region 查询方法


        /// <summary>
        /// 根据培训项目课程ID获取其课时总和
        /// </summary>
        /// <param name="trainingItemCourseID">培训项目课程ID</param>
        /// <returns>返回:课时总和</returns>
        public int GetItemCourseHourseTotal(Guid trainingItemCourseID)
        {
            return DAL.GetItemCourseHourseTotal(trainingItemCourseID);
        }


        /// <summary>
        /// 验证某个教室是否已经被别的课时使用
        /// </summary>
        /// <param name="classRoomID">教室ID</param>
        /// <param name="beginTime">时间</param>
        /// <returns></returns>
        public bool CheckHoursIsUsedByClassRoom(Guid classRoomID, DateTime beginTime)
        {
            return DAL.CheckHoursIsUsedByClassRoom(classRoomID, beginTime);
        }


        /// <summary>
        /// 验证某个教室是否已经被别的课时使用:修改时候使用
        /// </summary>
        /// <param name="itemCourseHoursID">当前修改的课时ID</param>
        /// <param name="classRoomID">教室ID</param>
        /// <param name="beginTime">开始时间</param>
        /// <param name="endTime">结束时间</param>
        /// <returns></returns>
        public bool CheckHoursIsUsedByClassRoom(Guid itemCourseHoursID, Guid classRoomID, DateTime beginTime, DateTime endTime)
        {
            return DAL.CheckHoursIsUsedByClassRoom(itemCourseHoursID, classRoomID, beginTime, endTime);
        }

        /// <summary>
        /// 验证某个讲师是否已经被别的课时使用:添加时候使用
        /// </summary>
        /// <param name="teacherID">讲师ID</param>
        /// <param name="beginTime">时间</param>
        /// <returns></returns>
        public bool CheckHoursIsUsedByTeacher(int teacherID, DateTime beginTime)
        {
            return DAL.CheckHoursIsUsedByTeacher(teacherID, beginTime);
        }

        /// 验证某个讲师是否已经被别的课时使用:“修改”时候使用
        /// </summary>
        /// <param name="itemCourseHoursID">当前修改的课时ID</param>
        /// <param name="teacherID">讲师ID</param>
        /// <param name="beginTime">时间</param>
        /// <returns></returns>
        public bool CheckHoursIsUsedByTeacher(Guid itemCourseHoursID, int teacherID, DateTime beginTime, DateTime endTime)
        {
            return DAL.CheckHoursIsUsedByTeacher(itemCourseHoursID, teacherID, beginTime, endTime);
        }


        /// <summary>
        /// 获取培训项目课程的课时安排列表
        /// 默认按a.TrainingDate desc,a.TrainingBeginTime desc排序
        /// </summary>
        /// <param name="pageIndex">起始页</param>
        /// <param name="pageSize">每页的记录数</param>
        /// <param name="sortExpression">排序方式</param>
        /// <param name="criteria">以 AND 打头的查询条件</param>
        /// <param name="totalRecords">所有满足条件的记录数</param>
        public DataTable GetItemCourseHoursALLInfoList(int pageIndex, int pageSize, string sortExpression, string criteria, out int totalRecords)
        {
            if (sortExpression == "")                sortExpression = " a.TrainingDate desc,a.TrainingBeginTime desc ";
            return DAL.GetItemCourseHoursALLInfoList(pageIndex, pageSize, sortExpression, criteria, out  totalRecords);
        }

        /// <summary>
        /// 获取某个培训项目课程的课时安排列表
        /// </summary>
        /// <param name="trainingItemCourseID">培训项目课程ID</param>
        /// <param name="pageIndex">起始页</param>
        /// <param name="pageSize">每页的记录数</param>
        /// <param name="sortExpression">排序方式</param>
        /// <param name="criteria">以 AND 打头的查询条件</param>
        /// <param name="totalRecords">所有满足条件的记录数</param>
        public DataTable GetItemCourseHoursListByTrainingItemCourseID(Guid trainingItemCourseID, int pageIndex, int pageSize, string sortExpression, string criteria, out int totalRecords)
        {
            criteria += string.Format(" AND a.TrainingItemCourseID = '{0}'", trainingItemCourseID);
            return GetItemCourseHoursALLInfoList(pageIndex, pageSize, sortExpression, criteria, out  totalRecords);
        }



        /// <summary>
        /// 获取培训项目课程课时的没有选择的学员列表
        /// 	from dbo.Sty_StudentCourse a 
        /// 	inner join dbo.Sty_StudentSignup b on a.StudentSignupID=b.StudentSignupID
        /// 	inner join dbo.vw_ValidStudent u on u.UserID=b.UserID
        /// 	left join Sty_ClassStudent c on c.StudentSignupID = b.StudentSignupID
        /// 	left join Sty_Class d on d.ClassID = c.ClassID
        /// </summary>
        /// <param name="itemCourseHoursID">培训项目课程课时ID</param>
        /// <param name="pageIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="sortExpression"></param>
        /// <param name="criteria"></param>
        /// <param name="totalRecords"></param>
        /// <returns></returns>
        public DataTable GetItemCourseHours_GetNoSelectStudentLis(Guid itemCourseHoursID, int pageIndex, int pageSize, string sortExpression, string criteria, out int totalRecords)
        {
            return DAL.GetItemCourseHours_GetNoSelectStudentLis(itemCourseHoursID, pageIndex, pageSize, sortExpression, criteria, out  totalRecords);
        }



        /// <summary>
        /// 审核某个课时的状态，即“课时执行结果”
        /// </summary>
        /// <param name="itemCourseHoursID">培训项目课程课时ID</param>
        /// <param name="courseHoursStatusID">课时状态（执行结果）（0：未设置，1：已执行，2：未执行）</param>
        /// <param name="modifyUser">操作人</param>
        /// <param name="courseHoursStatusDesc">课时执行说明</param>
        public void ItemCourseHours_HoursAudit(Guid itemCourseHoursID, int courseHoursStatusID, string modifyUser, string courseHoursStatusDesc)
        {
            DAL.ItemCourseHours_HoursAudit(itemCourseHoursID, courseHoursStatusID, modifyUser, courseHoursStatusDesc);
        }



        #endregion






    }


}

