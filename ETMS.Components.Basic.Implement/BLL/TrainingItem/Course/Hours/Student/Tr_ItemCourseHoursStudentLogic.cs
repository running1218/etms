//==================================================================================================
//Version 1.0, auto-generated.
//Generated By huangzhf.
//Date: 2012-4-23 21:23:01.
//==================================================================================================
//==================================================================================================
//This file is generated by CodeGenerator(Ver 2.1), a product of ZhouYonghua(Zhou_Yonghua@163.com).
//==================================================================================================

using System;
using System.Data;

using ETMS.AppContext;
using ETMS.Utility.Logging;
using ETMS.Components.Basic.API.Entity.TrainingItem.Course.Hours.Student;
namespace ETMS.Components.Basic.Implement.BLL.TrainingItem.Course.Hours.Student
{
    /// <summary>
    /// 培训项目课程课时学员表业务逻辑
    /// </summary>
    public partial class Tr_ItemCourseHoursStudentLogic
    {
        #region 业务操作


        /// <summary>
        /// 保存操作
        /// </summary>
        public void Save(Tr_ItemCourseHoursStudent tr_ItemCourseHoursStudent, OperationAction action)
        {
            try
            {
                if (action == OperationAction.Add)
                {
                    //添加
                    Add(tr_ItemCourseHoursStudent);
                }
                else if (action == OperationAction.Edit)
                {
                    //修改
                    Update(tr_ItemCourseHoursStudent);
                }

            }
            catch (System.Data.SqlClient.SqlException ex)
            {
                //枚举数据约束异常并转换为业务异常
                if (ex.Message.IndexOf("Index_U_Tr_ItemCourseHoursStudentCode", StringComparison.InvariantCultureIgnoreCase) != -1)
                {
                    throw new ETMS.AppContext.BusinessException("TrainingItem.Course.Hours.Student.Tr_ItemCourseHoursStudent.CodeExists");
                }
                else if (ex.Message.IndexOf("Index_U_Tr_ItemCourseHoursStudentName", StringComparison.InvariantCultureIgnoreCase) != -1)
                {
                    throw new ETMS.AppContext.BusinessException("TrainingItem.Course.Hours.Student.Tr_ItemCourseHoursStudent.NameExists");
                }
                //如果仍未处理，则抛出
                throw ex;
            }
        }

        /// <summary>
        /// 删除
        /// </summary>
        protected void doRemove(Guid itemCourseHoursStudentID)
        {
            try
            {
                Tr_ItemCourseHoursStudent entity = DAL.GetById(itemCourseHoursStudentID);
                if (entity.IsLeave)
                {
                    throw new ETMS.AppContext.BusinessException("该课时学员已经请假，不能删除！");
                }
                DAL.Remove(itemCourseHoursStudentID);
                //记录删除日志（根据ID删除）
                BizLogHelper.Operate(itemCourseHoursStudentID, "删除");
            }
            catch (System.Data.SqlClient.SqlException ex)
            {
                //枚举数据约束异常并转换为业务异常，数据已经使用
                if (ex.Message.IndexOf("FK_", StringComparison.InvariantCultureIgnoreCase) != -1)
                {
                    throw new ETMS.AppContext.BusinessException("TrainingItem.Course.Hours.Student.Tr_ItemCourseHoursStudent.DataUsed");
                }
                //如果仍未处理，则抛出
                throw ex;
            }
        }


        /// <summary>
        /// 批量添加学员到项目课程的课时
        /// </summary>
        /// <param name="itemCourseHoursID">项目课程课时ID</param>
        /// <param name="studentCourseIDArray">学生选课ID</param>
        /// <param name="createUserID">操作用户ID</param>
        /// <param name="createUser">操作用户名称</param>
        public void BatchAddStudentListToCourseHours(Guid itemCourseHoursID, Guid[] studentCourseIDArray, int createUserID, string createUser)
        {
            int noSuccessNum = 0;
            foreach (Guid studentCourseID in studentCourseIDArray)
            {
                try
                {
                    Tr_ItemCourseHoursStudent entity = new Tr_ItemCourseHoursStudent();
                    entity.ItemCourseHoursStudentID = System.Guid.NewGuid();
                    entity.ItemCourseHoursID = itemCourseHoursID;
                    entity.StudentCourse = studentCourseID;
                    entity.CreateTime = System.DateTime.Now;
                    entity.CreateUser = createUser;
                    entity.CreateUserID = createUserID;
                    Save(entity, OperationAction.Add);
                }
                catch
                {
                    noSuccessNum++;
                }
            }
            if (noSuccessNum > 0)
            {
                string errorMsg = "添加完毕：当前要添加的记录数为“{0}”个，有“{1}”个添加不成功，原因可能是这些学员已经被添加到该课时中，或者不是该课时对应课程的学员！";
                throw new ETMS.AppContext.BusinessException(string.Format(errorMsg, studentCourseIDArray.Length, noSuccessNum));
            }

        }





        /// <summary>
        /// 批量从项目课程课时删除学员
        /// </summary>
        /// <param name="itemCourseHoursStudentIDArray">要删除的培训项目课程课时学员ID数组</param>
        public void BatchDeleteStudentListFromCourseHours(Guid[] itemCourseHoursStudentIDArray)
        {
            int noSuccessNum = 0;
            foreach (Guid itemCourseHoursStudentID in itemCourseHoursStudentIDArray)
            {
                try
                {
                    doRemove(itemCourseHoursStudentID);
                }
                catch
                {
                    noSuccessNum++;
                }
            }
            if (noSuccessNum > 0)
            {
                string errorMsg = "删除完毕：当前要删除的记录数为“{0}”个，有“{1}”个删除不成功！！";
                throw new ETMS.AppContext.BusinessException(string.Format(errorMsg, itemCourseHoursStudentIDArray.Length, noSuccessNum));
            }

        }





        #endregion

        #region 数据查询

        /// <summary>
        /// 某个学员的的所有课时安排列表 
        /// </summary>
        /// <param name="studentID">学员ID</param>
        /// <returns></returns>
        public DataTable GetItemCourseHoursByStudentID(int studentID)
        {
            return DAL.GetItemCourseHoursByStudentID(studentID);
        }

 

        /// <summary>
        /// 某个培训项目课程课时安排的学员数
        /// </summary>
        /// <param name="itemCourseHoursID">培训项目课程课时安排ID</param>
        /// <returns></returns>
        public int GetItemCourseHoursStudentNumByItemCourseHoursID(Guid itemCourseHoursID)
        {
            return DAL.GetItemCourseHoursStudentNumByItemCourseHoursID( itemCourseHoursID);
        }


        /// <summary>
        /// 某个培训项目课程课时安排的学员列表
        /// </summary>
        /// <param name="itemCourseHoursID">培训项目课程课时安排ID</param>
        /// <returns></returns>
        public DataTable GetItemCourseHoursStudentByItemCourseHoursID(Guid itemCourseHoursID)
        {
            return DAL.GetItemCourseHoursStudentByItemCourseHoursID( itemCourseHoursID);
        }



        /// <summary>
        /// 查询所有的培训项目课程课时学员
        /// Pr_Tr_ItemCourseHoursStudent_GetALLInfoList
        /// </summary>
        /// <param name="pageIndex">起始页</param>
        /// <param name="pageSize">每页的记录数</param>
        /// <param name="sortExpression">排序方式</param>
        /// <param name="criteria">以 AND 打头的查询条件</param>
        /// <param name="totalRecords">所有满足条件的记录数</param>
        public DataTable GetItemCourseHoursStudentALLInfoList(int pageIndex, int pageSize, string sortExpression, string criteria, out int totalRecords)
        {
            return DAL.GetItemCourseHoursStudentALLInfoList(pageIndex, pageSize, sortExpression, criteria, out  totalRecords);
        }


        /// <summary>
        /// 查询某培训项目课程课时的学员
        /// Pr_Tr_ItemCourseHoursStudent_GetALLInfoList
        /// </summary>
        /// <param name="itemCourseHoursID">培训项目课程课时安排ID</param>
        /// <param name="pageIndex">起始页</param>
        /// <param name="pageSize">每页的记录数</param>
        /// <param name="sortExpression">排序方式</param>
        /// <param name="criteria">以 AND 打头的查询条件</param>
        /// <param name="totalRecords">所有满足条件的记录数</param>
        public DataTable GetItemCourseHoursStudentByItemCourseHoursID(Guid itemCourseHoursID,int pageIndex, int pageSize, string sortExpression, string criteria, out int totalRecords)
        {
            criteria += string.Format(" AND a.ItemCourseHoursID='{0}' ", itemCourseHoursID);
            return GetItemCourseHoursStudentALLInfoList(pageIndex, pageSize, sortExpression, criteria, out  totalRecords);
        }






        #endregion


        #region 学员请假
        /// <summary>
        /// 查询所有的培训项目课程课时有请假的学员
        /// FROM Tr_ItemCourseHoursStudent a
        /// INNER JOIN Tr_ItemCourseHours b on b.ItemCourseHoursID = a.ItemCourseHoursID
        /// INNER JOIN Tr_ItemCourse c on c.TrainingItemCourseID = b.TrainingItemCourseID
        /// INNER JOIN Tr_Item d on d.TrainingItemID = c.TrainingItemID
        /// INNER JOIN Res_Course e on e.CourseID = c.CourseID
        /// INNER JOIN Sty_StudentCourse f on f.StudentCourse = a.StudentCourse
        /// INNER JOIN Sty_StudentSignup g on g.StudentSignupID = f.StudentSignupID
        /// INNER JOIN Site_User u on u.UserID = g.UserID
        /// INNER JOIN Site_Student s on s.UserID = u.UserID
        /// </summary>
        /// <param name="pageIndex">起始页</param>
        /// <param name="pageSize">每页的记录数</param>
        /// <param name="sortExpression">排序方式</param>
        /// <param name="criteria">以 AND 打头的查询条件</param>
        /// <param name="totalRecords">所有满足条件的记录数</param>
        public DataTable GetItemCourseHoursLeaveStudent(int pageIndex, int pageSize, string sortExpression, string criteria, out int totalRecords)
        {
            criteria += " AND a.IsLeave = 1 ";
            return GetItemCourseHoursStudentALLInfoList(pageIndex, pageSize, sortExpression, criteria, out  totalRecords);
        }


   

        /// <summary>
        /// 获取某个学员的的所有课时安排列表 ,为学员请假用
        /// </summary>
        /// <param name="studentID">学员ID</param>
        /// <returns></returns>
        public DataTable GetItemCourseHoursByStudentIDToLeave(int studentID)
        {
            return DAL.GetItemCourseHoursByStudentIDToLeave(studentID);
        }




        /// <summary>
        /// 学员课时请假申请
        /// </summary>
        /// <param name="itemCourseHoursStudentID">培训项目课程课时学员ID</param>
        /// <param name="leaveReason">请假原因</param>
        public void ItemCourseHoursStudent_Leave(Guid itemCourseHoursStudentID, string leaveReason)
        {
            DAL.ItemCourseHoursStudent_Leave(itemCourseHoursStudentID, leaveReason);
        }


        /// <summary>
        /// 取消学员课时请假申请
        /// </summary>
        /// <param name="itemCourseHoursStudentID">培训项目课程课时学员ID</param>
        public void ItemCourseHoursStudent_LeaveCancel(Guid itemCourseHoursStudentID)
        {
            DAL.ItemCourseHoursStudent_LeaveCancel(itemCourseHoursStudentID);
        }



        /// <summary>
        /// 审核某个学员的课时请假
        /// </summary>
        /// <param name="itemCourseHoursStudentID">培训项目课程课时学员ID</param>
        /// <param name="auditStatus">审核结果（20：审核通过，40：审核不通过）</param>
        /// <param name="auditUser">审核人</param>
        /// <param name="auditOpinion">审核意见</param>
        public void ItemCourseHoursStudent_LeaveAudit(Guid itemCourseHoursStudentID, int auditStatus, string auditUser, string auditOpinion)
        {
            DAL.ItemCourseHoursStudent_LeaveAudit(itemCourseHoursStudentID, auditStatus, auditUser, auditOpinion);
        }



        /// <summary>
        /// 批量审核学员的课时请假
        /// </summary>
        /// <param name="itemCourseHoursStudentIDArray">培训项目课程课时学员ID数组</param>
        /// <param name="auditStatus">审核结果（20：审核通过，40：审核不通过）</param>
        /// <param name="auditUser">审核人</param>
        /// <param name="auditOpinion">审核意见</param>
        public void ItemCourseHoursStudent_LeaveAuditBatch(Guid[] itemCourseHoursStudentIDArray, int auditStatus, string auditUser, string auditOpinion)
        {
            int noSuccessNum = 0;
            foreach (Guid itemCourseHoursStudentID in itemCourseHoursStudentIDArray)
            {
                try
                {
                    ItemCourseHoursStudent_LeaveAudit(itemCourseHoursStudentID,  auditStatus,  auditUser,  auditOpinion);
                }
                catch
                {
                    noSuccessNum++;
                }
            }
            if (noSuccessNum > 0)
            {
                string errorMsg = "批量审核学员的课时请假：当前要审核的记录数为“{0}”个，有“{1}”个审核不成功！";
                throw new ETMS.AppContext.BusinessException(string.Format(errorMsg, itemCourseHoursStudentIDArray.Length, noSuccessNum));
            }
        }




        #endregion


        #region 学员签到


        /// <summary>
        /// 某个培训项目课程课时的学员统一签到为“正常签到”
        /// 如果有请假则不给他签到
        /// </summary>
        /// <param name="itemCourseHoursID">培训项目课程课时ID</param>
        /// <param name="modifyUser">操作员</param>
        /// <returns>统一签到成功的人数</returns>
        public int ItemCourseHoursStudent_SigninALL(Guid itemCourseHoursID, string modifyUser)
        {
            int signinNum = DAL.ItemCourseHoursStudent_SigninALL(itemCourseHoursID, modifyUser);
            if (signinNum > 0)
            {
                string msg = string.Format("全部签到成功：本次共正常签到学员“{0}”人！", signinNum);
                throw new ETMS.AppContext.BusinessException(msg);
            }
            return signinNum;

        }



        /// <summary>
        /// 全部取消某个培训项目课程课时的学员签到
        /// 如果有请假则不给他取消签到
        /// </summary>
        /// <param name="itemCourseHoursID">培训项目课程课时ID</param>
        /// <param name="modifyUser">操作员</param>
        /// <returns>统一取消签到的人数</returns>
        public int ItemCourseHoursStudent_CancelSigninALL(Guid itemCourseHoursID, string modifyUser)
        {
            int signinNum = DAL.ItemCourseHoursStudent_CancelSigninALL(itemCourseHoursID, modifyUser);
            if (signinNum > 0)
            {
                string msg = string.Format("全部取消签到成功：本次共取消签到学员“{0}”人！", signinNum);
                throw new ETMS.AppContext.BusinessException(msg);
            }
            return signinNum;

        }






        #endregion



    }
}

