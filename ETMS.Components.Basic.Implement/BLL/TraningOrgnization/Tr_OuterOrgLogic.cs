//==================================================================================================
//Version 1.0, auto-generated.
//Generated By running1218
//Date: 2012-4-1 14:09:48.
//==================================================================================================
//==================================================================================================
//This file is generated by CodeGenerator(Ver 2.1)
//==================================================================================================

using System;
using System.Collections.Generic;
using System.Linq;
using System.Data;
using ETMS.Utility;
using ETMS.Utility.Logging;
using ETMS.Components.Basic.API.Entity.TraningOrgnization;
using ETMS.Components.Basic.API;
namespace ETMS.Components.Basic.Implement.BLL.TraningOrgnization
{
    /// <summary>
    /// 外部培训机构表业务逻辑
    /// </summary>
    public partial class Tr_OuterOrgLogic
	{
 		/// <summary>
		/// 保存操作
		/// </summary>
		public void Save(Tr_OuterOrg tr_OuterOrg)
		{
            try
            {
			    if(tr_OuterOrg.OuterOrgID.IsEmpty())
                {
                    tr_OuterOrg.OuterOrgID = tr_OuterOrg.OuterOrgID.NewID();
                    Add(tr_OuterOrg);
                }
                else
                {
                    Update(tr_OuterOrg);
                }
            }
           catch (System.Data.SqlClient.SqlException ex)
            {
                //枚举数据约束异常并转换为业务异常
                if (ex.Message.IndexOf("Index_U_OuterOrgCode",StringComparison.InvariantCultureIgnoreCase) != -1)
                {
                    throw new ETMS.AppContext.BusinessException(BizErrorDefine.TraningOrgnization_Tr_OuterOrg_CodeExists);
                }
                else if (ex.Message.IndexOf("Index_U_OuterOrgName",StringComparison.InvariantCultureIgnoreCase) != -1)
                {
				    throw new ETMS.AppContext.BusinessException(BizErrorDefine.TraningOrgnization_Tr_OuterOrg_NameExists);
                }
                //如果仍未处理，则抛出
                throw ex;
            } 
		} 

        /// <summary>
		/// 删除
		/// </summary>
		public void doRemove(Guid outerOrgID)
		{
            try
            {
			     DAL.Remove(outerOrgID);
                 //记录删除日志（根据ID删除）
                 BizLogHelper.Operate(outerOrgID,"删除");
            }
           catch (System.Data.SqlClient.SqlException ex)
            {
                //枚举数据约束异常并转换为业务异常，数据已经使用
                if (ex.Message.IndexOf("FK_TR_ITEMC_REFERENCE_TR_OUTER", StringComparison.InvariantCultureIgnoreCase) != -1)
                {
                    throw new ETMS.AppContext.BusinessException(BizErrorDefine.TraningOrgnization_FK_TR_ITEMC_REFERENCE_TR_OUTER);
                }else
                if (ex.Message.IndexOf("FK_",StringComparison.InvariantCultureIgnoreCase) != -1)
                {
				    throw new ETMS.AppContext.BusinessException("TraningOrgnization.Tr_OuterOrg.DataUsed");
                } 
                //如果仍未处理，则抛出
                throw ex;
            }  
		}

        /// <summary>
        /// 获取外部培训机构列表
        /// </summary>
        /// <param name="orgID">培训机构编号</param>
        /// <returns></returns>
        public DataTable GetOutOrgList(int orgID)
        {
            return DAL.getList(orgID);
        }

        /// <summary>
        /// 培训组织结构列表
        /// </summary>
        /// <param name="pageIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="sortExpression"></param>
        /// <param name="criteria"></param>
        /// <param name="totalRecords"></param>
        /// <returns></returns>
        public List<Tr_OuterOrg> GetOuterOrgList(int pageIndex, int pageSize, string sortExpression, string criteria, out int totalRecords)
        {
            var source = GetPagedList(pageIndex, pageSize, sortExpression, criteria, out totalRecords).ToList<Tr_OuterOrg>();
            var orgTeacherSource = DAL.GetOuterOrgTeachers().ToList<Tr_OuterOrg>();
            foreach (var entity in source)
            {
                var outerOrg = orgTeacherSource.SingleOrDefault(f => f.OuterOrgID.Equals(entity.OuterOrgID));
                if (null != outerOrg)
                {
                    entity.TeacherNum = outerOrg.TeacherNum;
                }
            }

            return source;
        }

        /// <summary>
        /// 根据标识获取对象
        /// </summary>
        public Tr_OuterOrg GetOuterOrgById(Guid outerOrgID)
        {
             return DAL.GetById(outerOrgID);
        }
	}		
}

