//==================================================================================================
//Version 1.0, auto-generated.
//Generated By running1218
//Date: 2012-4-9 14:55:05.
//==================================================================================================
//==================================================================================================
//This file is generated by CodeGenerator(Ver 2.1)
//==================================================================================================

using System;
using System.Collections.Generic;
using ETMS.Utility;
using ETMS.Utility.Logging;
using ETMS.Components.Basic.API.Entity.Security;
namespace ETMS.Components.Basic.Implement.BLL.Security
{
    /// <summary>
    /// 系统配置业务逻辑
    /// </summary>
    public partial class Site_SysConfigLogic
    {
        /// <summary>
        /// 保存操作
        /// </summary>
        public void Save(Site_SysConfig site_SysConfig)
        {
            try
            {
                if (site_SysConfig.ConfigID.IsEmpty())
                {
                    //设置主键ID（仅类型为GUID有效，Int型则由数据库自增产生）
                    site_SysConfig.ConfigID = site_SysConfig.ConfigID.NewID(); ;
                    Add(site_SysConfig);
                }
                else
                {
                    Update(site_SysConfig);
                }
            }
            catch (System.Data.SqlClient.SqlException ex)
            {
                //枚举数据约束异常并转换为业务异常
                if (ex.Message.IndexOf("Index_U_Site_SysConfigCode", StringComparison.InvariantCultureIgnoreCase) != -1)
                {
                    throw new ETMS.AppContext.BusinessException("SysConfig.Site_SysConfig.CodeExists");
                }
                else if (ex.Message.IndexOf("Index_U_Site_SysConfigName", StringComparison.InvariantCultureIgnoreCase) != -1)
                {
                    throw new ETMS.AppContext.BusinessException("SysConfig.Site_SysConfig.NameExists");
                }
                //如果仍未处理，则抛出
                throw ex;
            }
        }

        /// <summary>
        /// 删除
        /// </summary>
        protected void doRemove(Int32 configID)
        {
            try
            {
                DAL.Remove(configID);
                //记录删除日志（根据ID删除）
                BizLogHelper.Operate(configID, "删除");
            }
            catch (System.Data.SqlClient.SqlException ex)
            {
                //枚举数据约束异常并转换为业务异常，数据已经使用
                if (ex.Message.IndexOf("FK_", StringComparison.InvariantCultureIgnoreCase) != -1)
                {
                    throw new ETMS.AppContext.BusinessException("SysConfig.Site_SysConfig.DataUsed");
                }
                //如果仍未处理，则抛出
                throw ex;
            }
        }

        /// <summary>
        /// 获取某个机构下配置组中配置项，如果机构下没有配置项，则默认取系统配置项
        /// </summary>
        /// <param name="organizationID">机构ID</param>
        /// <param name="configGroupID">配置组Id</param>
        /// <returns></returns>
        public IList<Site_SysConfig> GetOrganizationConfig(int organizationID, int configGroupID)
        {
            return DAL.GetOrganizationConfig(organizationID, configGroupID);
        }
    }


}

