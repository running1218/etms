//==================================================================================================
//Version 1.0, auto-generated.
//Generated By xueyb.
//Date: 2012/4/9 17:05:21.
//==================================================================================================
//==================================================================================================
//This file is generated by CodeGenerator(Ver 2.1), a product of ZhouYonghua(Zhou_Yonghua@163.com).
//==================================================================================================

using System;
using System.Collections.Generic;
using System.Linq;
using System.Transactions;
using System.Data;

using ETMS.AppContext;
using ETMS.Utility;
using ETMS.Utility.Logging;
using ETMS.Components.Basic.API.Entity.Teacher;
using ETMS.Components.Basic.Implement.BLL.Security;
using ETMS.Components.Basic.API.Entity.Security;
using ETMS.Components.Basic.API;
using ETMS.Components.Basic.API.Entity.TrainingItem;

namespace ETMS.Components.Basic.Implement.BLL.Teacher
{
    /// <summary>
    /// 讲师表业务逻辑
    /// </summary>
    public partial class Site_TeacherLogic
	{
        /// <summary>
        ///  批量添加内部讲师
        /// </summary>
        /// <param name="teacherIDList">内部讲师编号列表</param>
        public void SetInnerTeacher(int[] userIDs)
        {
            string userIDList = string.Empty;
            for (int i = 0; i < userIDs.Length; i++)
            {
                if (string.IsNullOrEmpty(userIDList))
                {
                    userIDList = userIDs[i].ToString();
                }
                else
                {
                    userIDList = string.Format("{0},{1}", userIDList, userIDs[i].ToString());
                }
            }
            DAL.SetInnerTeacher(userIDList, GetTeacherRole(), UserContext.Current.RealName);
        }

        /// <summary>
        /// 获取讲师角色ID
        /// </summary>
        /// <returns></returns>
        private int GetTeacherRole()
        {
            var roleNode = new RoleLogic().GetNodeByNodeCode(RoleLogic.LecturerdAminRoleCode);
            return roleNode == null ? 0 : roleNode.NodeID;
        }

        /// <summary>
        ///  批量添加内部讲师
        /// </summary>
        /// <param name="teacherIDList">内部讲师编号列表</param>
        public void SetInnerTeacher(string teacherIDList)
        {
            DAL.SetInnerTeacher(teacherIDList, GetTeacherRole(), UserContext.Current.RealName);
        }

        /// <summary>
        /// 获取内部讲师列表
        /// </summary>
        /// <param name="organizationID">组织机构编号</param>
        /// <param name="workerNo">工号</param>
        /// <param name="teacherName">教师姓名</param>
        /// <param name="teacherTypeID">教师类型</param>
        /// <param name="teacherLevelID">教师级别</param>
        /// <returns></returns>
        public DataTable GetInnerTeacherList(int organizationID, string workerNo, string teacherName, int teacherTypeID, int teacherLevelID, int isUse, int isCourseTeacher)
        {
            return DAL.GetInnerTeacherList(organizationID, workerNo,teacherName, teacherTypeID, teacherLevelID, isUse,isCourseTeacher);
        }

         /// <summary>
        /// 获取外聘讲师列表
        /// </summary>
        /// <param name="organizationID">组织机构编号</param>
        /// <param name="outerOrgID">外部组织机构编号</param>
        /// <param name="isUse">教师状态：1启用 0 停用</param>
        /// <param name="teacherLevelID">教师级别</param>
        /// <param name="RealName">教师姓名</param>
        /// <returns></returns>
        public DataTable GetOuterTeacherList(int organizationID, Guid outerOrgID, int isUse, int teacherLevelID, string RealName, int IsCollaborate)
        {
            return DAL.GetOuterTeacherList(organizationID, outerOrgID, isUse, teacherLevelID, RealName, IsCollaborate);
        }

        /// <summary>
        /// 获取所有讲师列表
        /// from Site_Teacher a
        /// inner join Site_User b on b.UserID=a.TeacherID
        /// </summary>
        public DataTable GetTeacherList(int pageIndex, int pageSize, string sortExpression, string criteria, out int totalRecords)
        {
            return DAL.GetTeacherList( pageIndex,  pageSize,  sortExpression,  criteria, out  totalRecords);
        }

        public void AddOutTeacher(Site_Teacher site_Teacher )
        { 
            
        }

        /// <summary>
        /// 删除
        /// </summary>
        protected void doRemove(Int32 teacherID)
        {
            try
            {
                DAL.Remove(teacherID);
                //记录删除日志（根据ID删除）
                BizLogHelper.Operate(teacherID, "删除");
            }
            catch (System.Data.SqlClient.SqlException ex)
            {
                //枚举数据约束异常并转换为业务异常，数据已经使用
                if (ex.Message.IndexOf("FK_", StringComparison.InvariantCultureIgnoreCase) != -1)
                {
                    throw new ETMS.AppContext.BusinessException(string.Format(BizErrorDefine.Teacher_DeleteFailed_TeacherIsUsing, new UserLogic().GetUserByID(teacherID).RealName));
                }
                //如果仍未处理，则抛出
                throw ex;
            }
        }  

        /// <summary>
        /// 保存操作
        /// </summary>
        public void Save(Site_Teacher site_Teacher)
        {
            try
            {
                 UserLogic userLogic = new UserLogic();
                if (site_Teacher.TeacherID.IsEmpty())
                {
                   
                    UserRoleRelationLogic userRoleRelationLogic = new UserRoleRelationLogic();
                    RoleLogic roleLogic = new RoleLogic();
                    
                    // 新增用户基本信息,用户状态为启用状态
                    site_Teacher.UserInfo.Status = site_Teacher.IsUse;
                    
                    using (TransactionScope scope = new TransactionScope())
                    {
                        // 新增用户基本信息,
                        userLogic.Save(site_Teacher.UserInfo);

                        if(site_Teacher.TeacherID == 0)
                            site_Teacher.TeacherID = site_Teacher.UserInfo.UserID;
                        site_Teacher.CreateTime = DateTime.Now;
                        site_Teacher.CreateUser = UserContext.Current.RealName;
                        site_Teacher.CreateUserID = UserContext.Current.UserID;
                        // 新增讲师信息
                        Add(site_Teacher);
                        
                        // 用户与角色关系
                        userRoleRelationLogic.Save(site_Teacher.UserInfo.UserID, roleLogic.GetNodeByNodeCode(RoleLogic.LecturerdAminRoleCode).NodeID.ToString(), site_Teacher.UserInfo.Creator);
                        scope.Complete();
                    }
                }
                else
                {
                    site_Teacher.ModifyTime = DateTime.Now;
                    site_Teacher.ModifyUser = UserContext.Current.RealName;
                    site_Teacher.UserInfo.Status = site_Teacher.IsUse;
                    userLogic.Save(site_Teacher.UserInfo);
                    Update(site_Teacher);
                }
            }
            catch (System.Data.SqlClient.SqlException ex)
            {
                //枚举数据约束异常并转换为业务异常
                if (ex.Message.IndexOf("Index_U", StringComparison.InvariantCultureIgnoreCase) != -1)
                {
                    throw new ETMS.AppContext.BusinessException(string.Format(BizErrorDefine.Teacher_AddFailed_TeacherCodeIsExists, site_Teacher.TeacherCode));
                }
                //如果仍未处理，则抛出
                throw ex;
            }
        }

        /// <summary>
        /// 前台登录时，判断是否讲师
        /// </summary>
        public Site_Teacher GetTeacherById(Int32 teacherID)
        {
            Site_Teacher site_Teacher = DAL.GetById(teacherID);
            return site_Teacher ?? new Site_Teacher();
        }	

        public List<Site_Teacher> GetTeachersByOrganization()
        {
            return DAL.GetTeachersByOrganization(UserContext.Current.OrganizationID).ToList<Site_Teacher>();
        }

        public List<Site_Teacher> GetTeachersByOrganization(string teacherCode, string teacherName, int pageIndex, int pageSize, out int totalRecords)
        {
            var source = DAL.GetAllTeachersByOrganization(UserContext.Current.OrganizationID).ToList<Site_Teacher>();
            source = source.Where(f => f.TeacherCode.Contains(teacherCode) & f.RealName.Contains(teacherName)).ToList();
            return source.PageList<Site_Teacher>(pageIndex, pageSize, out totalRecords);
        }
        
        /// <summary>
        /// 获取内部员工设为讲师列表
        /// </summary>
        /// <returns></returns>
        public DataTable GetInnerChoseTeacherList(int pageIndex, int pageSize, string sortExpression, string criteria, out int totalRecords)
        {
            return DAL.GetInnerChoseTeacherList(pageIndex, pageSize, sortExpression, criteria, out totalRecords);
        }

        #region 讲师综合查询
        /// <summary>
        /// 讲师综合查询列表
        /// </summary>
        /// <param name="teacherStatus"></param>
        /// <param name="teacherName"></param>
        /// <param name="teachCourse"></param>
        /// <param name="itemCourseBeginDate"></param>
        /// <param name="itemCourseEndDate"></param>
        /// <param name="pageIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRecords"></param>
        /// <returns></returns>
        public List<TeacherCourseMuiltyInfo> GetTeacherMuiltyInfoList(int teacherStatus, string teacherName, string teachCourse, DateTime itemCourseBeginDate, DateTime itemCourseEndDate, int pageIndex, int pageSize, out int totalRecords)
        {
            var cacheKey = string.Format("{0}_{1}_{2}_{3}_{4}", teacherStatus, teacherName, teachCourse, itemCourseBeginDate, itemCourseEndDate);
            var source = (List <TeacherCourseMuiltyInfo>) CacheHelper.Get(cacheKey);
            if (null == source)
            {
                source = DAL.GetTeacherMuiltyInfoList(teacherStatus, teacherName, teachCourse, itemCourseBeginDate, itemCourseEndDate, UserContext.Current.OrganizationID).ToList<TeacherCourseMuiltyInfo>();
                CacheHelper.Add(cacheKey, source, TimeSpan.FromMinutes(5));
            }
            return source.PageList<TeacherCourseMuiltyInfo>(pageIndex, pageSize, out totalRecords);
        }

        /// <summary>
        /// 讲师综合查询-培训项目列表
        /// </summary>
        /// <param name="teacherID"></param>
        /// <param name="itemCourseBeginDate"></param>
        /// <param name="itemCourseEndDate"></param>
        /// <param name="pageIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRecords"></param>
        /// <returns></returns>
        public List<Tr_Item> GetTeacherTraningItemList(int teacherID, DateTime itemCourseBeginDate, DateTime itemCourseEndDate, int pageIndex, int pageSize, out int totalRecords)
        {
            var cacheKey = string.Format("TeacherTraningItemList_{0}_{1}_{2}", teacherID, itemCourseBeginDate, itemCourseEndDate);
            var source = (List<Tr_Item>)CacheHelper.Get(cacheKey);
            if (null == source)
            {
                source = DAL.GetTeacherTraningItemList(teacherID, itemCourseBeginDate, itemCourseEndDate).ToList<Tr_Item>();
                CacheHelper.Add(cacheKey, source, TimeSpan.FromMinutes(5));
            }
            return source.PageList<Tr_Item>(pageIndex, pageSize, out totalRecords);
        }

        /// <summary>
        /// 讲师综合查询-培训项目课程列表
        /// </summary>
        /// <param name="teacherID"></param>
        /// <param name="itemCourseBeginDate"></param>
        /// <param name="itemCourseEndDate"></param>
        /// <param name="pageIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRecords"></param>
        /// <returns></returns>
        public List<TeacherTraniningItemCourseInfo> GetTeacherTraningItemCourseList(int teacherID, DateTime itemCourseBeginDate, DateTime itemCourseEndDate, int pageIndex, int pageSize, out int totalRecords)
        {
            var cacheKey = string.Format("TeacherTraningItemCourseList_{0}_{1}_{2}", teacherID, itemCourseBeginDate, itemCourseEndDate);
            var source = (List<TeacherTraniningItemCourseInfo>)CacheHelper.Get(cacheKey);
            if (null == source)
            {
                source = DAL.GetTraniningItemCourseList(teacherID, itemCourseBeginDate, itemCourseEndDate).ToList<TeacherTraniningItemCourseInfo>();
                CacheHelper.Add(cacheKey, source, TimeSpan.FromMinutes(5));
            }
            return source.PageList<TeacherTraniningItemCourseInfo>(pageIndex, pageSize, out totalRecords);
        }

        /// <summary>
        /// 讲师综合查询-培训项目课程课时列表
        /// </summary>
        /// <param name="teacherID"></param>
        /// <param name="itemCourseBeginDate"></param>
        /// <param name="itemCourseEndDate"></param>
        /// <param name="pageIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRecords"></param>
        /// <returns></returns>
        public List<TeacherTrainingItemCourseHoursInfo> GetTeacherTraningItemCourseHoursList(int teacherID, DateTime itemCourseBeginDate, DateTime itemCourseEndDate, int pageIndex, int pageSize, out int totalRecords)
        {
            var cacheKey = string.Format("TeacherTraningItemCourseHoursList_{0}_{1}_{2}", teacherID, itemCourseBeginDate, itemCourseEndDate);
            var source = (List<TeacherTrainingItemCourseHoursInfo>)CacheHelper.Get(cacheKey);
            if (null == source)
            {
                source = DAL.GetTraniningItemCourseHoursList(teacherID, itemCourseBeginDate, itemCourseEndDate).ToList<TeacherTrainingItemCourseHoursInfo>();
                CacheHelper.Add(cacheKey, source, TimeSpan.FromMinutes(5));
            }
            return source.PageList<TeacherTrainingItemCourseHoursInfo>(pageIndex, pageSize, out totalRecords);
        }

        #endregion

        /// <summary>
        /// 删除
        /// </summary>
        public void Delete(Int32 userID)
        {
            try
            {
                DAL.Remove(userID);
                User user=new User();
                user.UserID=userID;
                UserLogic userLogic = new UserLogic();
                userLogic.Remove(user);
                //记录删除日志（根据ID删除）
                BizLogHelper.Operate(userID, "删除");
            }
            catch (System.Data.SqlClient.SqlException ex)
            {
                string errorMsg = ex.Message.ToUpper();
                //枚举数据约束异常并转换为业务异常，数据已经使用
                if (errorMsg.IndexOf("FK_TR_ITEMC_REFERENCE_SITE_TEA2", StringComparison.InvariantCultureIgnoreCase) != -1)
                {
                    throw new ETMS.AppContext.BusinessException("该讲师已经有“培训项目课程”的课时安排，不能删除！");
                }
                else if (errorMsg.IndexOf("FK_TR_ITEMC_REFERENCE_SITE_TEA", StringComparison.InvariantCultureIgnoreCase) != -1)
                {
                    throw new ETMS.AppContext.BusinessException("该讲师已经是某个“培训项目课程”的讲师，不能删除！");
                }
                else if (errorMsg.IndexOf("FK_TR_ITEMC_REFERENCE_SITE_TEA3", StringComparison.InvariantCultureIgnoreCase) != -1)
                {
                    throw new ETMS.AppContext.BusinessException("该讲师已经有“培训项目课程”的导学资料，不能删除！");
                }
                else if (errorMsg.IndexOf("FK_RES_TEAC_REFER_SITE_TEA", StringComparison.InvariantCultureIgnoreCase) != -1)
                {
                    throw new ETMS.AppContext.BusinessException("该讲师已经是某个“课程“的讲师，不能删除！");
                }
                else if (errorMsg.IndexOf("FK_FEE_TEAC_REFERENCE_SITE_TEA", StringComparison.InvariantCultureIgnoreCase) != -1)
                {
                    throw new ETMS.AppContext.BusinessException("该讲师已经设置有“课酬“，不能删除！");
                }
                else if (errorMsg.IndexOf("FK_RES_TEAC_REFERENCE_SITE_TEA2", StringComparison.InvariantCultureIgnoreCase) != -1)
                {
                    throw new ETMS.AppContext.BusinessException("该讲师已经设置有“开放范围”，不能删除！");
                }
                //如果仍未处理，则抛出
                throw ex;
            }
        }  
	}	
}

