//==================================================================================================
//Version 1.0, auto-generated.
//Generated By xueyb.
//Date: 2012-4-17 15:53:39.
//==================================================================================================
//==================================================================================================
//This file is generated by CodeGenerator(Ver 2.1), a product of ZhouYonghua(Zhou_Yonghua@163.com).
//==================================================================================================

using System;
using System.Collections.Generic;
using System.Data;

using System.Data.SqlClient;
using ETMS.Utility.Data;

using ETMS.Components.Poll.API.Entity;

namespace ETMS.Components.Poll.Implement.DAL
{

    /// <summary>
    /// 调查答案表数据访问
    /// </summary>
    public partial class Poll_AnswerResultDataAccess
    {
        /// <summary>
        /// 增加
        /// </summary>
        public void Add(Poll_AnswerResult poll_AnswerResult)
        {
            string commandName = "dbo.Pr_Poll_AnswerResult_Insert";
            #region Parameters
            SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSWrite, commandName);
            if (parms == null)
            {
                parms = new SqlParameter[] {	new SqlParameter("@AnswerResultID", SqlDbType.Int, 4, ParameterDirection.Output, false, 0, 0, String.Empty, DataRowVersion.Default, null),
				
					new SqlParameter("@TitleID", SqlDbType.Int),
					new SqlParameter("@Answer", SqlDbType.Text),
					new SqlParameter("@BatchID", SqlDbType.Int)
					};
                SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSWrite, commandName, parms);
            }

            parms[1].Value = poll_AnswerResult.TitleID;
            if (poll_AnswerResult.Answer != null) { parms[2].Value = poll_AnswerResult.Answer; } else { parms[2].Value = DBNull.Value; }
            parms[3].Value = poll_AnswerResult.BatchID;
            #endregion
            SqlHelper.ExecuteNonQuery(ConnectionString.ETMSWrite, CommandType.StoredProcedure, commandName, parms);

            poll_AnswerResult.AnswerResultID = (Int32)parms[0].Value;

        }

        /// <summary>
        /// 删除
        /// </summary>
        public void Remove(Int32 answerResultID)
        {
            string commandName = "dbo.Pr_Poll_AnswerResult_Delete";
            #region Parameters
            SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSWrite, commandName);
            if (parms == null)
            {
                parms = new SqlParameter[] {
					new SqlParameter("@AnswerResultID", SqlDbType.Int)
				};
                SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSWrite, commandName, parms);
            }

            parms[0].Value = answerResultID;

            #endregion
            SqlHelper.ExecuteNonQuery(ConnectionString.ETMSWrite, CommandType.StoredProcedure, commandName, parms);
        }

        /// <summary>
        /// 保存
        /// </summary>
        public void Save(Poll_AnswerResult poll_AnswerResult)
        {
            string commandName = "dbo.Pr_Poll_AnswerResult_Update";
            #region Parameters
            SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSWrite, commandName);
            if (parms == null)
            {
                parms = new SqlParameter[] {
					new SqlParameter("@AnswerResultID", SqlDbType.Int),
					new SqlParameter("@TitleID", SqlDbType.Int),
					new SqlParameter("@Answer", SqlDbType.Text),
					new SqlParameter("@BatchID", SqlDbType.Int)
				};
                SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSWrite, commandName, parms);
            }

            parms[0].Value = poll_AnswerResult.AnswerResultID;
            parms[1].Value = poll_AnswerResult.TitleID;
            if (poll_AnswerResult.Answer != null) { parms[2].Value = poll_AnswerResult.Answer; } else { parms[2].Value = DBNull.Value; }
            parms[3].Value = poll_AnswerResult.BatchID;
            #endregion
            SqlHelper.ExecuteNonQuery(ConnectionString.ETMSWrite, CommandType.StoredProcedure, commandName, parms);
        }

        /// <summary>
        /// 根据标识获取对象
        /// </summary>
        public Poll_AnswerResult GetById(Int32 answerResultID)
        {
            Poll_AnswerResult poll_AnswerResult = null;

            string commandName = "dbo.Pr_Poll_AnswerResult_GetByPK";
            #region Parameters
            SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSRead, commandName);
            if (parms == null)
            {
                parms = new SqlParameter[] {
					new SqlParameter("@AnswerResultID", SqlDbType.Int)
				};
                SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSRead, commandName, parms);
            }

            parms[0].Value = answerResultID;

            #endregion
            using (SqlDataReader dataReader = SqlHelper.ExecuteReader(ConnectionString.ETMSRead, CommandType.StoredProcedure, commandName, parms))
            {
                if (dataReader.Read())
                {
                    poll_AnswerResult = PopulatePoll_AnswerResultFromDataReader(dataReader);
                }
            }

            return poll_AnswerResult;
        }

        /// <summary>
        /// 根据参数获取对象列表（分页，可排序）
        /// </summary>
        public DataTable GetPagedList(int pageIndex, int pageSize, string sortExpression, string criteria, out int totalRecords)
        {
            string commandName = "dbo.Pr_Poll_AnswerResult_GetPagedList";
            #region Parameters
            SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSRead, commandName);
            if (parms == null)
            {
                parms = new SqlParameter[] {
					new SqlParameter("@PageIndex", SqlDbType.Int),
					new SqlParameter("@PageSize", SqlDbType.Int),
					new SqlParameter("@SortExpression", SqlDbType.VarChar),
					new SqlParameter("@Criteria", SqlDbType.VarChar),
					new SqlParameter("@ReturnValue", SqlDbType.Int, 4, ParameterDirection.ReturnValue, false, 0, 0, String.Empty, DataRowVersion.Default, null)
				};
                SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSRead, commandName, parms);
            }

            parms[0].Value = pageIndex;
            parms[1].Value = pageSize;
            parms[2].Value = sortExpression;
            parms[3].Value = criteria;
            #endregion
            DataTable dt = SqlHelper.ExecuteDataset(ConnectionString.ETMSRead, CommandType.StoredProcedure, commandName, parms).Tables[0];
            totalRecords = (int)parms[4].Value;
            return dt;
        }

        /// <summary>
        /// 根据参数获取对象列表（分页，可排序）
        /// </summary>
        public IList<Poll_AnswerResult> GetEntityList(int pageIndex, int pageSize, string sortExpression, string criteria, out int totalRecords)
        {
            IList<Poll_AnswerResult> list = new List<Poll_AnswerResult>();
            string commandName = "dbo.Pr_Poll_AnswerResult_GetPagedList";
            #region Parameters
            SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSRead, commandName);
            if (parms == null)
            {
                parms = new SqlParameter[] {
					new SqlParameter("@PageIndex", SqlDbType.Int),
					new SqlParameter("@PageSize", SqlDbType.Int),
					new SqlParameter("@SortExpression", SqlDbType.VarChar),
					new SqlParameter("@Criteria", SqlDbType.VarChar),
					new SqlParameter("@ReturnValue", SqlDbType.Int, 4, ParameterDirection.ReturnValue, false, 0, 0, String.Empty, DataRowVersion.Default, null)
				};
                SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSRead, commandName, parms);
            }

            parms[0].Value = pageIndex;
            parms[1].Value = pageSize;
            parms[2].Value = sortExpression;
            parms[3].Value = criteria;
            #endregion
            using (SqlDataReader dataReader = SqlHelper.ExecuteReader(ConnectionString.ETMSRead, CommandType.StoredProcedure, commandName, parms))
            {
                while (dataReader.Read())
                {
                    list.Add(PopulatePoll_AnswerResultFromDataReader(dataReader));
                }
            }
            totalRecords = (int)parms[4].Value;
            return list;
        }

        /// <summary>
        /// 从DataReader中读取数据到业务对象
        /// </summary>
        private Poll_AnswerResult PopulatePoll_AnswerResultFromDataReader(SqlDataReader reader)
        {
            Poll_AnswerResult poll_AnswerResult = new Poll_AnswerResult();

            int answerResultIDIndex = reader.GetOrdinal("AnswerResultID");
            if (!reader.IsDBNull(answerResultIDIndex))
            {
                poll_AnswerResult.AnswerResultID = reader.GetInt32(answerResultIDIndex);
            }

            int titleIDIndex = reader.GetOrdinal("TitleID");
            if (!reader.IsDBNull(titleIDIndex))
            {
                poll_AnswerResult.TitleID = reader.GetInt32(titleIDIndex);
            }

            int answerIndex = reader.GetOrdinal("Answer");
            if (!reader.IsDBNull(answerIndex))
            {
                poll_AnswerResult.Answer = reader.GetString(answerIndex);
            }

            int batchIDIndex = reader.GetOrdinal("BatchID");
            if (!reader.IsDBNull(batchIDIndex))
            {
                poll_AnswerResult.BatchID = reader.GetInt32(batchIDIndex);
            }

            return poll_AnswerResult;
        }
    }
}
