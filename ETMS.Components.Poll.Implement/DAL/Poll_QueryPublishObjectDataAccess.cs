//==================================================================================================
//Version 1.0, auto-generated.
//Generated By xueyb.
//Date: 2012-4-17 15:53:39.
//==================================================================================================
//==================================================================================================
//This file is generated by CodeGenerator(Ver 2.1), a product of ZhouYonghua(Zhou_Yonghua@163.com).
//==================================================================================================

using System;
using System.Collections.Generic;
using System.Data;
using System.Text;

using System.Data.SqlClient;
using ETMS.Utility.Data;

using ETMS.Components.Poll.API.Entity;

namespace ETMS.Components.Poll.Implement.DAL
{
    /// <summary>
    /// 数据访问
    /// </summary>
    public partial class Poll_QueryPublishObjectDataAccess
    {
        #region 扩展
        /// <summary>
        /// 问卷模板拷贝
        /// </summary>
        /// <param name="templateQueryID"></param>
        /// <param name="resourceType"></param>
        /// <param name="resourceCode"></param>
        /// <param name="creator"></param>
        /// <returns></returns>
        public int QueryTemplateCopy(int templateQueryID, string resourceType, string resourceCode, string creator)
        {
            string commandName = "dbo.Pr_Poll_Query_CopyTemplate";
            #region Parameters
            SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSRead, commandName);
            if (parms == null)
            {
                parms = new SqlParameter[] {
					new SqlParameter("@TemplateQueryID", SqlDbType.Int),
					new SqlParameter("@CreateUser", SqlDbType.VarChar),
					new SqlParameter("@ResourceCode", SqlDbType.VarChar),
					new SqlParameter("@ResourceTypeCode", SqlDbType.VarChar),
					new SqlParameter("@ReturnValue", SqlDbType.Int, 4, ParameterDirection.ReturnValue, false, 0, 0, String.Empty, DataRowVersion.Default, null)
				};
                SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSRead, commandName, parms);
            }

            parms[0].Value = templateQueryID;
            parms[1].Value = creator;
            parms[2].Value = resourceCode;
            parms[3].Value = resourceType;
            #endregion
            SqlHelper.ExecuteNonQuery(ConnectionString.ETMSWrite, CommandType.StoredProcedure, commandName, parms);
            return (int)parms[4].Value;
        }

        /// <summary>
        /// 根据标识问卷的统计结果XML文档
        /// </summary>
        public String CreateStatResultXMLByQueryID(Int32 queryID, string resourceType, string resourceCode)
        {
            return CreateXMLByQueryID(queryID, 3, resourceType, resourceCode);
        }
        /// <summary>
        /// 根据标识问卷的统计结果XML文档
        /// </summary>
        public String CreateStatResultXMLExportByQueryID(Int32 queryID, string resourceType, string resourceCode)
        {
            return CreateXMLByQueryID(queryID, 4, resourceType, resourceCode);
        }

        private String CreateXMLByQueryID(Int32 queryID, int requstType, string resourceType, string resourceCode)
        {
            StringBuilder XmlContent = new StringBuilder();
            SqlParameter[] parms = null;
            string commandName = "";
            if (requstType == 3)
            {
                commandName = "dbo.Pr_Poll_Query_CreateStatXMLByQueryID";
                parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSRead, commandName);
                if (parms == null)
                {
                    parms = new SqlParameter[] {
                        new SqlParameter("@QueryID", SqlDbType.Int),
                        new SqlParameter("@ResourceType", SqlDbType.VarChar),
                        new SqlParameter("@ResourceCode", SqlDbType.VarChar),
                        new SqlParameter("@UserType", SqlDbType.VarChar)

				};
                    SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSRead, commandName, parms);
                }

                parms[0].Value = queryID;
                parms[1].Value = resourceType;
                parms[2].Value = resourceCode;
                parms[3].Value = "";//如果是课程问卷调查，则只提前学生类型的答题结果，其他的则提取所有。
            }
            else if (requstType == 4)
            {
                commandName = "dbo.Pr_Poll_Query_CreateStatXMLExportByQueryID";
                parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSRead, commandName);
                if (parms == null)
                {
                    parms = new SqlParameter[] {
                        new SqlParameter("@QueryID", SqlDbType.Int),
                        new SqlParameter("@ResourceType", SqlDbType.VarChar),
                        new SqlParameter("@ResourceCode", SqlDbType.VarChar),
                        new SqlParameter("@UserType", SqlDbType.VarChar)

				};
                    SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSRead, commandName, parms);
                }

                parms[0].Value = queryID;
                parms[1].Value = resourceType;
                parms[2].Value = resourceCode;
                parms[3].Value = "";//如果是课程问卷调查，则只提前学生类型的答题结果，其他的则提取所有。
            }

            using (SqlDataReader dataReader = SqlHelper.ExecuteReader(ConnectionString.ETMSRead, CommandType.StoredProcedure, commandName, parms))
            {
                if (dataReader.Read())
                {
                    XmlContent.Append(dataReader.GetString(0));
                }
            }

            return XmlContent.ToString();
        }
        #endregion

        /// <summary>
        /// 当前问卷所关联的资源数
        /// </summary>
        /// <param name="queryID">问卷ID</param>
        /// <returns>资源数量</returns>
        public Int32 GetPublishObjectCountByQuery(Int32 queryID)
        {
            string commandName = "SELECT COUNT(*) FROM dbo.tb_r_QueryPublishObject WHERE [QueryID]=@QueryID and resourcecode in ("
                + " SELECT MasterCourseID FROM dbo.tb_r_MasterSlaveCourse WHERE SlaveCourseID = MasterCourseID)";
            SqlParameter[] parms = new SqlParameter[] {
					 new SqlParameter("@QueryID", SqlDbType.Int)             
				};
            parms[0].Value = queryID;
            return Convert.ToInt32(SqlHelper.ExecuteScalar(ConnectionString.ETMSRead, CommandType.Text, commandName, parms));
        }

        /// <summary>
        /// 当前资源所挂载的问卷数
        /// </summary>
        /// <param name="queryID">资源编号</param>
        /// <returns>问卷数量</returns>
        public Int32 GetPublishObjectCountByResourceCode(string resourceCode)
        {
            string commandName = "SELECT COUNT(*) FROM dbo.tb_r_QueryPublishObject a INNER JOIN tb_e_Query b ON a.QueryID=b.QueryID WHERE b.[IsDelete]=0 AND [ResourceCode]=@ResourceCode";
            SqlParameter[] parms = new SqlParameter[] {
					 new SqlParameter("@ResourceCode", SqlDbType.VarChar)             
				};
            parms[0].Value = resourceCode;
            return Convert.ToInt32(SqlHelper.ExecuteScalar(ConnectionString.ETMSRead, CommandType.Text, commandName, parms));
        }

        public DataTable GetQueryListByResource(string resourceType, string resourceCode)
        {
            string commandName = "dbo.Pr_tb_r_QueryPublishObject_GetQueryListByResource";
            #region Parameters
            SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSRead, commandName);
            if (parms == null)
            {
                parms = new SqlParameter[] {
					 new SqlParameter("@ResourceType", SqlDbType.VarChar)
                    ,new SqlParameter("@ResourceCode", SqlDbType.VarChar)
				};
                SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSRead, commandName, parms);
            }

            parms[0].Value = resourceType;
            parms[1].Value = resourceCode;

            #endregion
            DataSet ds = SqlHelper.ExecuteDataset(ConnectionString.ETMSRead, CommandType.StoredProcedure, commandName, parms);
            return ds.Tables[0];
        }
        /// <summary>
        /// 根据资源编号，资源类型获取所关联的问卷ID（最后一次关联）
        /// </summary>
        /// <param name="resourceType">资源类型</param>
        /// <param name="resourceCode">资源编号</param>
        /// <returns>问卷ID</returns>
        public string GetQueryIdByResourceAttribute(string resourceType, string resourceCode)
        {
            string commandName = "dbo.Pr_tb_r_QueryPublishObject_GetQueryID";
            #region Parameters
            SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSRead, commandName);
            if (parms == null)
            {
                parms = new SqlParameter[] {
					 new SqlParameter("@ResourceType", SqlDbType.VarChar)
                    ,new SqlParameter("@ResourceCode", SqlDbType.VarChar)
				};
                SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSRead, commandName, parms);
            }

            parms[0].Value = resourceType;
            parms[1].Value = resourceCode;

            #endregion
            return Convert.ToString(SqlHelper.ExecuteScalar(ConnectionString.ETMSRead, CommandType.StoredProcedure, commandName, parms));
        }

        /// <summary>
        /// 根据被调查资源类型及关联的问卷ID删除
        /// </summary>
        /// <param name="queryID">关联的问卷ID</param>
        /// <param name="resourceType">被调查资源类型</param>
        public void Remove(Int32 queryID, string resourceType)
        {
            string commandName = "dbo.Pr_tb_r_QueryPublishObject_DeleteByQuery";
            #region Parameters
            SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSWrite, commandName);
            if (parms == null)
            {
                parms = new SqlParameter[] {
					new SqlParameter("@QueryID", SqlDbType.Int),
                    new SqlParameter("@ResourceType", SqlDbType.VarChar,2)
				};
                SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSWrite, commandName, parms);
            }

            parms[0].Value = queryID;
            parms[1].Value = resourceType;

            #endregion
            SqlHelper.ExecuteNonQuery(ConnectionString.ETMSWrite, CommandType.StoredProcedure, commandName, parms);
        }

        /// <summary>
        /// 根据被调查资源类型及资源ID删除
        /// </summary>
        /// <param name="resourceCode">关联的资源ID</param>
        /// <param name="resourceType">被调查资源类型</param>
        public void Remove(string resourceCode, string resourceType)
        {
            string commandName = "dbo.Pr_tb_r_QueryPublishObject_DeleteByResource";
            #region Parameters
            SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSWrite, commandName);
            if (parms == null)
            {
                parms = new SqlParameter[] {
					new SqlParameter("@ResourceCode", SqlDbType.VarChar,50),
                    new SqlParameter("@ResourceType", SqlDbType.VarChar,2)
				};
                SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSWrite, commandName, parms);
            }

            parms[0].Value = resourceCode;
            parms[1].Value = resourceType;

            #endregion
            SqlHelper.ExecuteNonQuery(ConnectionString.ETMSWrite, CommandType.StoredProcedure, commandName, parms);
        }

        /// <summary>
        /// 获取所有对象列表
        /// </summary>
        public List<Poll_QueryPublishObject> GetQueryPublishObjectList(string resourceCode, string resourceType, int queryID)
        {
            string commandName = "dbo.Pr_tb_r_GetQueryPublishObjectList";
            List<Poll_QueryPublishObject> tb_r_QueryPublishObjects = new List<Poll_QueryPublishObject>();
            #region Parameters
            SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSRead, commandName);
            if (parms == null)
            {
                parms = new SqlParameter[] {
					new SqlParameter("@ResourceCode", SqlDbType.VarChar),
					new SqlParameter("@ResourceType", SqlDbType.VarChar),
					new SqlParameter("@QueryID", SqlDbType.Int)
                };
                SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSRead, commandName, parms);
            }

            parms[0].Value = resourceCode;
            parms[1].Value = resourceType;
            parms[2].Value = queryID;
            #endregion
            using (SqlDataReader dataReader = SqlHelper.ExecuteReader(ConnectionString.ETMSRead, CommandType.StoredProcedure, commandName, parms))
            {
                while (dataReader.Read())
                {
                    tb_r_QueryPublishObjects.Add(PopulatePoll_QueryPublishObjectFromDataReader(dataReader));
                }
            }

            return tb_r_QueryPublishObjects;
        }
        /// <summary>
        /// 获取所有对象列表
        /// </summary>
        public List<Poll_QueryPublishObject> GetQueryPublishObjectSearch(string resourceCode, string resourceType, int queryID)
        {
            string commandName = "dbo.Pr_tb_r_GetQueryPublishObject_Search";
            List<Poll_QueryPublishObject> tb_r_QueryPublishObjects = new List<Poll_QueryPublishObject>();
            #region Parameters
            SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSRead, commandName);
            if (parms == null)
            {
                parms = new SqlParameter[] {
					new SqlParameter("@ResourceCode", SqlDbType.VarChar),
					new SqlParameter("@ResourceType", SqlDbType.VarChar),
					new SqlParameter("@QueryID", SqlDbType.Int)
                };
                SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSRead, commandName, parms);
            }

            parms[0].Value = resourceCode;
            parms[1].Value = resourceType;
            parms[2].Value = queryID;
            #endregion
            using (SqlDataReader dataReader = SqlHelper.ExecuteReader(ConnectionString.ETMSRead, CommandType.StoredProcedure, commandName, parms))
            {
                while (dataReader.Read())
                {
                    tb_r_QueryPublishObjects.Add(PopulatePoll_QueryPublishObjectFromDataReader(dataReader));
                }
            }

            return tb_r_QueryPublishObjects;
        }

        //TODO:根据需要设置参数
        /// <summary>
        /// 根据参数获取对象列表（分页，可排序）
        /// </summary>
        public DataTable GetGetQueryPublishObjectHistoryPagedList(int startRowIndex, int maximumRows, string sortExpression, string criteria, out int totalRecords)
        {
            string commandName = "dbo.Pr_tb_r_QueryPublishObject_GetPagedList_History";
            #region Parameters
            SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSRead, commandName);
            if (parms == null)
            {
                parms = new SqlParameter[] {
					new SqlParameter("@StartRowIndex", SqlDbType.Int),
					new SqlParameter("@MaximumRows", SqlDbType.Int),
					new SqlParameter("@SortExpression", SqlDbType.VarChar),
					new SqlParameter("@Criteria", SqlDbType.VarChar),
					new SqlParameter("@ReturnValue", SqlDbType.Int, 4, ParameterDirection.ReturnValue, false, 0, 0, String.Empty, DataRowVersion.Default, null)
				};
                SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSRead, commandName, parms);
            }

            parms[0].Value = startRowIndex;
            parms[1].Value = maximumRows;
            parms[2].Value = sortExpression;
            parms[3].Value = criteria;
            #endregion
            DataSet ds = SqlHelper.ExecuteDataset(ConnectionString.ETMSRead, CommandType.StoredProcedure, commandName, parms);
            totalRecords = (int)parms[4].Value;
            return ds.Tables[0];
        }

    }
}
