//==================================================================================================
//Version 1.0, auto-generated.
//Generated By running1218
//Date: 2012-4-17 20:47:00.
//==================================================================================================
//==================================================================================================
//This file is generated by CodeGenerator(Ver 2.1)
//==================================================================================================

using System;
using System.Collections.Generic;
using System.Data;

using System.Data.SqlClient;
using ETMS.Utility.Data;

using ETMS.Components.Poll.API.Entity;

namespace ETMS.Components.Poll.Implement.DAL
{
    /// <summary>
    /// 调查表数据访问
    /// </summary>
    public partial class Poll_QueryDataAccess
    {
        /// <summary>
        /// 增加
        /// </summary>
        public void Add(Poll_Query poll_Query)
        {
            string commandName = "dbo.Pr_Poll_Query_Insert";
            #region Parameters
            SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSWrite, commandName);
            if (parms == null)
            {
                parms = new SqlParameter[] {	new SqlParameter("@QueryID", SqlDbType.Int, 4, ParameterDirection.Output, false, 0, 0, String.Empty, DataRowVersion.Default, null),
				
					new SqlParameter("@QueryName", SqlDbType.NVarChar, 200),
					new SqlParameter("@Header", SqlDbType.NVarChar, 2000),
					new SqlParameter("@TitlePrefix", SqlDbType.NVarChar, 20),
					new SqlParameter("@IsDisplayColumn", SqlDbType.Bit),
					new SqlParameter("@Location", SqlDbType.Int),
					new SqlParameter("@OrganizationID", SqlDbType.Int),
					new SqlParameter("@BeginTime", SqlDbType.DateTime),
					new SqlParameter("@EndTime", SqlDbType.DateTime),
					new SqlParameter("@Footer", SqlDbType.NVarChar, 1000),
					new SqlParameter("@Status", SqlDbType.SmallInt),
					new SqlParameter("@IsAllSave", SqlDbType.Bit),
					new SqlParameter("@IsTitleNoSort", SqlDbType.Bit),
					new SqlParameter("@IsRepeat", SqlDbType.Bit),
					new SqlParameter("@IsDisplayResult", SqlDbType.Bit),
					new SqlParameter("@IsTemplate", SqlDbType.Bit),
					new SqlParameter("@IsPublish", SqlDbType.Bit),
					new SqlParameter("@DutyUser", SqlDbType.NVarChar, 100),
					new SqlParameter("@CreateTime", SqlDbType.DateTime),
					new SqlParameter("@CreateUser", SqlDbType.VarChar, 50),
					new SqlParameter("@ModifyTime", SqlDbType.DateTime),
					new SqlParameter("@ModifyUser", SqlDbType.VarChar, 50),
					new SqlParameter("@Remark", SqlDbType.NVarChar, -1)
					};
                SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSWrite, commandName, parms);
            }

            if (poll_Query.QueryName != null) { parms[1].Value = poll_Query.QueryName; } else { parms[1].Value = DBNull.Value; }
            if (poll_Query.Header != null) { parms[2].Value = poll_Query.Header; } else { parms[2].Value = DBNull.Value; }
            if (poll_Query.TitlePrefix != null) { parms[3].Value = poll_Query.TitlePrefix; } else { parms[3].Value = DBNull.Value; }
            parms[4].Value = poll_Query.IsDisplayColumn;
            parms[5].Value = poll_Query.Location;
            parms[6].Value = poll_Query.OrganizationID;
            parms[7].Value = poll_Query.BeginTime;
            parms[8].Value = poll_Query.EndTime;
            if (poll_Query.Footer != null) { parms[9].Value = poll_Query.Footer; } else { parms[9].Value = DBNull.Value; }
            parms[10].Value = poll_Query.Status;
            parms[11].Value = poll_Query.IsAllSave;
            parms[12].Value = poll_Query.IsTitleNoSort;
            parms[13].Value = poll_Query.IsRepeat;
            parms[14].Value = poll_Query.IsDisplayResult;
            parms[15].Value = poll_Query.IsTemplate;
            parms[16].Value = poll_Query.IsPublish;
            if (poll_Query.DutyUser != null) { parms[17].Value = poll_Query.DutyUser; } else { parms[17].Value = DBNull.Value; }
            parms[18].Value = poll_Query.CreateTime;
            if (poll_Query.CreateUser != null) { parms[19].Value = poll_Query.CreateUser; } else { parms[19].Value = DBNull.Value; }
            parms[20].Value = poll_Query.ModifyTime;
            if (poll_Query.ModifyUser != null) { parms[21].Value = poll_Query.ModifyUser; } else { parms[21].Value = DBNull.Value; }
            if (poll_Query.Remark != null) { parms[22].Value = poll_Query.Remark; } else { parms[22].Value = DBNull.Value; }
            #endregion
            SqlHelper.ExecuteNonQuery(ConnectionString.ETMSWrite, CommandType.StoredProcedure, commandName, parms);

            poll_Query.QueryID = (Int32)parms[0].Value;

        }

        /// <summary>
        /// 删除
        /// </summary>
        public void Remove(Int32 queryID)
        {
            string commandName = "dbo.Pr_Poll_Query_Delete";
            #region Parameters
            SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSWrite, commandName);
            if (parms == null)
            {
                parms = new SqlParameter[] {
					new SqlParameter("@QueryID", SqlDbType.Int)
				};
                SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSWrite, commandName, parms);
            }

            parms[0].Value = queryID;

            #endregion
            SqlHelper.ExecuteNonQuery(ConnectionString.ETMSWrite, CommandType.StoredProcedure, commandName, parms);
        }

        /// <summary>
        /// 保存
        /// </summary>
        public void Save(Poll_Query poll_Query)
        {
            string commandName = "dbo.Pr_Poll_Query_Update";
            #region Parameters
            SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSWrite, commandName);
            if (parms == null)
            {
                parms = new SqlParameter[] {
					new SqlParameter("@QueryID", SqlDbType.Int),
					new SqlParameter("@QueryName", SqlDbType.NVarChar, 200),
					new SqlParameter("@Header", SqlDbType.NVarChar, 2000),
					new SqlParameter("@TitlePrefix", SqlDbType.NVarChar, 20),
					new SqlParameter("@IsDisplayColumn", SqlDbType.Bit),
					new SqlParameter("@Location", SqlDbType.Int),
					new SqlParameter("@OrganizationID", SqlDbType.Int),
					new SqlParameter("@BeginTime", SqlDbType.DateTime),
					new SqlParameter("@EndTime", SqlDbType.DateTime),
					new SqlParameter("@Footer", SqlDbType.NVarChar, 1000),
					new SqlParameter("@Status", SqlDbType.SmallInt),
					new SqlParameter("@IsAllSave", SqlDbType.Bit),
					new SqlParameter("@IsTitleNoSort", SqlDbType.Bit),
					new SqlParameter("@IsRepeat", SqlDbType.Bit),
					new SqlParameter("@IsDisplayResult", SqlDbType.Bit),
					new SqlParameter("@IsTemplate", SqlDbType.Bit),
					new SqlParameter("@IsPublish", SqlDbType.Bit),
					new SqlParameter("@DutyUser", SqlDbType.NVarChar, 100),
					new SqlParameter("@CreateTime", SqlDbType.DateTime),
					new SqlParameter("@CreateUser", SqlDbType.VarChar, 50),
					new SqlParameter("@ModifyTime", SqlDbType.DateTime),
					new SqlParameter("@ModifyUser", SqlDbType.VarChar, 50),
					new SqlParameter("@Remark", SqlDbType.NVarChar, -1)
				};
                SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSWrite, commandName, parms);
            }

            parms[0].Value = poll_Query.QueryID;
            if (poll_Query.QueryName != null) { parms[1].Value = poll_Query.QueryName; } else { parms[1].Value = DBNull.Value; }
            if (poll_Query.Header != null) { parms[2].Value = poll_Query.Header; } else { parms[2].Value = DBNull.Value; }
            if (poll_Query.TitlePrefix != null) { parms[3].Value = poll_Query.TitlePrefix; } else { parms[3].Value = DBNull.Value; }
            parms[4].Value = poll_Query.IsDisplayColumn;
            parms[5].Value = poll_Query.Location;
            parms[6].Value = poll_Query.OrganizationID;
            parms[7].Value = poll_Query.BeginTime;
            parms[8].Value = poll_Query.EndTime;
            if (poll_Query.Footer != null) { parms[9].Value = poll_Query.Footer; } else { parms[9].Value = DBNull.Value; }
            parms[10].Value = poll_Query.Status;
            parms[11].Value = poll_Query.IsAllSave;
            parms[12].Value = poll_Query.IsTitleNoSort;
            parms[13].Value = poll_Query.IsRepeat;
            parms[14].Value = poll_Query.IsDisplayResult;
            parms[15].Value = poll_Query.IsTemplate;
            parms[16].Value = poll_Query.IsPublish;
            if (poll_Query.DutyUser != null) { parms[17].Value = poll_Query.DutyUser; } else { parms[17].Value = DBNull.Value; }
            parms[18].Value = poll_Query.CreateTime;
            if (poll_Query.CreateUser != null) { parms[19].Value = poll_Query.CreateUser; } else { parms[19].Value = DBNull.Value; }
            parms[20].Value = poll_Query.ModifyTime;
            if (poll_Query.ModifyUser != null) { parms[21].Value = poll_Query.ModifyUser; } else { parms[21].Value = DBNull.Value; }
            if (poll_Query.Remark != null) { parms[22].Value = poll_Query.Remark; } else { parms[22].Value = DBNull.Value; }
            #endregion
            SqlHelper.ExecuteNonQuery(ConnectionString.ETMSWrite, CommandType.StoredProcedure, commandName, parms);
        }

        /// <summary>
        /// 根据标识获取对象
        /// </summary>
        public Poll_Query GetById(Int32 queryID)
        {
            Poll_Query poll_Query = null;

            string commandName = "dbo.Pr_Poll_Query_GetByPK";
            #region Parameters
            SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSRead, commandName);
            if (parms == null)
            {
                parms = new SqlParameter[] {
					new SqlParameter("@QueryID", SqlDbType.Int)
				};
                SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSRead, commandName, parms);
            }

            parms[0].Value = queryID;

            #endregion
            using (SqlDataReader dataReader = SqlHelper.ExecuteReader(ConnectionString.ETMSRead, CommandType.StoredProcedure, commandName, parms))
            {
                if (dataReader.Read())
                {
                    poll_Query = PopulatePoll_QueryFromDataReader(dataReader);
                }
            }

            return poll_Query;
        }

        /// <summary>
        /// 根据参数获取对象列表（分页，可排序）
        /// </summary>
        public DataTable GetPagedList(int pageIndex, int pageSize, string sortExpression, string criteria, out int totalRecords)
        {
            string commandName = "dbo.Pr_Poll_Query_GetPagedList";
            #region Parameters
            SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSRead, commandName);
            if (parms == null)
            {
                parms = new SqlParameter[] {
					new SqlParameter("@PageIndex", SqlDbType.Int),
					new SqlParameter("@PageSize", SqlDbType.Int),
					new SqlParameter("@SortExpression", SqlDbType.VarChar),
					new SqlParameter("@Criteria", SqlDbType.VarChar),
					new SqlParameter("@ReturnValue", SqlDbType.Int, 4, ParameterDirection.ReturnValue, false, 0, 0, String.Empty, DataRowVersion.Default, null)
				};
                SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSRead, commandName, parms);
            }

            parms[0].Value = pageIndex;
            parms[1].Value = pageSize;
            parms[2].Value = sortExpression;
            parms[3].Value = criteria;
            #endregion
            DataTable dt = SqlHelper.ExecuteDataset(ConnectionString.ETMSRead, CommandType.StoredProcedure, commandName, parms).Tables[0];
            totalRecords = (int)parms[4].Value;
            return dt;
        }

        /// <summary>
        /// 根据参数获取对象列表（分页，可排序）
        /// </summary>
        public IList<Poll_Query> GetEntityList(int pageIndex, int pageSize, string sortExpression, string criteria, out int totalRecords)
        {
            IList<Poll_Query> list = new List<Poll_Query>();
            string commandName = "dbo.Pr_Poll_Query_GetPagedList";
            #region Parameters
            SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSRead, commandName);
            if (parms == null)
            {
                parms = new SqlParameter[] {
					new SqlParameter("@PageIndex", SqlDbType.Int),
					new SqlParameter("@PageSize", SqlDbType.Int),
					new SqlParameter("@SortExpression", SqlDbType.VarChar),
					new SqlParameter("@Criteria", SqlDbType.VarChar),
					new SqlParameter("@ReturnValue", SqlDbType.Int, 4, ParameterDirection.ReturnValue, false, 0, 0, String.Empty, DataRowVersion.Default, null)
				};
                SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSRead, commandName, parms);
            }

            parms[0].Value = pageIndex;
            parms[1].Value = pageSize;
            parms[2].Value = sortExpression;
            parms[3].Value = criteria;
            #endregion
            using (SqlDataReader dataReader = SqlHelper.ExecuteReader(ConnectionString.ETMSRead, CommandType.StoredProcedure, commandName, parms))
            {
                while (dataReader.Read())
                {
                    list.Add(PopulatePoll_QueryFromDataReader(dataReader));
                }
            }
            totalRecords = (int)parms[4].Value;
            return list;
        }

        /// <summary>
        /// 从DataReader中读取数据到业务对象
        /// </summary>
        private Poll_Query PopulatePoll_QueryFromDataReader(SqlDataReader reader)
        {
            Poll_Query poll_Query = new Poll_Query();

            int queryIDIndex = reader.GetOrdinal("QueryID");
            if (!reader.IsDBNull(queryIDIndex))
            {
                poll_Query.QueryID = reader.GetInt32(queryIDIndex);
            }

            int queryNameIndex = reader.GetOrdinal("QueryName");
            if (!reader.IsDBNull(queryNameIndex))
            {
                poll_Query.QueryName = reader.GetString(queryNameIndex);
            }

            int headerIndex = reader.GetOrdinal("Header");
            if (!reader.IsDBNull(headerIndex))
            {
                poll_Query.Header = reader.GetString(headerIndex);
            }

            int titlePrefixIndex = reader.GetOrdinal("TitlePrefix");
            if (!reader.IsDBNull(titlePrefixIndex))
            {
                poll_Query.TitlePrefix = reader.GetString(titlePrefixIndex);
            }

            int isDisplayColumnIndex = reader.GetOrdinal("IsDisplayColumn");
            if (!reader.IsDBNull(isDisplayColumnIndex))
            {
                poll_Query.IsDisplayColumn = reader.GetBoolean(isDisplayColumnIndex);
            }

            int locationIndex = reader.GetOrdinal("Location");
            if (!reader.IsDBNull(locationIndex))
            {
                poll_Query.Location = reader.GetInt32(locationIndex);
            }

            int organizationIDIndex = reader.GetOrdinal("OrganizationID");
            if (!reader.IsDBNull(organizationIDIndex))
            {
                poll_Query.OrganizationID = reader.GetInt32(organizationIDIndex);
            }

            int beginTimeIndex = reader.GetOrdinal("BeginTime");
            if (!reader.IsDBNull(beginTimeIndex))
            {
                poll_Query.BeginTime = reader.GetDateTime(beginTimeIndex);
            }

            int endTimeIndex = reader.GetOrdinal("EndTime");
            if (!reader.IsDBNull(endTimeIndex))
            {
                poll_Query.EndTime = reader.GetDateTime(endTimeIndex);
            }

            int footerIndex = reader.GetOrdinal("Footer");
            if (!reader.IsDBNull(footerIndex))
            {
                poll_Query.Footer = reader.GetString(footerIndex);
            }

            int statusIndex = reader.GetOrdinal("Status");
            if (!reader.IsDBNull(statusIndex))
            {
                poll_Query.Status = reader.GetInt16(statusIndex);
            }

            int isAllSaveIndex = reader.GetOrdinal("IsAllSave");
            if (!reader.IsDBNull(isAllSaveIndex))
            {
                poll_Query.IsAllSave = reader.GetBoolean(isAllSaveIndex);
            }

            int isTitleNoSortIndex = reader.GetOrdinal("IsTitleNoSort");
            if (!reader.IsDBNull(isTitleNoSortIndex))
            {
                poll_Query.IsTitleNoSort = reader.GetBoolean(isTitleNoSortIndex);
            }

            int isRepeatIndex = reader.GetOrdinal("IsRepeat");
            if (!reader.IsDBNull(isRepeatIndex))
            {
                poll_Query.IsRepeat = reader.GetBoolean(isRepeatIndex);
            }

            int isDisplayResultIndex = reader.GetOrdinal("IsDisplayResult");
            if (!reader.IsDBNull(isDisplayResultIndex))
            {
                poll_Query.IsDisplayResult = reader.GetBoolean(isDisplayResultIndex);
            }

            int isTemplateIndex = reader.GetOrdinal("IsTemplate");
            if (!reader.IsDBNull(isTemplateIndex))
            {
                poll_Query.IsTemplate = reader.GetBoolean(isTemplateIndex);
            }

            int isPublishIndex = reader.GetOrdinal("IsPublish");
            if (!reader.IsDBNull(isPublishIndex))
            {
                poll_Query.IsPublish = reader.GetBoolean(isPublishIndex);
            }

            int dutyUserIndex = reader.GetOrdinal("DutyUser");
            if (!reader.IsDBNull(dutyUserIndex))
            {
                poll_Query.DutyUser = reader.GetString(dutyUserIndex);
            }

            int createTimeIndex = reader.GetOrdinal("CreateTime");
            if (!reader.IsDBNull(createTimeIndex))
            {
                poll_Query.CreateTime = reader.GetDateTime(createTimeIndex);
            }

            int createUserIndex = reader.GetOrdinal("CreateUser");
            if (!reader.IsDBNull(createUserIndex))
            {
                poll_Query.CreateUser = reader.GetString(createUserIndex);
            }

            int modifyTimeIndex = reader.GetOrdinal("ModifyTime");
            if (!reader.IsDBNull(modifyTimeIndex))
            {
                poll_Query.ModifyTime = reader.GetDateTime(modifyTimeIndex);
            }

            int modifyUserIndex = reader.GetOrdinal("ModifyUser");
            if (!reader.IsDBNull(modifyUserIndex))
            {
                poll_Query.ModifyUser = reader.GetString(modifyUserIndex);
            }

            int remarkIndex = reader.GetOrdinal("Remark");
            if (!reader.IsDBNull(remarkIndex))
            {
                poll_Query.Remark = reader.GetString(remarkIndex);
            }

            if (readerExists(reader, "InvestNumber"))
            {
                int InvestNumberIndex = reader.GetOrdinal("InvestNumber");
                if (!reader.IsDBNull(InvestNumberIndex))
                {
                    poll_Query.InvestNumber = reader.GetInt32(InvestNumberIndex);
                }
            }

            if (readerExists(reader, "SubmitNumber"))
            {
                int SubmitNumberIndex = reader.GetOrdinal("SubmitNumber");
                if (!reader.IsDBNull(SubmitNumberIndex))
                {
                    poll_Query.SubmitNumber = reader.GetInt32(SubmitNumberIndex);
                }
            }
            //var obj = reader["InvestNumber"];
            //if (reader["InvestNumber"])


            return poll_Query;
        }

        private bool readerExists(SqlDataReader dr, string columnName)
        {

            dr.GetSchemaTable().DefaultView.RowFilter = "ColumnName= '" +

            columnName + "'";

            return (dr.GetSchemaTable().DefaultView.Count > 0);

        }


    }
}
