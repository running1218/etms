//==================================================================================================
//Version 1.0, auto-generated.
//Generated By xueyb.
//Date: 2012-4-17 15:53:39.
//==================================================================================================
//==================================================================================================
//This file is generated by CodeGenerator(Ver 2.1), a product of ZhouYonghua(Zhou_Yonghua@163.com).
//==================================================================================================

using System;
using System.Collections.Generic;
using System.Data;

using System.Data.SqlClient;
using ETMS.Utility.Data;

using ETMS.Components.Poll.API.Entity;

namespace ETMS.Components.Poll.Implement.DAL
{
    /// <summary>
    /// 题目标题数据访问
    /// </summary>
    public partial class Poll_TitleDataAccess
	{
		/// <summary>
		/// 增加
		/// </summary>
		public void Add(Poll_Title poll_Title)
		{
			string commandName = "dbo.Pr_Poll_Title_Insert";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSWrite, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {	new SqlParameter("@TitleID", SqlDbType.Int, 4, ParameterDirection.Output, false, 0, 0, String.Empty, DataRowVersion.Default, null),
				
					new SqlParameter("@ColumnID", SqlDbType.Int),
					new SqlParameter("@TitleName", SqlDbType.NVarChar),
					new SqlParameter("@TitleTypeID", SqlDbType.Int),
					new SqlParameter("@TitleNo", SqlDbType.Int),
					new SqlParameter("@ScopeType", SqlDbType.Int),
					new SqlParameter("@CreateTime", SqlDbType.DateTime)
					};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSWrite, commandName, parms);
			}
			
			parms[1].Value = poll_Title.ColumnID;
			if (poll_Title.TitleName!= null){ parms[2].Value = poll_Title.TitleName; } else { parms[2].Value = DBNull.Value; }
			parms[3].Value = poll_Title.TitleTypeID;
			parms[4].Value = poll_Title.TitleNo;
			parms[5].Value = poll_Title.ScopeType;
			parms[6].Value = poll_Title.CreateTime;
			#endregion
			SqlHelper.ExecuteNonQuery(ConnectionString.ETMSWrite, CommandType.StoredProcedure, commandName, parms);
			
			poll_Title.TitleID = (Int32)parms[0].Value;
			
		}
		
		/// <summary>
		/// 删除
		/// </summary>
		public void Remove(Int32 titleID)
		{
			string commandName = "dbo.Pr_Poll_Title_Delete";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSWrite, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@TitleID", SqlDbType.Int)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSWrite, commandName, parms);
			}
			
			parms[0].Value = titleID;
			
			#endregion
			SqlHelper.ExecuteNonQuery(ConnectionString.ETMSWrite, CommandType.StoredProcedure, commandName, parms);
		}
		
		/// <summary>
		/// 保存
		/// </summary>
		public void Save(Poll_Title poll_Title)
		{
			string commandName = "dbo.Pr_Poll_Title_Update";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSWrite, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@TitleID", SqlDbType.Int),
					new SqlParameter("@ColumnID", SqlDbType.Int),
					new SqlParameter("@TitleName", SqlDbType.NVarChar),
					new SqlParameter("@TitleTypeID", SqlDbType.Int),
					new SqlParameter("@TitleNo", SqlDbType.Int),
					new SqlParameter("@ScopeType", SqlDbType.Int),
					new SqlParameter("@CreateTime", SqlDbType.DateTime)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSWrite, commandName, parms);
			}
			
			parms[0].Value = poll_Title.TitleID;
			parms[1].Value = poll_Title.ColumnID;
			if (poll_Title.TitleName!= null){ parms[2].Value = poll_Title.TitleName; } else { parms[2].Value = DBNull.Value; }
			parms[3].Value = poll_Title.TitleTypeID;
			parms[4].Value = poll_Title.TitleNo;
			parms[5].Value = poll_Title.ScopeType;
			parms[6].Value = poll_Title.CreateTime;
			#endregion
			SqlHelper.ExecuteNonQuery(ConnectionString.ETMSWrite, CommandType.StoredProcedure, commandName, parms);
		}
		
		/// <summary>
		/// 根据标识获取对象
		/// </summary>
		public Poll_Title GetById(Int32 titleID)
		{
			Poll_Title poll_Title = null;
			
			string commandName = "dbo.Pr_Poll_Title_GetByPK";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSRead, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@TitleID", SqlDbType.Int)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSRead, commandName, parms);
			}
			
			parms[0].Value = titleID;
			
			#endregion
			using (SqlDataReader dataReader = SqlHelper.ExecuteReader(ConnectionString.ETMSRead, CommandType.StoredProcedure, commandName, parms))
			{
				if (dataReader.Read())
				{
					poll_Title = PopulatePoll_TitleFromDataReader(dataReader);
				}
			}
			
			return poll_Title;
		}				
		
		/// <summary>
		/// 根据参数获取对象列表（分页，可排序）
		/// </summary>
		public DataTable GetPagedList(int pageIndex, int pageSize, string sortExpression, string criteria, out int totalRecords)
		{			
			string commandName = "dbo.Pr_Poll_Title_GetPagedList";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSRead, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@PageIndex", SqlDbType.Int),
					new SqlParameter("@PageSize", SqlDbType.Int),
					new SqlParameter("@SortExpression", SqlDbType.VarChar),
					new SqlParameter("@Criteria", SqlDbType.VarChar),
					new SqlParameter("@ReturnValue", SqlDbType.Int, 4, ParameterDirection.ReturnValue, false, 0, 0, String.Empty, DataRowVersion.Default, null)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSRead, commandName, parms);
			}
			
			parms[0].Value = pageIndex;
			parms[1].Value = pageSize;
			parms[2].Value = sortExpression;
			parms[3].Value = criteria;
			#endregion
			DataTable dt=SqlHelper.ExecuteDataset(ConnectionString.ETMSRead, CommandType.StoredProcedure, commandName, parms).Tables[0];
			totalRecords = (int)parms[4].Value;
			return dt;
		}
		
	    /// <summary>
		/// 根据参数获取对象列表（分页，可排序）
		/// </summary>
		public IList<Poll_Title> GetEntityList(int pageIndex, int pageSize, string sortExpression, string criteria, out int totalRecords)
		{			
            IList<Poll_Title> list=new List<Poll_Title>();
			string commandName = "dbo.Pr_Poll_Title_GetPagedList";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSRead, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@PageIndex", SqlDbType.Int),
					new SqlParameter("@PageSize", SqlDbType.Int),
					new SqlParameter("@SortExpression", SqlDbType.VarChar),
					new SqlParameter("@Criteria", SqlDbType.VarChar),
					new SqlParameter("@ReturnValue", SqlDbType.Int, 4, ParameterDirection.ReturnValue, false, 0, 0, String.Empty, DataRowVersion.Default, null)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSRead, commandName, parms);
			}
			
			parms[0].Value = pageIndex;
			parms[1].Value = pageSize;
			parms[2].Value = sortExpression;
			parms[3].Value = criteria;
			#endregion
            using (SqlDataReader dataReader = SqlHelper.ExecuteReader(ConnectionString.ETMSRead, CommandType.StoredProcedure, commandName, parms))
			{
				while (dataReader.Read())
				{
					list.Add(PopulatePoll_TitleFromDataReader(dataReader));
				}
			}			
			totalRecords = (int)parms[4].Value;
			return list;
		}
		
		/// <summary>
		/// 从DataReader中读取数据到业务对象
		/// </summary>
		private Poll_Title PopulatePoll_TitleFromDataReader(SqlDataReader reader)
		{
			Poll_Title poll_Title = new Poll_Title();
			
			int titleIDIndex = reader.GetOrdinal("TitleID"); 
			if(!reader.IsDBNull(titleIDIndex))
			{
				poll_Title.TitleID= reader.GetInt32(titleIDIndex);
			}
			
			int columnIDIndex = reader.GetOrdinal("ColumnID"); 
			if(!reader.IsDBNull(columnIDIndex))
			{
				poll_Title.ColumnID= reader.GetInt32(columnIDIndex);
			}
			
			int titleNameIndex = reader.GetOrdinal("TitleName"); 
			if(!reader.IsDBNull(titleNameIndex))
			{
				poll_Title.TitleName= reader.GetString(titleNameIndex);
			}
			
			int titleTypeIDIndex = reader.GetOrdinal("TitleTypeID"); 
			if(!reader.IsDBNull(titleTypeIDIndex))
			{
				poll_Title.TitleTypeID= reader.GetInt32(titleTypeIDIndex);
			}
			
			int titleNoIndex = reader.GetOrdinal("TitleNo"); 
			if(!reader.IsDBNull(titleNoIndex))
			{
				poll_Title.TitleNo= reader.GetInt32(titleNoIndex);
			}
			
			int scopeTypeIndex = reader.GetOrdinal("ScopeType"); 
			if(!reader.IsDBNull(scopeTypeIndex))
			{
				poll_Title.ScopeType= reader.GetInt32(scopeTypeIndex);
			}
			
			int createTimeIndex = reader.GetOrdinal("CreateTime"); 
			if(!reader.IsDBNull(createTimeIndex))
			{
				poll_Title.CreateTime= reader.GetDateTime(createTimeIndex);
			}
			
			return poll_Title; 
		}
	}
}
