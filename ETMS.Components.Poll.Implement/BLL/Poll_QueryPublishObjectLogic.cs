//==================================================================================================
//Version 1.0, auto-generated.
//Generated By running1218
//Date: 2012-4-17 15:53:39.
//==================================================================================================
//==================================================================================================
//This file is generated by CodeGenerator(Ver 2.1)
//==================================================================================================

using System;
using System.Collections.Generic;
using System.Text;
using System.Data;
using ETMS.Utility;
using ETMS.Utility.Logging;
using ETMS.Components.Poll.API.Entity;
namespace ETMS.Components.Poll.Implement.BLL
{
    /// <summary>
    /// 业务逻辑
    /// </summary>
    public partial class Poll_QueryPublishObjectLogic
    {
        /// <summary>
        /// 保存操作
        /// </summary>
        public void Save(Poll_QueryPublishObject poll_QueryPublishObject)
        {
            try
            {
                if (poll_QueryPublishObject.QueryPublishID.IsEmpty())
                {
                    //设置主键ID（仅类型为GUID有效，Int型则由数据库自增产生）
                    poll_QueryPublishObject.QueryPublishID = poll_QueryPublishObject.QueryPublishID.NewID(); ;
                    Add(poll_QueryPublishObject);
                }
                else
                {
                    Update(poll_QueryPublishObject);
                }
            }
            catch (System.Data.SqlClient.SqlException ex)
            {
                //枚举数据约束异常并转换为业务异常
                if (ex.Message.IndexOf("Index_U_Poll_QueryPublishObjectCode", StringComparison.InvariantCultureIgnoreCase) != -1)
                {
                    throw new ETMS.AppContext.BusinessException(".Poll_QueryPublishObject.CodeExists");
                }
                else if (ex.Message.IndexOf("Index_U_Poll_QueryPublishObjectName", StringComparison.InvariantCultureIgnoreCase) != -1)
                {
                    throw new ETMS.AppContext.BusinessException(".Poll_QueryPublishObject.NameExists");
                }
                //如果仍未处理，则抛出
                throw ex;
            }
        }

        /// <summary>
        /// 删除
        /// </summary>
        protected void doRemove(Int32 queryPublishID)
        {
            try
            {
                DAL.Remove(queryPublishID);
                //记录删除日志（根据ID删除）
                BizLogHelper.Operate(queryPublishID, "删除");
            }
            catch (System.Data.SqlClient.SqlException ex)
            {
                //枚举数据约束异常并转换为业务异常，数据已经使用
                if (ex.Message.IndexOf("FK_", StringComparison.InvariantCultureIgnoreCase) != -1)
                {
                    throw new ETMS.AppContext.BusinessException(".Poll_QueryPublishObject.DataUsed");
                }
                //如果仍未处理，则抛出
                throw ex;
            }
        }

        #region 整合后
        /// <summary>
        /// 根据资源类型，资源ID获取所关联的问卷列表 
        /// </summary>
        /// <param name="resourceType">资源类型</param>
        /// <param name="resourceCode">资源编码</param>
        /// <returns>问卷列表</returns>
        public IList<Poll_Query> GetQueryListByResource(string resourceType, string resourceCode,
            string queryName, int status, int isDisplayResult, int isTemplate, int isPublish,
            DateTime createBeginTime, DateTime createEndTime, DateTime queryBeginTime, DateTime queryEndTime,
            int pageIndex, int pageSize, out int totalRecords)
        {
            Poll_QueryLogic logic = new Poll_QueryLogic();
            StringBuilder filter = new StringBuilder();
            filter.AppendFormat(" AND OrganizationID='{0}' AND QueryID IN (select QueryID from Poll_QueryPublishObject where ResourceCode='{1}' and ResourceTypeCode='{2}')"
                , ETMS.AppContext.UserContext.Current.OrganizationID, resourceCode, resourceType);

            if (!string.IsNullOrEmpty(queryName))
            {
                filter.AppendFormat(" AND [QueryName] like '%{0}%'", queryName.ToSafeSQLValue());
            }
            if (status != -1)
            {
                filter.AppendFormat(" AND [Status]={0}", status);
            }
            if (isDisplayResult != -1)
            {
                filter.AppendFormat(" AND [IsDisplayResult]={0}", isDisplayResult);
            }
            if (isTemplate != -1)
            {
                filter.AppendFormat(" AND [IsTemplate]={0}", isTemplate);
            }
            if (isPublish != -1)
            {
                filter.AppendFormat(" AND [IsPublish]={0}", isPublish);
            }
            if (!createBeginTime.Equals(DateTime.MinValue))
            {
                filter.AppendFormat(" AND [CreateTime]>='{0}'", createBeginTime);
            }
            if (!createEndTime.Equals(DateTime.MinValue))
            {
                filter.AppendFormat(" AND [CreateTime]<'{0}'", createEndTime.AddDays(1));
            }
            if (!queryBeginTime.Equals(DateTime.MinValue))
            {
                filter.AppendFormat(" AND [BeginTime]>='{0}'", queryBeginTime);
            }
            if (!queryEndTime.Equals(DateTime.MinValue))
            {
                filter.AppendFormat(" AND [EndTime]<'{0}'", queryEndTime.AddDays(1));
            }
            return logic.GetEntityList(pageIndex, pageSize, resourceType, " BeginTime desc ", filter.ToString(), out totalRecords);
        }

        /// <summary>
        /// 问卷模板拷贝
        /// </summary>
        /// <param name="templateQueryID"></param>
        /// <param name="resourceType"></param>
        /// <param name="resourceCode"></param>
        /// <returns>新生成的问卷ID</returns>
        public int QueryTemplateCopy(int templateQueryID, string resourceType, string resourceCode)
        {
            return DAL.QueryTemplateCopy(templateQueryID, resourceType, resourceCode, ETMS.AppContext.UserContext.Current.RealName);
        }

        /// <summary>
        /// 针对资源获取问卷发布对象
        /// </summary>
        /// <param name="queryID">问卷ID</param>
        /// <param name="resourceType">资源类型</param>
        /// <param name="resourceCode">资源编码</param>
        /// <returns></returns>
        public Poll_QueryPublishObject GetQueryPublishObjectForResource(Int32 queryID, string resourceType, string resourceCode)
        {
            int totalRecords;
            string filter = string.Format(" AND QueryID={0} AND ResourceTypeCode='{1}' AND ResourceCode='{2}'", queryID, resourceType, resourceCode);
            IList<Poll_QueryPublishObject> list = this.GetEntityList(1, 1, "", filter, out totalRecords);
            if (totalRecords > 0)
            {
                return list[0];
            }
            return null;
        }

        /// <summary>
        /// 根据标识问卷的统计XML文档
        /// </summary>
        /// <param name="queryID">问卷ID</param>
        /// <returns>统计结果 xml文档</returns>
        public string CreateStatResultXMLByQueryID(int queryID, string resourceType, string resourceCode)
        {
            return DAL.CreateStatResultXMLByQueryID(queryID, resourceType, resourceCode);
        }

        /// <summary>
        /// 根据标识问卷的统计XML文档
        /// </summary>
        /// <param name="queryID">问卷ID</param>
        /// <returns>统计结果 xml文档</returns>
        public string CreateStatResultXMLExportByQueryID(int queryID, string resourceType, string resourceCode)
        {
            return DAL.CreateStatResultXMLExportByQueryID(queryID, resourceType, resourceCode);
        }
        #endregion

        /// <summary>
        /// 根据资源类型，资源ID获取所关联的问卷列表
        /// 返回全部的问卷列表，如果在客户端显示，需要进行无效过滤（Status=1 and EndTime>GetDATE()）
        /// 注意：为了方便操作，
        /// Poll_Query.CreateTime被替换成Poll_QueryPublishObject.CreateTime
        /// Poll_Query.IsDisplayColumn被替换成Poll_QueryPublishObject.QueryPublishID
        /// </summary>
        /// <param name="resourceType">资源类型</param>
        /// <param name="resourceCode">资源编码</param>
        /// <returns>问卷列表</returns>
        public List<Poll_Query> GetQueryListByResource(string resourceType, string resourceCode)
        {
            return this.GetQueryListByResource(resourceType, resourceCode, true);
        }

        /// <summary>
        /// 根据资源类型，资源ID获取所关联的问卷列表
        /// 返回全部的问卷列表，如果在客户端显示，需要进行无效过滤（Status=1 and EndTime>GetDATE()）
        /// 注意：为了方便操作，
        /// Poll_Query.CreateTime被替换成Poll_QueryPublishObject.CreateTime
        /// Poll_Query.IsDisplayColumn被替换成Poll_QueryPublishObject.QueryPublishID
        /// </summary>
        /// <param name="resourceType">资源类型</param>
        /// <param name="resourceCode">资源编码</param>
        /// <param name="isRealTime">是否实时提取数据（true:实时查询数据库 false:依赖缓存）</param>
        /// <returns>问卷列表</returns>
        public List<Poll_Query> GetQueryListByResource(string resourceType, string resourceCode, bool isRealTime)
        {
            List<Poll_Query> Querys = null;
            //if (!isRealTime)//如果缓存数据
            //    Querys = InquiryCache.GetInquiryList(resourceType, resourceCode);
            if (Querys == null || isRealTime)////如果缓存数据为null或者不缓存数据
            {
                Poll_QueryLogic QueryLogic = new Poll_QueryLogic();
                Querys = new List<Poll_Query>();
                foreach (DataRow row in DAL.GetQueryListByResource(resourceType, resourceCode).Rows)
                {
                    Poll_Query query = QueryLogic.GetById(Convert.ToInt32(row["QueryID"]));
                    query.CreateTime = (DateTime)row["CreateTime"];
                    //query.IsDisplayColumn = (int)row["QueryPublishID"];
                    Querys.Add(query);
                }
            }
            //if (!isRealTime)//如果缓存数据
            //    InquiryCache.AddInquiryList(resourceType, resourceCode, Querys);
            return Querys;
        }

        /// <summary>
        /// 根据资源编号，资源类型获取所关联的问卷ID（最后一次关联）
        /// </summary>
        /// <param name="resourceType">资源类型</param>
        /// <param name="resourceCode">资源编号</param>
        /// <returns>问卷ID</returns>
        public string GetQueryIdByResourceAttribute(string resourceType, string resourceCode)
        {
            return DAL.GetQueryIdByResourceAttribute(resourceType, resourceCode);
        }
        /// <summary>
        /// 当前问卷所关联的资源数
        /// </summary>
        /// <param name="queryID">问卷ID</param>
        /// <returns>资源数量</returns>
        public Int32 GetPublishObjectCountByQuery(Int32 queryID)
        {
            return DAL.GetPublishObjectCountByQuery(queryID);
        }
        /// <summary>
        /// 当前资源所挂载的问卷数
        /// </summary>
        /// <param name="queryID">资源编号</param>
        /// <returns>问卷数量</returns>
        public Int32 GetPublishObjectCountByResourceCode(string resourceCode)
        {
            return DAL.GetPublishObjectCountByResourceCode(resourceCode);
        }

        /// <summary>
        /// 以问卷ID＋资源类型删除关联关系
        /// </summary>
        public void Remove(Int32 queryID, string resourceType)
        {
            DAL.Remove(queryID, resourceType);
        }
        /// <summary>
        /// 以资源ID＋资源类型删除关联关系
        /// </summary>
        public void Remove(string resourceCode, string resourceType)
        {
            DAL.Remove(resourceCode, resourceType);
        }

        /// <summary>
        /// 获取所有对象列表
        /// </summary>
        public List<Poll_QueryPublishObject> GetQueryPublishObjectList(string resourceCode, string resourceType, int queryID)
        {
            return DAL.GetQueryPublishObjectList(resourceCode, resourceType, queryID);
        }

        /// <summary>
        /// 获取所有对象列表
        /// </summary>
        public List<Poll_QueryPublishObject> GetQueryPublishObjectSearch(string resourceCode, string resourceType, int queryID)
        {
            return DAL.GetQueryPublishObjectSearch(resourceCode, resourceType, queryID);
        }


        //TODO:根据需要设置参数
        /// <summary>
        /// 根据参数获取对象列表（分页，可排序）
        /// </summary>
        /// <remarks>
        /// 仅供示例
        /// </remarks>
        public DataTable GetGetQueryPublishObjectHistoryPagedList(int startRowIndex, int maximumRows, string sortExpression, string criteria, out int historyTotalRecords)
        {
            return DAL.GetGetQueryPublishObjectHistoryPagedList(startRowIndex, maximumRows, sortExpression, criteria, out historyTotalRecords);
        }
    }


}

