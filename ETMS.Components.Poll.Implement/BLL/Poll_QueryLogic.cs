//==================================================================================================
//Version 1.0, auto-generated.
//Generated By running1218
//Date: 2012-4-17 15:53:39.
//==================================================================================================
//==================================================================================================
//This file is generated by CodeGenerator(Ver 2.1)
//==================================================================================================

using System;
using System.Collections.Generic;
using ETMS.Utility;
using ETMS.Utility.Logging;
using ETMS.Components.Poll.API.Entity;
using ETMS.Components.Poll.Implement.DAL;
namespace ETMS.Components.Poll.Implement.BLL
{
    /// <summary>
    /// 调查表业务逻辑
    /// </summary>
    public partial class Poll_QueryLogic
    {
        private static readonly Poll_UserResourceQueryResultDataAccess poll_UserResourceQueryResultDal = new Poll_UserResourceQueryResultDataAccess();
        /// <summary>
        /// 保存操作
        /// </summary>
        public void Save(Poll_Query poll_Query)
        {
            try
            {
                if (poll_Query.QueryID.IsEmpty())
                {
                    //设置主键ID（仅类型为GUID有效，Int型则由数据库自增产生）
                    poll_Query.QueryID = poll_Query.QueryID.NewID(); ;
                    Add(poll_Query);

                    //问卷添加默认栏目
                    Poll_ColumnLogic ColumnLogic = new Poll_ColumnLogic();
                    ColumnLogic.Save(new Poll_Column() { ColumnName = "默认栏目", QueryID = poll_Query.QueryID, CreateTime = DateTime.Now });
                }
                else
                {
                    Update(poll_Query);
                }
            }
            catch (System.Data.SqlClient.SqlException ex)
            {
                //枚举数据约束异常并转换为业务异常
                if (ex.Message.IndexOf("Index_U_Poll_QueryCode", StringComparison.InvariantCultureIgnoreCase) != -1)
                {
                    throw new ETMS.AppContext.BusinessException(".Poll_Query.CodeExists");
                }
                else if (ex.Message.IndexOf("Index_U_Poll_QueryName", StringComparison.InvariantCultureIgnoreCase) != -1)
                {
                    throw new ETMS.AppContext.BusinessException(".Poll_Query.NameExists");
                }
                //如果仍未处理，则抛出
                throw ex;
            }
        }

        /// <summary>
        /// 删除
        /// </summary>
        protected void doRemove(Int32 queryID)
        {
            try
            {
                DAL.Remove(queryID);
                //记录删除日志（根据ID删除）
                BizLogHelper.Operate(queryID, "删除");
            }
            catch (System.Data.SqlClient.SqlException ex)
            {
                //枚举数据约束异常并转换为业务异常，数据已经使用
                if (ex.Message.IndexOf("FK_", StringComparison.InvariantCultureIgnoreCase) != -1)
                {
                    throw new ETMS.AppContext.BusinessException("Poll.Poll_Query.DataUsed");
                }
                //如果仍未处理，则抛出
                throw ex;
            }
        }

        /// <summary>
        /// 根据标识问卷的XML文档
        /// </summary>
        /// <param name="queryID">问卷ID</param>
        /// <returns>xml文档</returns>
        public string CreateXMLByQueryID(int queryID)
        {
            return DAL.CreateXMLByQueryID(queryID);
        }

        /// <summary>
        /// 根据标识问卷的AnswerXML文档
        /// </summary>
        public String CreateAnswerXMLByQueryID(Int32 queryID)
        {
            return DAL.CreateAnswerXMLByQueryID(queryID);
        }

        public int GetQueryUserResultCount(int queryID)
        {
            return DAL.GetQueryUserResultCount(queryID);
        }

        public String CreateAnswerXMLByQueryID(Int32 queryID, int batchID)
        {
            return DAL.CreateXMLByQueryID(queryID, batchID);
        }
        /// <summary>
        /// 根据参数获取对象列表（分页，可排序）
        /// </summary>
        public IList<Poll_Query> GetEntityList(int pageIndex, int pageSize, string sType, string sortExpression, string criteria, out int totalRecords)
        {
            return DAL.GetEntityList(pageIndex, pageSize, sType, sortExpression, criteria, out totalRecords);
        }

        /// <summary>
        /// 用户调查列表
        /// </summary>
        /// <param name="queryID"></param>
        /// <returns></returns>
        public String CreateResltListXMLByQueryID(Int32 queryID,int batchID) 
        {
            return DAL.CreateResltListXMLByQueryID(queryID,batchID);
        }
    }


}

