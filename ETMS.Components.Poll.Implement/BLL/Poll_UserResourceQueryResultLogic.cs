//==================================================================================================
//Version 1.0, auto-generated.
//Generated By running1218
//Date: 2012-4-17 15:53:39.
//==================================================================================================
//==================================================================================================
//This file is generated by CodeGenerator(Ver 2.1)
//==================================================================================================

using System;
using System.Collections.Generic;
using System.Data;
using ETMS.Utility;
using ETMS.Utility.Logging;
using ETMS.Components.Poll.API.Entity;
namespace ETMS.Components.Poll.Implement.BLL
{
    /// <summary>
    /// 业务逻辑
    /// </summary>
    public partial class Poll_UserResourceQueryResultLogic
    {
        /// <summary>
        /// 保存操作
        /// </summary>
        public void Save(Poll_UserResourceQueryResult poll_UserResourceQueryResult)
        {
            try
            {
                if (poll_UserResourceQueryResult.BatchID.IsEmpty())
                {
                    //设置主键ID（仅类型为GUID有效，Int型则由数据库自增产生）
                    poll_UserResourceQueryResult.BatchID = poll_UserResourceQueryResult.BatchID.NewID(); ;
                    Add(poll_UserResourceQueryResult);
                }
                else
                {
                    Update(poll_UserResourceQueryResult);
                }
            }
            catch (System.Data.SqlClient.SqlException ex)
            {
                //枚举数据约束异常并转换为业务异常
                if (ex.Message.IndexOf("Index_U_Poll_UserResourceQueryResultCode", StringComparison.InvariantCultureIgnoreCase) != -1)
                {
                    throw new ETMS.AppContext.BusinessException("Poll.Poll_UserResourceQueryResult.CodeExists");
                }
                else if (ex.Message.IndexOf("Index_U_Poll_UserResourceQueryResultName", StringComparison.InvariantCultureIgnoreCase) != -1)
                {
                    throw new ETMS.AppContext.BusinessException("Poll.Poll_UserResourceQueryResult.NameExists");
                }
                //如果仍未处理，则抛出
                throw ex;
            }
        }

        /// <summary>
        /// 删除
        /// </summary>
        protected void doRemove(Int32 batchID)
        {
            try
            {
                DAL.Remove(batchID);
                //记录删除日志（根据ID删除）
                BizLogHelper.Operate(batchID, "删除");
            }
            catch (System.Data.SqlClient.SqlException ex)
            {
                //枚举数据约束异常并转换为业务异常，数据已经使用
                if (ex.Message.IndexOf("FK_", StringComparison.InvariantCultureIgnoreCase) != -1)
                {
                    throw new ETMS.AppContext.BusinessException("Poll.Poll_UserResourceQueryResult.DataUsed");
                }
                //如果仍未处理，则抛出
                throw ex;
            }
        }

        /// <summary>
        /// 判断用户是否已经投票
        /// </summary>
        /// <param name="queryID">问卷ID</param>
        /// <param name="userID">用户ID</param>
        /// <returns>true|false</returns>
        public bool IsHasJoined(Int32 queryID, string userName, string userType, string resourceType, string resourceCode)
        {
            return DAL.IsHasJoined(queryID, userName, userType, resourceType, resourceCode);
        }

        /// <summary>
        /// 判断是否允许用户多次参与投票
        /// </summary>
        /// <param name="queryID">问卷ID</param>
        /// <param name="userID">用户ID</param>
        /// <returns>true|false</returns>
        public bool IsAllowMultJoin(Int32 queryID, string userName, string userType, string resourceType, string resourceCode)
        {
            Poll_QueryLogic queryLogic = new Poll_QueryLogic();
            Poll_Query query = queryLogic.GetById(queryID);
            bool HasJoined = IsHasJoined(queryID, userName, userType, resourceType, resourceCode);
            if (!query.IsRepeat)//不允许重复投票
            {
                return !HasJoined;
            }
            else//允许重复投票
            {
                return true;
            }
        }

        /// <summary>
        /// 获取用户最后一次答卷明细
        /// </summary>
        /// <param name="queryID">问卷ID</param>
        /// <param name="resourceType">问卷类型</param>
        /// <param name="resourceCode">资源编号</param>
        /// <param name="userID">用户ID</param>
        /// <returns>答题记录XML文档</returns>
        public string CreateAnswerXMLOfUserByQueryID(int batchID)
        {
            return DAL.CreateAnswerXMLOfUserByQueryID(batchID);
        }

        /// <summary>
        /// 获取提交问卷的用户数
        /// </summary>
        /// <param name="queryID"></param>
        /// <param name="resourceType"></param>
        /// <param name="resourceCode"></param>
        /// <returns></returns>
        public int GetAnswerQueryUserCount(Int32 queryID, string resourceType, string resourceCode)
        {
            int totalRecords;
            DAL.GetPagedList
                (
                    1,
                    0,
                    "",
                    string.Format(" and [QueryID]={0} and ResourceTypeCode='{1}' and ResourceCode='{2}'", queryID, resourceType, resourceCode),
                    out totalRecords
                );
            return totalRecords;
        }

        /// <summary>
        /// 获取用户下的所有调查问卷 已发布 启用 未结束 未作答
        /// </summary>
        /// <param name="userID">用户ID</param>
        /// <param name="orgID">用户所在的组织机构ID</param>
        /// <returns></returns>
        public DataTable GetQueryListNoAnswerByUserID(int userID, int orgID)
        {
            return DAL.GetQueryListNoAnswerByUserID(userID, orgID);
        }



        /// <summary>
        /// 获取用户下的所有调查问卷 已发布 启用 未结束
        /// </summary>
        public DataTable GetQueryListForUserPagedList(int userID, int organizationID)
        {
            return DAL.GetQueryListForUserPagedList(userID, organizationID);
        }

        /// <summary>
        /// 获取用户下的所有调查问卷 已发布 启用 未结束
        /// </summary>
        public IList<Poll_Query> GetQueryListForUserPagedList(int userID, int organizationID, int topSize)
        {
            return DAL.GetQueryListForUserPagedList(userID, organizationID).ToList<Poll_Query>().PageList<Poll_Query>(1, topSize);
        }

        /// <summary>
        /// 根据试卷ID查询答卷人数和选择人数
        /// </summary>
        /// <param name="queryID"></param>
        /// <returns></returns>
        public int GetQueryUserCount(int queryID)
        {
            return DAL.GetQueryUserCount(queryID);
        }
    }
}

