<?xml version="1.0" encoding="utf-8" ?>
<sqlMap namespace="ETMS.Components.Exam.Implement.DAL" xmlns="http://ibatis.apache.org/mapping" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" >
  <resultMaps>
    <resultMap id="TreeCategory.ResultMap"  class="ETMS.Components.Exam.API.Entity.ItemBank.TreeCategory,ETMS.Components.Exam.API" >
      <result property="CategoryID"       column="CategoryID"/>
      <result property="CategoryName"     column="CategoryName"/>
      <result property="CategoryType"     column="CategoryType"/>
      <result property="ParentID"         column="ParentID"/>
      <result property="Depth"            column="Depth"/>
      <result property="PathID"           column="PathID"/>
      <result property="PathName"         column="PathName"/>
      <result property="ChildrenCount"    column="ChildrenCount"/>
      <result property="DisplayOrder"     column="DisplayOrder"/>
      <result property="OwnerType"        column="OwnerType"/>
      <result property="OwnerID"          column="OwnerID"/>
      <result property="CreatedUserID"    column="CreatedUserID"/>
      <result property="CreatedDate"      column="CreatedDate"/>
    </resultMap>
  </resultMaps>
  <parameterMaps>
    <parameterMap id="CategoryMap" class ="Hashtable">
      <parameter property="CategoryID" column="CategoryID"/>
    </parameterMap>
  </parameterMaps>
  <statements>
    <insert id="TreeCategory.Add">
      <![CDATA[
DECLARE @CHILDREN_COUNT VARCHAR(10);
DECLARE @ALL_Path VARCHAR(100);
DECLARE @ALL_PathName VARCHAR(4000);
DECLARE @Depth smallint;

Begin Tran
UPDATE KS_TreeCategory SET 
 [ChildrenCount]=[ChildrenCount]+1
,@CHILDREN_COUNT=CAST(([ChildrenCount]+1) AS VARCHAR(10))
,@ALL_Path=IsNull([PathID],'')
,@ALL_PathName=IsNull(PathName,'')
,@Depth=Depth + 1
WHERE [CategoryID]=#ParentID#;

IF (@ALL_Path is null) and (@ALL_PathName is null)
Begin
RollBack Tran
return
End

SELECT @ALL_Path=@ALL_Path+'/'+ REPLICATE('0',4-LEN(@CHILDREN_COUNT))+@CHILDREN_COUNT;
IF(#DisplayOrder#=0)
BEGIN
    INSERT INTO [KS_TreeCategory]
    ([CategoryID]
    ,[CategoryName]
    ,CategoryType
    ,[ParentID]
    ,[Depth]
    ,[PathID]
    ,[PathName]
    ,[ChildrenCount]
    ,[DisplayOrder]
    ,OwnerType
    ,OwnerID
    ,IsDelete
    ,CreatedUserID
    ,CreatedDate)
    VALUES
    (#CategoryID#,
    #CategoryName#,
    #CategoryType#,
    #ParentID#,
    @Depth,@ALL_Path,@ALL_PathName+'/$CategoryName$',
    0,@CHILDREN_COUNT,#OwnerType#,#OwnerID#,
    0,#CreatedUserID#,GETDATE())
END
ELSE
BEGIN
    INSERT INTO [KS_TreeCategory]
    ([CategoryID]
    ,[CategoryName]
    ,CategoryType
    ,[ParentID]
    ,[Depth]
    ,[PathID]
    ,[PathName]
    ,[ChildrenCount]
    ,[DisplayOrder]
    ,OwnerType
    ,OwnerID
    ,IsDelete
    ,CreatedUserID
    ,CreatedDate)
      VALUES
      (#CategoryID#,#CategoryName#,#CategoryType#,#ParentID#,
      #Depth#,@ALL_Path,@ALL_PathName+'/$CategoryName$',
      0,#DisplayOrder#,#OwnerType#,#OwnerID#,
      0,#CreatedUserID#,GETDATE())
END
Commit Tran
       ]]>
    </insert>
    <update id="TreeCategory.Update">
      <![CDATA[
UPDATE KS_TreeCategory
SET CategoryName=#CategoryName#
,Depth=#Depth#
,[PathName]=#PathName#
,[DisplayOrder]=#DisplayOrder#
WHERE CategoryID=#CategoryID#
       ]]>
    </update>
    <delete id="TreeCategory.Delete">
      <![CDATA[
Begin Tran
declare @ParentID uniqueidentifier
select @ParentID=ParentID FROM KS_TreeCategory where CategoryID=#value#
IF @ParentID is null
Begin
RollBack Tran
return
End
UPDATE KS_TreeCategory Set ChildrenCount=ChildrenCount-1 Where CategoryID=@ParentID
UPDATE KS_TreeCategory SET [IsDelete]=1 WHERE CategoryID=#value#
UPDATE KS_TreeCategory SET [IsDelete]=1 WHERE ParentID=#value#
UPDATE KS_TreeCategory SET [IsDelete]=1 WHERE ParentID in(
 select CategoryID FROM KS_TreeCategory where ParentID=#value#
)
Commit Tran
]]>
    </delete>
    <select id="TreeCategory.GetByID" resultMap="TreeCategory.ResultMap">
      SELECT * FROM KS_TreeCategory WHERE CategoryID=#value# and IsDelete=0
    </select>
    <select id="TreeCategory.GetAllChildrenByParentID" resultMap="TreeCategory.ResultMap">
      SELECT * FROM KS_TreeCategory WHERE
      ParentID=#ParentID# and
      CategoryType=#CategoryType# and
      OwnerID=#OwnerID# and
      OwnerType=#OwnerType# and
      IsDelete=0 Order by DisplayOrder
    </select>
    <select id="TreeCategory.GetAllCategory" resultMap="TreeCategory.ResultMap">
      SELECT * FROM KS_TreeCategory WHERE
      CategoryType=#CategoryType# and
      OwnerID=#OwnerID# and
      OwnerType=#OwnerType# and
      IsDelete=0
      order by [PathName],DisplayOrder
    </select>


    <delete id="TreeCategory.PhysicalDelete">
      DELETE FROM KS_TreeCategory WHERE CategoryID=#value#
    </delete>
    <update id="TreeCategory.IncreaseNodeIndex">
      UPDATE KS_TreeCategory SET DisplayOrder=DisplayOrder+1 WHERE CategoryID=#value#
    </update>
    <update id="TreeCategory.ReduceNodeIndex">
      UPDATE KS_TreeCategory SET DisplayOrder=DisplayOrder-1 WHERE CategoryID=#value#
    </update>
    <update id="TreeCategory.UpdateNodeIndex">
      UPDATE KS_TreeCategory SET DisplayOrder=DisplayOrder+1 WHERE ParentID=#ParentID# AND DisplayOrder>=#MixOrder#
    </update>
    <update id="TreeCategory.SwitchNodeIndex">
      UPDATE KS_TreeCategory SET DisplayOrder=DisplayOrder+1 WHERE CategoryID=#DownNodeID#
      UPDATE KS_TreeCategory SET DisplayOrder=DisplayOrder-1 WHERE CategoryID=#UpNodeID#
    </update>
    <statement id="TreeCategory.IsExist" resultClass="int">
      Select COUNT(*) from KS_TreeCategory Where OwnerID=#OwnerID# and IsDelete=0 and CategoryType=#Type#
    </statement>
    <procedure id="TreeCategory.UpdateChildCategories" parameterMap="CategoryMap">
      pr_Exam_UpdateChildCategories
    </procedure>

    <!-- 获取课程对应的卷库列表 -->
    <select id="TreeCategory.GetAllTestPaperLibraryByCourseID" resultMap="TreeCategory.ResultMap">
      SELECT a.[CategoryID]
      ,[CategoryName]
      ,[CategoryType]
      ,[ParentID]
      ,[Depth]
      ,[PathID]
      ,[PathName]
      ,[ChildrenCount]
      ,[DisplayOrder]
      ,[OwnerType]
      ,[OwnerID]
      ,[IsDelete]
      ,a.[CreatedUserID]
      ,a.[CreatedDate]
      FROM [dbo].[KS_TreeCategory] a
      inner join [dbo].[KS_TestPaperBankCourseMap] b on a.[CategoryID]=b.[CategoryID]
      WHERE b.[CourseID]=#value#
    </select>

    <!-- 获取课程考试资源对应的试卷 -->
    <select id="TreeCategory.GetCourseExamResTestPaper" resultMap="Test.TestPaper.ResultMap">
      SELECT a.[TestPaperID],[TestPaperName],[TestPaperType],[TestPaperCategory],[TestPaperDesc],[TotalQuantity],[TotalScore]
      ,[PassedScore],[MaxCount],[MaxTime],[Status],[ApproverID],[ApproveTime],[ObjectID],[Subject],[UpdatedDate],a.[CreatedUserID],a.[CreatedDate]
      FROM [KS_TestPaper] a inner join KS_CourseExamResTestPaperMap b on a.TestPaperID=b.TestPaperID
      WHERE b.ExamResID=#value#
    </select>
    
    <!-- 添加课程卷库关系 -->
    <insert id="TreeCategory.AddTestPaperBankCourseMap">
      INSERT INTO [dbo].[KS_TestPaperBankCourseMap]([MapID],[CourseID],[CategoryID],[CreatedUserID],[CreatedDate])
      VALUES(#MapID#,#CourseID#,#TestPaperBankID#,#CreatedUserID#,getdate())
    </insert>

    <!-- 添加课程考试资源试卷关系 -->
    <insert id="TreeCategory.AddCourseExamResTestPaperMap">
      INSERT INTO [dbo].[KS_CourseExamResTestPaperMap]
      ([MapID]
      ,[TestPaperID]
      ,[ExamResID]
      ,[ExamResType]
      ,[CreatedUserID]
      ,[CreatedDate])
      VALUES
      (#MapID#,#TestPaperID# ,#ExamResID#,#ExamResType#,#CreatedUserID#,getdate())
    </insert>
  </statements>
</sqlMap>