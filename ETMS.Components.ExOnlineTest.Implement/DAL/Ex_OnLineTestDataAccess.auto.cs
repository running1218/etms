//==================================================================================================
//Version 1.0, auto-generated.
//Generated By running1218
//Date: 2012-4-1 16:08:36.
//==================================================================================================
//==================================================================================================
//This file is generated by CodeGenerator(Ver 2.1)
//==================================================================================================

using System;
using System.Data;
using ETMS.Utility;

using System.Data.SqlClient;
using ETMS.Utility.Data;

using ETMS.Components.ExOnlineTest.API.Entity;

namespace ETMS.Components.ExOnlineTest.Implement.DAL
{
    /// <summary>
    /// 在线测试表数据访问
    /// </summary>
    public partial class Ex_OnLineTestDataAccess
	{
		/// <summary>
		/// 增加
		/// </summary>
		public void Add(Ex_OnLineTest ex_OnLineTest)
		{
			string commandName = "dbo.Pr_Ex_OnLineTest_Insert";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSWrite, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@OnLineTestID", SqlDbType.UniqueIdentifier),
					new SqlParameter("@OrgID", SqlDbType.Int),
					new SqlParameter("@OnLineTestName", SqlDbType.NVarChar, 200),
					new SqlParameter("@OnLineTestDesc", SqlDbType.NVarChar, -1),
					new SqlParameter("@IsShowAnswer", SqlDbType.Int),
					new SqlParameter("@OnLineTestStatus", SqlDbType.Int),
					new SqlParameter("@LimitTime", SqlDbType.Int),
                    new SqlParameter("@TotalScore", SqlDbType.Decimal, 5, ParameterDirection.Input, true, 6, 2, String.Empty, DataRowVersion.Default, null),
					new SqlParameter("@PassLine", SqlDbType.Decimal, 5, ParameterDirection.Input, true, 6, 2, String.Empty, DataRowVersion.Default, null),
					new SqlParameter("@CreateTime", SqlDbType.DateTime),
					new SqlParameter("@CreateUserID", SqlDbType.Int),
					new SqlParameter("@CreateUser", SqlDbType.NVarChar, 128),
					new SqlParameter("@ModifyTime", SqlDbType.DateTime),
					new SqlParameter("@ModifyUser", SqlDbType.NVarChar, 128),
					new SqlParameter("@Remark", SqlDbType.NVarChar, -1),
					new SqlParameter("@DelFlag", SqlDbType.Bit),
					new SqlParameter("@TestPaperID", SqlDbType.NVarChar, 100)
					};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSWrite, commandName, parms);
			}
			
			parms[0].Value = ex_OnLineTest.OnLineTestID;
			parms[1].Value = ex_OnLineTest.OrgID;
			if (ex_OnLineTest.OnLineTestName!= null){ parms[2].Value = ex_OnLineTest.OnLineTestName; } else { parms[2].Value = DBNull.Value; }
			if (ex_OnLineTest.OnLineTestDesc!= null){ parms[3].Value = ex_OnLineTest.OnLineTestDesc; } else { parms[3].Value = DBNull.Value; }
			parms[4].Value = ex_OnLineTest.IsShowAnswer;
			parms[5].Value = ex_OnLineTest.OnLineTestStatus;
			parms[6].Value = ex_OnLineTest.LimitTime;
            parms[7].Value = ex_OnLineTest.TotalScore;
			parms[8].Value = ex_OnLineTest.PassLine;
			parms[9].Value = ex_OnLineTest.CreateTime;
			parms[10].Value = ex_OnLineTest.CreateUserID;
			if (ex_OnLineTest.CreateUser!= null){ parms[11].Value = ex_OnLineTest.CreateUser; } else { parms[11].Value = DBNull.Value; }
			parms[12].Value = ex_OnLineTest.ModifyTime;
			if (ex_OnLineTest.ModifyUser!= null){ parms[13].Value = ex_OnLineTest.ModifyUser; } else { parms[13].Value = DBNull.Value; }
			if (ex_OnLineTest.Remark!= null){ parms[14].Value = ex_OnLineTest.Remark; } else { parms[14].Value = DBNull.Value; }
			parms[15].Value = ex_OnLineTest.DelFlag;
			if (ex_OnLineTest.TestPaperID!= null){ parms[16].Value = ex_OnLineTest.TestPaperID; } else { parms[16].Value = DBNull.Value; }
			#endregion
			SqlHelper.ExecuteNonQuery(ConnectionString.ETMSWrite, CommandType.StoredProcedure, commandName, parms);
			
		}
		
		/// <summary>
		/// 删除
		/// </summary>
		public void Remove(Guid onLineTestID)
		{
			string commandName = "dbo.Pr_Ex_OnLineTest_Delete";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSWrite, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@OnLineTestID", SqlDbType.UniqueIdentifier)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSWrite, commandName, parms);
			}
			
			parms[0].Value = onLineTestID;
			
			#endregion
			SqlHelper.ExecuteNonQuery(ConnectionString.ETMSWrite, CommandType.StoredProcedure, commandName, parms);
		}
		
		/// <summary>
		/// 保存
		/// </summary>
		public void Save(Ex_OnLineTest ex_OnLineTest)
		{
			string commandName = "dbo.Pr_Ex_OnLineTest_Update";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSWrite, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@OnLineTestID", SqlDbType.UniqueIdentifier),
					new SqlParameter("@OrgID", SqlDbType.Int),
					new SqlParameter("@OnLineTestName", SqlDbType.NVarChar, 200),
					new SqlParameter("@OnLineTestDesc", SqlDbType.NVarChar, -1),
					new SqlParameter("@IsShowAnswer", SqlDbType.Int),
					new SqlParameter("@OnLineTestStatus", SqlDbType.Int),
					new SqlParameter("@LimitTime", SqlDbType.Int),
                    new SqlParameter("@TotalScore", SqlDbType.Decimal, 5, ParameterDirection.Input, true, 6, 2, String.Empty, DataRowVersion.Default, null),
					new SqlParameter("@PassLine", SqlDbType.Decimal, 5, ParameterDirection.Input, true, 6, 2, String.Empty, DataRowVersion.Default, null),
					new SqlParameter("@CreateTime", SqlDbType.DateTime),
					new SqlParameter("@CreateUserID", SqlDbType.Int),
					new SqlParameter("@CreateUser", SqlDbType.NVarChar, 128),
					new SqlParameter("@ModifyTime", SqlDbType.DateTime),
					new SqlParameter("@ModifyUser", SqlDbType.NVarChar, 128),
					new SqlParameter("@Remark", SqlDbType.NVarChar, -1),
					new SqlParameter("@DelFlag", SqlDbType.Bit),
					new SqlParameter("@TestPaperID", SqlDbType.NVarChar, 100)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSWrite, commandName, parms);
			}
			
			parms[0].Value = ex_OnLineTest.OnLineTestID;
			parms[1].Value = ex_OnLineTest.OrgID;
			if (ex_OnLineTest.OnLineTestName!= null){ parms[2].Value = ex_OnLineTest.OnLineTestName; } else { parms[2].Value = DBNull.Value; }
			if (ex_OnLineTest.OnLineTestDesc!= null){ parms[3].Value = ex_OnLineTest.OnLineTestDesc; } else { parms[3].Value = DBNull.Value; }
			parms[4].Value = ex_OnLineTest.IsShowAnswer;
			parms[5].Value = ex_OnLineTest.OnLineTestStatus;
			parms[6].Value = ex_OnLineTest.LimitTime;
			parms[7].Value = ex_OnLineTest.TotalScore;
            parms[8].Value = ex_OnLineTest.PassLine;
			parms[9].Value = ex_OnLineTest.CreateTime;
			parms[10].Value = ex_OnLineTest.CreateUserID;
			if (ex_OnLineTest.CreateUser!= null){ parms[11].Value = ex_OnLineTest.CreateUser; } else { parms[11].Value = DBNull.Value; }
			parms[12].Value = ex_OnLineTest.ModifyTime;
			if (ex_OnLineTest.ModifyUser!= null){ parms[13].Value = ex_OnLineTest.ModifyUser; } else { parms[13].Value = DBNull.Value; }
			if (ex_OnLineTest.Remark!= null){ parms[14].Value = ex_OnLineTest.Remark; } else { parms[14].Value = DBNull.Value; }
			parms[15].Value = ex_OnLineTest.DelFlag;
			if (ex_OnLineTest.TestPaperID!= null){ parms[16].Value = ex_OnLineTest.TestPaperID; } else { parms[16].Value = DBNull.Value; }
			#endregion
			SqlHelper.ExecuteNonQuery(ConnectionString.ETMSWrite, CommandType.StoredProcedure, commandName, parms);
		}
		
		/// <summary>
		/// 根据标识获取对象
		/// </summary>
		public Ex_OnLineTest GetById(Guid onLineTestID)
		{
			Ex_OnLineTest ex_OnLineTest = null;
			
			string commandName = "dbo.Pr_Ex_OnLineTest_GetByPK";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSRead, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@OnLineTestID", SqlDbType.UniqueIdentifier)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSRead, commandName, parms);
			}
			
			parms[0].Value = onLineTestID;
			
			#endregion
            //using (SqlDataReader dataReader = SqlHelper.ExecuteReader(ConnectionString.ETMSRead, CommandType.StoredProcedure, commandName, parms))
            //{
            //    if (dataReader.Read())
            //    {
            //        ex_OnLineTest = PopulateEx_OnLineTestFromDataReader(dataReader);
            //    }
            //}
            DataTable tab = SqlHelper.ExecuteDataset(ConnectionString.ETMSRead, CommandType.StoredProcedure, commandName, parms).Tables[0];
            if(tab != null && tab.Rows.Count >0)
            {
                ex_OnLineTest = PopulateEx_OnLineTestFromDataRow(tab.Rows[0]);                
            }
			
			return ex_OnLineTest;
		}				
		
		/// <summary>
		/// 根据参数获取对象列表（分页，可排序）
		/// </summary>
		public DataTable GetPagedList(int pageIndex, int pageSize, string sortExpression, string criteria, out int totalRecords)
		{			
			string commandName = "dbo.Pr_Ex_OnLineTest_GetPagedList";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSRead, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@PageIndex", SqlDbType.Int),
					new SqlParameter("@PageSize", SqlDbType.Int),
					new SqlParameter("@SortExpression", SqlDbType.VarChar),
					new SqlParameter("@Criteria", SqlDbType.VarChar),
					new SqlParameter("@ReturnValue", SqlDbType.Int, 4, ParameterDirection.ReturnValue, false, 0, 0, String.Empty, DataRowVersion.Default, null)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSRead, commandName, parms);
			}
			
			parms[0].Value = pageIndex;
			parms[1].Value = pageSize;
			parms[2].Value = sortExpression;
			parms[3].Value = criteria;
			#endregion
			DataTable dt=SqlHelper.ExecuteDataset(ConnectionString.ETMSRead, CommandType.StoredProcedure, commandName, parms).Tables[0];
			totalRecords = (int)parms[4].Value;
			return dt;
		}
		
		/// <summary>
		/// 从DataReader中读取数据到业务对象
		/// </summary>
		private Ex_OnLineTest PopulateEx_OnLineTestFromDataReader(SqlDataReader reader)
		{
			Ex_OnLineTest ex_OnLineTest = new Ex_OnLineTest();
			
			int onLineTestIDIndex = reader.GetOrdinal("OnLineTestID"); 
			if(!reader.IsDBNull(onLineTestIDIndex))
			{
				ex_OnLineTest.OnLineTestID= reader.GetGuid(onLineTestIDIndex);
			}
			
			int orgIDIndex = reader.GetOrdinal("OrgID"); 
			if(!reader.IsDBNull(orgIDIndex))
			{
				ex_OnLineTest.OrgID= reader.GetInt32(orgIDIndex);
			}
			
			int onLineTestNameIndex = reader.GetOrdinal("OnLineTestName"); 
			if(!reader.IsDBNull(onLineTestNameIndex))
			{
				ex_OnLineTest.OnLineTestName= reader.GetString(onLineTestNameIndex);
			}
			
			int onLineTestDescIndex = reader.GetOrdinal("OnLineTestDesc"); 
			if(!reader.IsDBNull(onLineTestDescIndex))
			{
				ex_OnLineTest.OnLineTestDesc= reader.GetString(onLineTestDescIndex);
			}
			
			int isShowAnswerIndex = reader.GetOrdinal("IsShowAnswer"); 
			if(!reader.IsDBNull(isShowAnswerIndex))
			{
				ex_OnLineTest.IsShowAnswer= reader.GetInt32(isShowAnswerIndex);
			}
			
			int onLineTestStatusIndex = reader.GetOrdinal("OnLineTestStatus"); 
			if(!reader.IsDBNull(onLineTestStatusIndex))
			{
				ex_OnLineTest.OnLineTestStatus= reader.GetInt32(onLineTestStatusIndex);
			}
			
			int limitTimeIndex = reader.GetOrdinal("LimitTime"); 
			if(!reader.IsDBNull(limitTimeIndex))
			{
				ex_OnLineTest.LimitTime= reader.GetInt32(limitTimeIndex);
			}

            int totalScoreIndex = reader.GetOrdinal("TotalScore");
            if (!reader.IsDBNull(totalScoreIndex))
            {
                ex_OnLineTest.TotalScore = reader.GetDecimal(totalScoreIndex);
            }

			int passLineIndex = reader.GetOrdinal("PassLine"); 
			if(!reader.IsDBNull(passLineIndex))
			{
				ex_OnLineTest.PassLine= reader.GetDecimal(passLineIndex);
			}
			
			int createTimeIndex = reader.GetOrdinal("CreateTime"); 
			if(!reader.IsDBNull(createTimeIndex))
			{
				ex_OnLineTest.CreateTime= reader.GetDateTime(createTimeIndex);
			}
			
			int createUserIDIndex = reader.GetOrdinal("CreateUserID"); 
			if(!reader.IsDBNull(createUserIDIndex))
			{
				ex_OnLineTest.CreateUserID= reader.GetInt32(createUserIDIndex);
			}
			
			int createUserIndex = reader.GetOrdinal("CreateUser"); 
			if(!reader.IsDBNull(createUserIndex))
			{
				ex_OnLineTest.CreateUser= reader.GetString(createUserIndex);
			}
			
			int modifyTimeIndex = reader.GetOrdinal("ModifyTime"); 
			if(!reader.IsDBNull(modifyTimeIndex))
			{
				ex_OnLineTest.ModifyTime= reader.GetDateTime(modifyTimeIndex);
			}
			
			int modifyUserIndex = reader.GetOrdinal("ModifyUser"); 
			if(!reader.IsDBNull(modifyUserIndex))
			{
				ex_OnLineTest.ModifyUser= reader.GetString(modifyUserIndex);
			}
			
			int remarkIndex = reader.GetOrdinal("Remark"); 
			if(!reader.IsDBNull(remarkIndex))
			{
				ex_OnLineTest.Remark= reader.GetString(remarkIndex);
			}
			
			int delFlagIndex = reader.GetOrdinal("DelFlag"); 
			if(!reader.IsDBNull(delFlagIndex))
			{
				ex_OnLineTest.DelFlag= reader.GetBoolean(delFlagIndex);
			}
			
			int testPaperIDIndex = reader.GetOrdinal("TestPaperID"); 
			if(!reader.IsDBNull(testPaperIDIndex))
			{
				ex_OnLineTest.TestPaperID= reader.GetString(testPaperIDIndex);
			}
			
			return ex_OnLineTest; 
		}

        private Ex_OnLineTest PopulateEx_OnLineTestFromDataRow(DataRow row)
        {
            Ex_OnLineTest ex_OnLineTest = new Ex_OnLineTest();
            if (!Convert.IsDBNull(row["OnLineTestID"]))
            {
                ex_OnLineTest.OnLineTestID = row["OnLineTestID"].ToGuid();
            }
            if (!Convert.IsDBNull(row["OrgID"]))
            {
                ex_OnLineTest.OrgID = row["OrgID"].ToInt();
            }
            if (!Convert.IsDBNull(row["OnLineTestName"]))
            {
                ex_OnLineTest.OnLineTestName = row["OnLineTestName"].ToString();
            }
            if (!Convert.IsDBNull(row["OnLineTestDesc"]))
            {
                ex_OnLineTest.OnLineTestDesc = row["OnLineTestDesc"].ToString();
            }
            if (!Convert.IsDBNull(row["IsShowAnswer"]))
            {
                ex_OnLineTest.IsShowAnswer = row["IsShowAnswer"].ToInt();
            }
            if (!Convert.IsDBNull(row["OnLineTestStatus"]))
            {
                ex_OnLineTest.OnLineTestStatus = row["OnLineTestStatus"].ToInt();
            }
            if (!Convert.IsDBNull(row["LimitTime"]))
            {
                ex_OnLineTest.LimitTime = row["LimitTime"].ToInt();
            }
            if (!Convert.IsDBNull(row["TotalScore"]))
            {
                ex_OnLineTest.TotalScore =(decimal)row["TotalScore"];
            }
            if (!Convert.IsDBNull(row["PassLine"]))
            {
                ex_OnLineTest.PassLine = (decimal)row["PassLine"];
            }
            if (!Convert.IsDBNull(row["CreateTime"]))
            {
                ex_OnLineTest.CreateTime = row["CreateTime"].ToDateTime();
            }
            if (!Convert.IsDBNull(row["CreateUserID"]))
            {
                ex_OnLineTest.CreateUserID = row["CreateUserID"].ToInt();
            }
            if (!Convert.IsDBNull(row["CreateUser"]))
            {
                ex_OnLineTest.CreateUser = row["CreateUser"].ToString();
            }
            if (!Convert.IsDBNull(row["ModifyTime"]))
            {
                ex_OnLineTest.ModifyTime = row["ModifyTime"].ToDateTime();
            }
            if (!Convert.IsDBNull(row["ModifyUser"]))
            {
                ex_OnLineTest.ModifyUser = row["ModifyUser"].ToString();
            }
            if (!Convert.IsDBNull(row["Remark"]))
            {
                ex_OnLineTest.Remark = row["Remark"].ToString();
            }
            if (!Convert.IsDBNull(row["DelFlag"]))
            {
                ex_OnLineTest.DelFlag =(bool)row["DelFlag"];
            }
            if (!Convert.IsDBNull(row["TestPaperID"]))
            {
                ex_OnLineTest.TestPaperID = row["TestPaperID"].ToString();
            }

            return ex_OnLineTest;
        }

	}
}
