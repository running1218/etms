//==================================================================================================
//Version 1.0, auto-generated.
//Generated By running1218
//Date: 2012-5-19 9:14:51.
//==================================================================================================
//==================================================================================================
//This file is generated by CodeGenerator(Ver 2.1)
//==================================================================================================

using System;
using System.Collections.Generic;
using System.Data;

using System.Data.SqlClient;
using ETMS.Utility.Data;

using ETMS.Components.ExContest.API.Entity.StudentContest;

namespace ETMS.Components.ExContest.Implement.DAL.StudentContest
{
    /// <summary>
    /// 学生闯关竞赛结果表数据访问
    /// </summary>
    public partial class Ex_StudentContestDataAccess
	{
		/// <summary>
		/// 增加
		/// </summary>
		public void Add(Ex_StudentContest ex_StudentContest)
		{
			string commandName = "dbo.Pr_Ex_StudentContest_Insert";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSWrite, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@StudentContestID", SqlDbType.UniqueIdentifier),
					new SqlParameter("@ContestID", SqlDbType.UniqueIdentifier),
					new SqlParameter("@StudentID", SqlDbType.Int),
					new SqlParameter("@TrainingItemCourseID", SqlDbType.UniqueIdentifier),
					new SqlParameter("@Score", SqlDbType.Decimal, 9, ParameterDirection.Input, true, 18, 0, String.Empty, DataRowVersion.Default, null),
					new SqlParameter("@BeginTime", SqlDbType.DateTime),
					new SqlParameter("@EndTime", SqlDbType.DateTime),
					new SqlParameter("@UserExamID", SqlDbType.UniqueIdentifier),
					new SqlParameter("@StudentCourseID", SqlDbType.UniqueIdentifier)
					};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSWrite, commandName, parms);
			}
			
			parms[0].Value = ex_StudentContest.StudentContestID;
			parms[1].Value = ex_StudentContest.ContestID;
			parms[2].Value = ex_StudentContest.StudentID;
			parms[3].Value = ex_StudentContest.TrainingItemCourseID;
			parms[4].Value = ex_StudentContest.Score;
			parms[5].Value = ex_StudentContest.BeginTime;
			parms[6].Value = ex_StudentContest.EndTime;
			parms[7].Value = ex_StudentContest.UserExamID;
			parms[8].Value = ex_StudentContest.StudentCourseID;
			#endregion
			SqlHelper.ExecuteNonQuery(ConnectionString.ETMSWrite, CommandType.StoredProcedure, commandName, parms);
			
		}
		
		/// <summary>
		/// 删除
		/// </summary>
		public void Remove(Guid studentContestID)
		{
			string commandName = "dbo.Pr_Ex_StudentContest_Delete";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSWrite, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@StudentContestID", SqlDbType.UniqueIdentifier)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSWrite, commandName, parms);
			}
			
			parms[0].Value = studentContestID;
			
			#endregion
			SqlHelper.ExecuteNonQuery(ConnectionString.ETMSWrite, CommandType.StoredProcedure, commandName, parms);
		}
		
		/// <summary>
		/// 保存
		/// </summary>
		public void Save(Ex_StudentContest ex_StudentContest)
		{
			string commandName = "dbo.Pr_Ex_StudentContest_Update";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSWrite, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@StudentContestID", SqlDbType.UniqueIdentifier),
					new SqlParameter("@ContestID", SqlDbType.UniqueIdentifier),
					new SqlParameter("@StudentID", SqlDbType.Int),
					new SqlParameter("@TrainingItemCourseID", SqlDbType.UniqueIdentifier),
					new SqlParameter("@Score", SqlDbType.Decimal, 9, ParameterDirection.Input, true, 18, 0, String.Empty, DataRowVersion.Default, null),
					new SqlParameter("@BeginTime", SqlDbType.DateTime),
					new SqlParameter("@EndTime", SqlDbType.DateTime),
					new SqlParameter("@UserExamID", SqlDbType.UniqueIdentifier),
					new SqlParameter("@StudentCourseID", SqlDbType.UniqueIdentifier)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSWrite, commandName, parms);
			}
			
			parms[0].Value = ex_StudentContest.StudentContestID;
			parms[1].Value = ex_StudentContest.ContestID;
			parms[2].Value = ex_StudentContest.StudentID;
			parms[3].Value = ex_StudentContest.TrainingItemCourseID;
			parms[4].Value = ex_StudentContest.Score;
			parms[5].Value = ex_StudentContest.BeginTime;
			parms[6].Value = ex_StudentContest.EndTime;
			parms[7].Value = ex_StudentContest.UserExamID;
			parms[8].Value = ex_StudentContest.StudentCourseID;
			#endregion
			SqlHelper.ExecuteNonQuery(ConnectionString.ETMSWrite, CommandType.StoredProcedure, commandName, parms);
		}
		
		/// <summary>
		/// 根据标识获取对象
		/// </summary>
		public Ex_StudentContest GetById(Guid studentContestID)
		{
			Ex_StudentContest ex_StudentContest = null;
			
			string commandName = "dbo.Pr_Ex_StudentContest_GetByPK";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSRead, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@StudentContestID", SqlDbType.UniqueIdentifier)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSRead, commandName, parms);
			}
			
			parms[0].Value = studentContestID;
			
			#endregion
			using (SqlDataReader dataReader = SqlHelper.ExecuteReader(ConnectionString.ETMSRead, CommandType.StoredProcedure, commandName, parms))
			{
				if (dataReader.Read())
				{
					ex_StudentContest = PopulateEx_StudentContestFromDataReader(dataReader);
				}
			}
			
			return ex_StudentContest;
		}				
		
		/// <summary>
		/// 根据参数获取对象列表（分页，可排序）
		/// </summary>
		public DataTable GetPagedList(int pageIndex, int pageSize, string sortExpression, string criteria, out int totalRecords)
		{			
			string commandName = "dbo.Pr_Ex_StudentContest_GetPagedList";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSRead, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@PageIndex", SqlDbType.Int),
					new SqlParameter("@PageSize", SqlDbType.Int),
					new SqlParameter("@SortExpression", SqlDbType.VarChar),
					new SqlParameter("@Criteria", SqlDbType.VarChar),
					new SqlParameter("@ReturnValue", SqlDbType.Int, 4, ParameterDirection.ReturnValue, false, 0, 0, String.Empty, DataRowVersion.Default, null)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSRead, commandName, parms);
			}
			
			parms[0].Value = pageIndex;
			parms[1].Value = pageSize;
			parms[2].Value = sortExpression;
			parms[3].Value = criteria;
			#endregion
			DataTable dt=SqlHelper.ExecuteDataset(ConnectionString.ETMSRead, CommandType.StoredProcedure, commandName, parms).Tables[0];
			totalRecords = (int)parms[4].Value;
			return dt;
		}
		
	    /// <summary>
		/// 根据参数获取对象列表（分页，可排序）
		/// </summary>
		public IList<Ex_StudentContest> GetEntityList(int pageIndex, int pageSize, string sortExpression, string criteria, out int totalRecords)
		{			
            IList<Ex_StudentContest> list=new List<Ex_StudentContest>();
			string commandName = "dbo.Pr_Ex_StudentContest_GetPagedList";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSRead, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@PageIndex", SqlDbType.Int),
					new SqlParameter("@PageSize", SqlDbType.Int),
					new SqlParameter("@SortExpression", SqlDbType.VarChar),
					new SqlParameter("@Criteria", SqlDbType.VarChar),
					new SqlParameter("@ReturnValue", SqlDbType.Int, 4, ParameterDirection.ReturnValue, false, 0, 0, String.Empty, DataRowVersion.Default, null)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSRead, commandName, parms);
			}
			
			parms[0].Value = pageIndex;
			parms[1].Value = pageSize;
			parms[2].Value = sortExpression;
			parms[3].Value = criteria;
			#endregion
            using (SqlDataReader dataReader = SqlHelper.ExecuteReader(ConnectionString.ETMSRead, CommandType.StoredProcedure, commandName, parms))
			{
				while (dataReader.Read())
				{
					list.Add(PopulateEx_StudentContestFromDataReader(dataReader));
				}
			}			
			totalRecords = (int)parms[4].Value;
			return list;
		}
		
		/// <summary>
		/// 从DataReader中读取数据到业务对象
		/// </summary>
		private Ex_StudentContest PopulateEx_StudentContestFromDataReader(SqlDataReader reader)
		{
			Ex_StudentContest ex_StudentContest = new Ex_StudentContest();
			
			int studentContestIDIndex = reader.GetOrdinal("StudentContestID"); 
			if(!reader.IsDBNull(studentContestIDIndex))
			{
				ex_StudentContest.StudentContestID= reader.GetGuid(studentContestIDIndex);
			}
			
			int contestIDIndex = reader.GetOrdinal("ContestID"); 
			if(!reader.IsDBNull(contestIDIndex))
			{
				ex_StudentContest.ContestID= reader.GetGuid(contestIDIndex);
			}
			
			int studentIDIndex = reader.GetOrdinal("StudentID"); 
			if(!reader.IsDBNull(studentIDIndex))
			{
				ex_StudentContest.StudentID= reader.GetInt32(studentIDIndex);
			}
			
			int trainingItemCourseIDIndex = reader.GetOrdinal("TrainingItemCourseID"); 
			if(!reader.IsDBNull(trainingItemCourseIDIndex))
			{
				ex_StudentContest.TrainingItemCourseID= reader.GetGuid(trainingItemCourseIDIndex);
			}
			
			int scoreIndex = reader.GetOrdinal("Score"); 
			if(!reader.IsDBNull(scoreIndex))
			{
				ex_StudentContest.Score= reader.GetDecimal(scoreIndex);
			}
			
			int beginTimeIndex = reader.GetOrdinal("BeginTime"); 
			if(!reader.IsDBNull(beginTimeIndex))
			{
				ex_StudentContest.BeginTime= reader.GetDateTime(beginTimeIndex);
			}
			
			int endTimeIndex = reader.GetOrdinal("EndTime"); 
			if(!reader.IsDBNull(endTimeIndex))
			{
				ex_StudentContest.EndTime= reader.GetDateTime(endTimeIndex);
			}
			
			int userExamIDIndex = reader.GetOrdinal("UserExamID"); 
			if(!reader.IsDBNull(userExamIDIndex))
			{
				ex_StudentContest.UserExamID= reader.GetGuid(userExamIDIndex);
			}
			
			int studentCourseIDIndex = reader.GetOrdinal("StudentCourseID"); 
			if(!reader.IsDBNull(studentCourseIDIndex))
			{
				ex_StudentContest.StudentCourseID= reader.GetGuid(studentCourseIDIndex);
			}
			
			return ex_StudentContest; 
		}
	}
}
