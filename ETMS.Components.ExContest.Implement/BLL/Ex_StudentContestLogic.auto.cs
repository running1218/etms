//==================================================================================================
//Version 1.0, auto-generated.
//Generated By xueyb.
//Date: 2012-5-19 9:14:51.
//==================================================================================================
//==================================================================================================
//This file is generated by CodeGenerator(Ver 2.1), a product of ZhouYonghua(Zhou_Yonghua@163.com).
//==================================================================================================

using System;
using System.Collections.Generic;
using System.Data;
using ETMS.Utility.Logging;
using ETMS.Components.ExContest.API.Entity.StudentContest;
using ETMS.Components.ExContest.Implement.DAL.StudentContest;
namespace ETMS.Components.ExContest.Implement.BLL.StudentContest
{
    /// <summary>
    /// 学生闯关竞赛结果表业务逻辑
    /// </summary>
    public partial class Ex_StudentContestLogic
	{
		private static readonly Ex_StudentContestDataAccess DAL = new Ex_StudentContestDataAccess();
		
		/// <summary>
		/// 增加
		/// </summary>
		public void Add(Ex_StudentContest ex_StudentContest)
		{
			DAL.Add(ex_StudentContest);
            BizLogHelper.AddOperate(ex_StudentContest);
		}


		/// <summary>
		/// 保存
		/// </summary>
		public void Update(Ex_StudentContest ex_StudentContest)
		{
            //修改前信息
            Ex_StudentContest originalEntity=GetById(ex_StudentContest.StudentContestID);
			DAL.Save(ex_StudentContest);
            BizLogHelper.UpdateOperate(originalEntity,ex_StudentContest);
		}

		/// <summary>
		/// 删除
		/// </summary>
		public void Remove(Guid studentContestID)
		{
            doRemove(studentContestID);
		} 

		/// <summary>
		/// 批量删除(主键ID数组）
		/// </summary>
		public void Remove(Guid[] studentContestIDs)
		{
#if !DEBUG
			using (TransactionScope ts = new TransactionScope())
			{
#endif
				foreach (Guid id in studentContestIDs  )
				{
					Remove(id);
				}
#if !DEBUG
				ts.Complete();
			}
#endif
		} 
    
    
		/// <summary>
		/// 根据标识获取对象
		/// </summary>
		public Ex_StudentContest GetById(Guid studentContestID)
		{
			Ex_StudentContest ex_StudentContest = DAL.GetById(studentContestID);
			if (ex_StudentContest == null)
			{
				throw new ETMS.AppContext.BusinessException("StudentContest.Ex_StudentContest.NotFoundException",new object[]{studentContestID});
			}
			
			return ex_StudentContest;
		}		
		 
		/// <summary>
        /// 查询数据列表分页数据
        /// </summary>
        /// <param name="pageIndex">页号</param>
        /// <param name="pageSize">页面大小</param>
        /// <param name="sortExpression">排序条件</param>
        /// <param name="criteria">筛选条件</param>
        /// <param name="totalRecords">out 记录总数</param>
        /// <returns>返回查询结果</returns>
		public DataTable GetPagedList(int pageIndex, int pageSize, string sortExpression, string criteria,out int totalRecords)
		{				
			return DAL.GetPagedList(pageIndex, pageSize, sortExpression, criteria, out totalRecords);
		}
				
        /// <summary>
        /// 查询实体分页数据
        /// </summary>
        /// <param name="pageIndex">页号</param>
        /// <param name="pageSize">页面大小</param>
        /// <param name="sortExpression">排序条件</param>
        /// <param name="criteria">筛选条件</param>
        /// <param name="totalRecords">out 记录总数</param>
        /// <returns>返回查询结果</returns>
		public IList<Ex_StudentContest> GetEntityList(int pageIndex, int pageSize, string sortExpression, string criteria,out int totalRecords)
		{				
			return DAL.GetEntityList(pageIndex, pageSize, sortExpression, criteria, out totalRecords);
		}
		
	}
	
	
}

