//==================================================================================================
//Version 1.0, auto-generated.
//Generated By running1218
//Date: 2012-4-1 16:17:20.
//==================================================================================================
//==================================================================================================
//This file is generated by CodeGenerator(Ver 2.1)
//==================================================================================================

using System;
using System.Data;
using ETMS.Utility.Logging;
using ETMS.Components.ExContest.API.Entity;
using ETMS.Components.ExContest.Implement.DAL;
namespace ETMS.Components.ExContest.Implement.BLL
{
    /// <summary>
    /// 闯关竞赛表业务逻辑
    /// </summary>
    public partial class Ex_ContestLogic
	{
		private static readonly Ex_ContestDataAccess DAL = new Ex_ContestDataAccess();
		
		/// <summary>
		/// 增加
		/// </summary>
		public void Add(Ex_Contest ex_Contest)
		{
			DAL.Add(ex_Contest);
            BizLogHelper.AddOperate(ex_Contest);
		}

		/// <summary>
		/// 删除
		/// </summary>
		public void Remove(Guid contestID)
		{
            doRemove(contestID);
		} 

		/// <summary>
		/// 批量删除(主键ID数组）
		/// </summary>
		public void Remove(Guid[] contestIDs)
		{
				foreach (Guid id in contestIDs  )
				{
					Remove(id);
				}
		} 
    
		/// <summary>
		/// 保存
		/// </summary>
		public void Update(Ex_Contest ex_Contest)
		{
            //修改前信息
            Ex_Contest originalEntity=GetById(ex_Contest.ContestID);
			DAL.Save(ex_Contest);
            BizLogHelper.UpdateOperate(originalEntity,ex_Contest);
		}
    
		/// <summary>
		/// 根据标识获取对象
		/// </summary>
		public Ex_Contest GetById(Guid contestID)
		{
			Ex_Contest ex_Contest = DAL.GetById(contestID);
			if (ex_Contest == null)
			{
				throw new ETMS.AppContext.BusinessException("ExContest.Ex_Contest.NotFoundException",new object[]{contestID});
			}
			
			return ex_Contest;
		}		
		 
		/// <summary>
        	/// 查询分页数据
        	/// </summary>
        	/// <param name="pageIndex">页号</param>
        	/// <param name="pageSize">页面大小</param>
        	/// <param name="sortExpression">排序条件</param>
        	/// <param name="criteria">筛选条件</param>
        	/// <param name="totalRecords">out 记录总数</param>
        	/// <returns>返回查询结果</returns>
		public DataTable GetPagedList(int pageIndex, int pageSize, string sortExpression, string criteria,out int totalRecords)
		{				
			return DAL.GetPagedList(pageIndex, pageSize, sortExpression, criteria, out totalRecords);
		}
		
	}
	
	
}

