//==================================================================================================
//Version 1.0, auto-generated.
//Generated By huangzf.
//Date: 2013-1-24 10:33:04.
//==================================================================================================
//==================================================================================================
//This file is generated by CodeGenerator(Ver 2.1), a product of ZhouYonghua(Zhou_Yonghua@163.com).
//==================================================================================================

using System;
using System.Collections.Generic;
using System.Data;

using System.Data.SqlClient;
using ETMS.Utility.Data;

using ETMS.Components.QS.API.Entity;

namespace ETMS.Components.QS.Implement.DAL
{
    /// <summary>
    /// 用户作答结果表数据访问
    /// </summary>
    public partial class QS_QueryResultDataAccess
	{
		/// <summary>
		/// 增加
		/// </summary>
		public void Add(QS_QueryResult qS_QueryResult)
		{
			string commandName = "dbo.Pr_QS_QueryResult_Insert";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSWrite, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@BatchID", SqlDbType.UniqueIdentifier),
					new SqlParameter("@QueryID", SqlDbType.UniqueIdentifier),
					new SqlParameter("@UserID", SqlDbType.Int),
					new SqlParameter("@UserName", SqlDbType.NVarChar, 100),
					new SqlParameter("@CreateTime", SqlDbType.DateTime),
					new SqlParameter("@AswerIP", SqlDbType.NVarChar, 60),
					new SqlParameter("@Score", SqlDbType.Decimal, 5, ParameterDirection.Input, true, 8, 2, String.Empty, DataRowVersion.Default, null)
					};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSWrite, commandName, parms);
			}
			
			parms[0].Value = qS_QueryResult.BatchID;
			parms[1].Value = qS_QueryResult.QueryID;
			parms[2].Value = qS_QueryResult.UserID;
			if (qS_QueryResult.UserName!= null){ parms[3].Value = qS_QueryResult.UserName; } else { parms[3].Value = DBNull.Value; }
			parms[4].Value = qS_QueryResult.CreateTime;
			if (qS_QueryResult.AswerIP!= null){ parms[5].Value = qS_QueryResult.AswerIP; } else { parms[5].Value = DBNull.Value; }
			parms[6].Value = qS_QueryResult.Score;
			#endregion
			SqlHelper.ExecuteNonQuery(ConnectionString.ETMSWrite, CommandType.StoredProcedure, commandName, parms);
			
		}
		
		/// <summary>
		/// 删除
		/// </summary>
		public void Remove(Guid batchID)
		{
			string commandName = "dbo.Pr_QS_QueryResult_Delete";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSWrite, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@BatchID", SqlDbType.UniqueIdentifier)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSWrite, commandName, parms);
			}
			
			parms[0].Value = batchID;
			
			#endregion
			SqlHelper.ExecuteNonQuery(ConnectionString.ETMSWrite, CommandType.StoredProcedure, commandName, parms);
		}
		
		/// <summary>
		/// 保存
		/// </summary>
		public void Save(QS_QueryResult qS_QueryResult)
		{
			string commandName = "dbo.Pr_QS_QueryResult_Update";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSWrite, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@BatchID", SqlDbType.UniqueIdentifier),
					new SqlParameter("@QueryID", SqlDbType.UniqueIdentifier),
					new SqlParameter("@UserID", SqlDbType.Int),
					new SqlParameter("@UserName", SqlDbType.NVarChar, 100),
					new SqlParameter("@CreateTime", SqlDbType.DateTime),
					new SqlParameter("@AswerIP", SqlDbType.NVarChar, 60),
					new SqlParameter("@Score", SqlDbType.Decimal, 5, ParameterDirection.Input, true, 8, 2, String.Empty, DataRowVersion.Default, null)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSWrite, commandName, parms);
			}
			
			parms[0].Value = qS_QueryResult.BatchID;
			parms[1].Value = qS_QueryResult.QueryID;
			parms[2].Value = qS_QueryResult.UserID;
			if (qS_QueryResult.UserName!= null){ parms[3].Value = qS_QueryResult.UserName; } else { parms[3].Value = DBNull.Value; }
			parms[4].Value = qS_QueryResult.CreateTime;
			if (qS_QueryResult.AswerIP!= null){ parms[5].Value = qS_QueryResult.AswerIP; } else { parms[5].Value = DBNull.Value; }
			parms[6].Value = qS_QueryResult.Score;
			#endregion
			SqlHelper.ExecuteNonQuery(ConnectionString.ETMSWrite, CommandType.StoredProcedure, commandName, parms);
		}
		
		/// <summary>
		/// 根据标识获取对象
		/// </summary>
		public QS_QueryResult GetById(Guid batchID)
		{
			QS_QueryResult qS_QueryResult = null;
			
			string commandName = "dbo.Pr_QS_QueryResult_GetByPK";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSRead, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@BatchID", SqlDbType.UniqueIdentifier)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSRead, commandName, parms);
			}
			
			parms[0].Value = batchID;
			
			#endregion
			using (SqlDataReader dataReader = SqlHelper.ExecuteReader(ConnectionString.ETMSRead, CommandType.StoredProcedure, commandName, parms))
			{
				if (dataReader.Read())
				{
					qS_QueryResult = PopulateQS_QueryResultFromDataReader(dataReader);
				}
			}
			
			return qS_QueryResult;
		}				
		
		/// <summary>
		/// 根据参数获取对象列表（分页，可排序）
		/// </summary>
		public DataTable GetPagedList(int pageIndex, int pageSize, string sortExpression, string criteria, out int totalRecords)
		{			
			string commandName = "dbo.Pr_QS_QueryResult_GetPagedList";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSRead, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@PageIndex", SqlDbType.Int),
					new SqlParameter("@PageSize", SqlDbType.Int),
					new SqlParameter("@SortExpression", SqlDbType.VarChar),
					new SqlParameter("@Criteria", SqlDbType.VarChar),
					new SqlParameter("@ReturnValue", SqlDbType.Int, 4, ParameterDirection.ReturnValue, false, 0, 0, String.Empty, DataRowVersion.Default, null)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSRead, commandName, parms);
			}
			
			parms[0].Value = pageIndex;
			parms[1].Value = pageSize;
			parms[2].Value = sortExpression;
			parms[3].Value = criteria;
			#endregion
			DataTable dt=SqlHelper.ExecuteDataset(ConnectionString.ETMSRead, CommandType.StoredProcedure, commandName, parms).Tables[0];
			totalRecords = (int)parms[4].Value;
			return dt;
		}
		
	    /// <summary>
		/// 根据参数获取对象列表（分页，可排序）
		/// </summary>
		public IList<QS_QueryResult> GetEntityList(int pageIndex, int pageSize, string sortExpression, string criteria, out int totalRecords)
		{			
            IList<QS_QueryResult> list=new List<QS_QueryResult>();
			string commandName = "dbo.Pr_QS_QueryResult_GetPagedList";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSRead, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@PageIndex", SqlDbType.Int),
					new SqlParameter("@PageSize", SqlDbType.Int),
					new SqlParameter("@SortExpression", SqlDbType.VarChar),
					new SqlParameter("@Criteria", SqlDbType.VarChar),
					new SqlParameter("@ReturnValue", SqlDbType.Int, 4, ParameterDirection.ReturnValue, false, 0, 0, String.Empty, DataRowVersion.Default, null)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSRead, commandName, parms);
			}
			
			parms[0].Value = pageIndex;
			parms[1].Value = pageSize;
			parms[2].Value = sortExpression;
			parms[3].Value = criteria;
			#endregion
            using (SqlDataReader dataReader = SqlHelper.ExecuteReader(ConnectionString.ETMSRead, CommandType.StoredProcedure, commandName, parms))
			{
				while (dataReader.Read())
				{
					list.Add(PopulateQS_QueryResultFromDataReader(dataReader));
				}
			}			
			totalRecords = (int)parms[4].Value;
			return list;
		}
		
		/// <summary>
		/// 从DataReader中读取数据到业务对象
		/// </summary>
		private QS_QueryResult PopulateQS_QueryResultFromDataReader(SqlDataReader reader)
		{
			QS_QueryResult qS_QueryResult = new QS_QueryResult();
			
			int batchIDIndex = reader.GetOrdinal("BatchID"); 
			if(!reader.IsDBNull(batchIDIndex))
			{
				qS_QueryResult.BatchID= reader.GetGuid(batchIDIndex);
			}
			
			int queryIDIndex = reader.GetOrdinal("QueryID"); 
			if(!reader.IsDBNull(queryIDIndex))
			{
				qS_QueryResult.QueryID= reader.GetGuid(queryIDIndex);
			}
			
			int userIDIndex = reader.GetOrdinal("UserID"); 
			if(!reader.IsDBNull(userIDIndex))
			{
				qS_QueryResult.UserID= reader.GetInt32(userIDIndex);
			}
			
			int userNameIndex = reader.GetOrdinal("UserName"); 
			if(!reader.IsDBNull(userNameIndex))
			{
				qS_QueryResult.UserName= reader.GetString(userNameIndex);
			}
			
			int createTimeIndex = reader.GetOrdinal("CreateTime"); 
			if(!reader.IsDBNull(createTimeIndex))
			{
				qS_QueryResult.CreateTime= reader.GetDateTime(createTimeIndex);
			}
			
			int aswerIPIndex = reader.GetOrdinal("AswerIP"); 
			if(!reader.IsDBNull(aswerIPIndex))
			{
				qS_QueryResult.AswerIP= reader.GetString(aswerIPIndex);
			}
			
			int scoreIndex = reader.GetOrdinal("Score"); 
			if(!reader.IsDBNull(scoreIndex))
			{
				qS_QueryResult.Score= reader.GetDecimal(scoreIndex);
			}
			
			return qS_QueryResult; 
		}
	}
}
