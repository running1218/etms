//==================================================================================================
//Version 1.0, auto-generated.
//Generated By huangzf.
//Date: 2013-1-24 10:33:04.
//==================================================================================================
//==================================================================================================
//This file is generated by CodeGenerator(Ver 2.1)
//==================================================================================================

using System;
using System.Collections.Generic;
using System.Data;

using System.Data.SqlClient;
using ETMS.Utility.Data;

using ETMS.Components.QS.API.Entity;

namespace ETMS.Components.QS.Implement.DAL
{
    /// <summary>
    /// 选择题作答结果表数据访问
    /// </summary>
    public partial class QS_QueryResultOptionDataAccess
	{
		/// <summary>
		/// 增加
		/// </summary>
		public void Add(QS_QueryResultOption qS_QueryResultOption)
		{
			string commandName = "dbo.Pr_QS_QueryResultOption_Insert";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSWrite, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@QueryResultID", SqlDbType.UniqueIdentifier),
					new SqlParameter("@OptionID", SqlDbType.UniqueIdentifier),
					new SqlParameter("@BatchID", SqlDbType.UniqueIdentifier),
					new SqlParameter("@OtherText", SqlDbType.NVarChar, 2048)
					};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSWrite, commandName, parms);
			}
			
			parms[0].Value = qS_QueryResultOption.QueryResultID;
			parms[1].Value = qS_QueryResultOption.OptionID;
			parms[2].Value = qS_QueryResultOption.BatchID;
			if (qS_QueryResultOption.OtherText!= null){ parms[3].Value = qS_QueryResultOption.OtherText; } else { parms[3].Value = DBNull.Value; }
			#endregion
			SqlHelper.ExecuteNonQuery(ConnectionString.ETMSWrite, CommandType.StoredProcedure, commandName, parms);
			
		}
		
		/// <summary>
		/// 删除
		/// </summary>
		public void Remove(Guid queryResultID)
		{
			string commandName = "dbo.Pr_QS_QueryResultOption_Delete";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSWrite, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@QueryResultID", SqlDbType.UniqueIdentifier)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSWrite, commandName, parms);
			}
			
			parms[0].Value = queryResultID;
			
			#endregion
			SqlHelper.ExecuteNonQuery(ConnectionString.ETMSWrite, CommandType.StoredProcedure, commandName, parms);
		}
		
		/// <summary>
		/// 保存
		/// </summary>
		public void Save(QS_QueryResultOption qS_QueryResultOption)
		{
			string commandName = "dbo.Pr_QS_QueryResultOption_Update";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSWrite, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@QueryResultID", SqlDbType.UniqueIdentifier),
					new SqlParameter("@OptionID", SqlDbType.UniqueIdentifier),
					new SqlParameter("@BatchID", SqlDbType.UniqueIdentifier),
					new SqlParameter("@OtherText", SqlDbType.NVarChar, 2048)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSWrite, commandName, parms);
			}
			
			parms[0].Value = qS_QueryResultOption.QueryResultID;
			parms[1].Value = qS_QueryResultOption.OptionID;
			parms[2].Value = qS_QueryResultOption.BatchID;
			if (qS_QueryResultOption.OtherText!= null){ parms[3].Value = qS_QueryResultOption.OtherText; } else { parms[3].Value = DBNull.Value; }
			#endregion
			SqlHelper.ExecuteNonQuery(ConnectionString.ETMSWrite, CommandType.StoredProcedure, commandName, parms);
		}
		
		/// <summary>
		/// 根据标识获取对象
		/// </summary>
		public QS_QueryResultOption GetById(Guid queryResultID)
		{
			QS_QueryResultOption qS_QueryResultOption = null;
			
			string commandName = "dbo.Pr_QS_QueryResultOption_GetByPK";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSRead, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@QueryResultID", SqlDbType.UniqueIdentifier)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSRead, commandName, parms);
			}
			
			parms[0].Value = queryResultID;
			
			#endregion
			using (SqlDataReader dataReader = SqlHelper.ExecuteReader(ConnectionString.ETMSRead, CommandType.StoredProcedure, commandName, parms))
			{
				if (dataReader.Read())
				{
					qS_QueryResultOption = PopulateQS_QueryResultOptionFromDataReader(dataReader);
				}
			}
			
			return qS_QueryResultOption;
		}				
		
		/// <summary>
		/// 根据参数获取对象列表（分页，可排序）
		/// </summary>
		public DataTable GetPagedList(int pageIndex, int pageSize, string sortExpression, string criteria, out int totalRecords)
		{			
			string commandName = "dbo.Pr_QS_QueryResultOption_GetPagedList";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSRead, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@PageIndex", SqlDbType.Int),
					new SqlParameter("@PageSize", SqlDbType.Int),
					new SqlParameter("@SortExpression", SqlDbType.VarChar),
					new SqlParameter("@Criteria", SqlDbType.VarChar),
					new SqlParameter("@ReturnValue", SqlDbType.Int, 4, ParameterDirection.ReturnValue, false, 0, 0, String.Empty, DataRowVersion.Default, null)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSRead, commandName, parms);
			}
			
			parms[0].Value = pageIndex;
			parms[1].Value = pageSize;
			parms[2].Value = sortExpression;
			parms[3].Value = criteria;
			#endregion
			DataTable dt=SqlHelper.ExecuteDataset(ConnectionString.ETMSRead, CommandType.StoredProcedure, commandName, parms).Tables[0];
			totalRecords = (int)parms[4].Value;
			return dt;
		}
		
	    /// <summary>
		/// 根据参数获取对象列表（分页，可排序）
		/// </summary>
		public IList<QS_QueryResultOption> GetEntityList(int pageIndex, int pageSize, string sortExpression, string criteria, out int totalRecords)
		{			
            IList<QS_QueryResultOption> list=new List<QS_QueryResultOption>();
			string commandName = "dbo.Pr_QS_QueryResultOption_GetPagedList";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSRead, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@PageIndex", SqlDbType.Int),
					new SqlParameter("@PageSize", SqlDbType.Int),
					new SqlParameter("@SortExpression", SqlDbType.VarChar),
					new SqlParameter("@Criteria", SqlDbType.VarChar),
					new SqlParameter("@ReturnValue", SqlDbType.Int, 4, ParameterDirection.ReturnValue, false, 0, 0, String.Empty, DataRowVersion.Default, null)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSRead, commandName, parms);
			}
			
			parms[0].Value = pageIndex;
			parms[1].Value = pageSize;
			parms[2].Value = sortExpression;
			parms[3].Value = criteria;
			#endregion
            using (SqlDataReader dataReader = SqlHelper.ExecuteReader(ConnectionString.ETMSRead, CommandType.StoredProcedure, commandName, parms))
			{
				while (dataReader.Read())
				{
					list.Add(PopulateQS_QueryResultOptionFromDataReader(dataReader));
				}
			}			
			totalRecords = (int)parms[4].Value;
			return list;
		}
		
		/// <summary>
		/// 从DataReader中读取数据到业务对象
		/// </summary>
		private QS_QueryResultOption PopulateQS_QueryResultOptionFromDataReader(SqlDataReader reader)
		{
			QS_QueryResultOption qS_QueryResultOption = new QS_QueryResultOption();
			
			int queryResultIDIndex = reader.GetOrdinal("QueryResultID"); 
			if(!reader.IsDBNull(queryResultIDIndex))
			{
				qS_QueryResultOption.QueryResultID= reader.GetGuid(queryResultIDIndex);
			}
			
			int optionIDIndex = reader.GetOrdinal("OptionID"); 
			if(!reader.IsDBNull(optionIDIndex))
			{
				qS_QueryResultOption.OptionID= reader.GetGuid(optionIDIndex);
			}
			
			int batchIDIndex = reader.GetOrdinal("BatchID"); 
			if(!reader.IsDBNull(batchIDIndex))
			{
				qS_QueryResultOption.BatchID= reader.GetGuid(batchIDIndex);
			}
			
			int otherTextIndex = reader.GetOrdinal("OtherText"); 
			if(!reader.IsDBNull(otherTextIndex))
			{
				qS_QueryResultOption.OtherText= reader.GetString(otherTextIndex);
			}
			
			return qS_QueryResultOption; 
		}
	}
}
