//==================================================================================================
//Version 1.0, auto-generated.
//Generated By huangzf.
//Date: 2013-1-24 10:33:04.
//==================================================================================================
//==================================================================================================
//This file is generated by CodeGenerator(Ver 2.1)
//==================================================================================================

using System;
using System.Collections.Generic;
using System.Data;

using System.Data.SqlClient;
using ETMS.Utility.Data;

using ETMS.Components.QS.API.Entity;

namespace ETMS.Components.QS.Implement.DAL
{
    /// <summary>
    /// 问卷调查题目选择题选项表数据访问
    /// </summary>
    public partial class QS_QueryTitleOptionDataAccess
	{
		/// <summary>
		/// 增加
		/// </summary>
		public void Add(QS_QueryTitleOption qS_QueryTitleOption)
		{
			string commandName = "dbo.Pr_QS_QueryTitleOption_Insert";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSWrite, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@OptionID", SqlDbType.UniqueIdentifier),
					new SqlParameter("@TitleID", SqlDbType.UniqueIdentifier),
					new SqlParameter("@OptionName", SqlDbType.NVarChar, 2048),
					new SqlParameter("@OptionNo", SqlDbType.Int),
					new SqlParameter("@OptionScore", SqlDbType.Decimal, 5, ParameterDirection.Input, false, 8, 2, String.Empty, DataRowVersion.Default, null),
					new SqlParameter("@OtherLength", SqlDbType.Int),
					new SqlParameter("@CreateUserID", SqlDbType.Int),
					new SqlParameter("@CreateTime", SqlDbType.DateTime),
					new SqlParameter("@CreateUser", SqlDbType.NVarChar, 128),
					new SqlParameter("@ModifyTime", SqlDbType.DateTime),
					new SqlParameter("@ModifyUser", SqlDbType.NVarChar, 128),
					new SqlParameter("@Remark", SqlDbType.NVarChar, -1)
					};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSWrite, commandName, parms);
			}
			
			parms[0].Value = qS_QueryTitleOption.OptionID;
			parms[1].Value = qS_QueryTitleOption.TitleID;
			if (qS_QueryTitleOption.OptionName!= null){ parms[2].Value = qS_QueryTitleOption.OptionName; } else { parms[2].Value = DBNull.Value; }
			parms[3].Value = qS_QueryTitleOption.OptionNo;
			parms[4].Value = qS_QueryTitleOption.OptionScore;
			parms[5].Value = qS_QueryTitleOption.OtherLength;
			parms[6].Value = qS_QueryTitleOption.CreateUserID;
			parms[7].Value = qS_QueryTitleOption.CreateTime;
			if (qS_QueryTitleOption.CreateUser!= null){ parms[8].Value = qS_QueryTitleOption.CreateUser; } else { parms[8].Value = DBNull.Value; }
			parms[9].Value = qS_QueryTitleOption.ModifyTime;
			if (qS_QueryTitleOption.ModifyUser!= null){ parms[10].Value = qS_QueryTitleOption.ModifyUser; } else { parms[10].Value = DBNull.Value; }
			if (qS_QueryTitleOption.Remark!= null){ parms[11].Value = qS_QueryTitleOption.Remark; } else { parms[11].Value = DBNull.Value; }
			#endregion
			SqlHelper.ExecuteNonQuery(ConnectionString.ETMSWrite, CommandType.StoredProcedure, commandName, parms);
			
		}
		
		/// <summary>
		/// 删除
		/// </summary>
		public void Remove(Guid optionID)
		{
			string commandName = "dbo.Pr_QS_QueryTitleOption_Delete";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSWrite, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@OptionID", SqlDbType.UniqueIdentifier)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSWrite, commandName, parms);
			}
			
			parms[0].Value = optionID;
			
			#endregion
			SqlHelper.ExecuteNonQuery(ConnectionString.ETMSWrite, CommandType.StoredProcedure, commandName, parms);
		}
		
		/// <summary>
		/// 保存
		/// </summary>
		public void Save(QS_QueryTitleOption qS_QueryTitleOption)
		{
			string commandName = "dbo.Pr_QS_QueryTitleOption_Update";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSWrite, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@OptionID", SqlDbType.UniqueIdentifier),
					new SqlParameter("@TitleID", SqlDbType.UniqueIdentifier),
					new SqlParameter("@OptionName", SqlDbType.NVarChar, 2048),
					new SqlParameter("@OptionNo", SqlDbType.Int),
					new SqlParameter("@OptionScore", SqlDbType.Decimal, 5, ParameterDirection.Input, false, 8, 2, String.Empty, DataRowVersion.Default, null),
					new SqlParameter("@OtherLength", SqlDbType.Int),
					new SqlParameter("@CreateUserID", SqlDbType.Int),
					new SqlParameter("@CreateTime", SqlDbType.DateTime),
					new SqlParameter("@CreateUser", SqlDbType.NVarChar, 128),
					new SqlParameter("@ModifyTime", SqlDbType.DateTime),
					new SqlParameter("@ModifyUser", SqlDbType.NVarChar, 128),
					new SqlParameter("@Remark", SqlDbType.NVarChar, -1)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSWrite, commandName, parms);
			}
			
			parms[0].Value = qS_QueryTitleOption.OptionID;
			parms[1].Value = qS_QueryTitleOption.TitleID;
			if (qS_QueryTitleOption.OptionName!= null){ parms[2].Value = qS_QueryTitleOption.OptionName; } else { parms[2].Value = DBNull.Value; }
			parms[3].Value = qS_QueryTitleOption.OptionNo;
			parms[4].Value = qS_QueryTitleOption.OptionScore;
			parms[5].Value = qS_QueryTitleOption.OtherLength;
			parms[6].Value = qS_QueryTitleOption.CreateUserID;
			parms[7].Value = qS_QueryTitleOption.CreateTime;
			if (qS_QueryTitleOption.CreateUser!= null){ parms[8].Value = qS_QueryTitleOption.CreateUser; } else { parms[8].Value = DBNull.Value; }
			parms[9].Value = qS_QueryTitleOption.ModifyTime;
			if (qS_QueryTitleOption.ModifyUser!= null){ parms[10].Value = qS_QueryTitleOption.ModifyUser; } else { parms[10].Value = DBNull.Value; }
			if (qS_QueryTitleOption.Remark!= null){ parms[11].Value = qS_QueryTitleOption.Remark; } else { parms[11].Value = DBNull.Value; }
			#endregion
			SqlHelper.ExecuteNonQuery(ConnectionString.ETMSWrite, CommandType.StoredProcedure, commandName, parms);
		}
		
		/// <summary>
		/// 根据标识获取对象
		/// </summary>
		public QS_QueryTitleOption GetById(Guid optionID)
		{
			QS_QueryTitleOption qS_QueryTitleOption = null;
			
			string commandName = "dbo.Pr_QS_QueryTitleOption_GetByPK";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSRead, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@OptionID", SqlDbType.UniqueIdentifier)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSRead, commandName, parms);
			}
			
			parms[0].Value = optionID;
			
			#endregion
			using (SqlDataReader dataReader = SqlHelper.ExecuteReader(ConnectionString.ETMSRead, CommandType.StoredProcedure, commandName, parms))
			{
				if (dataReader.Read())
				{
					qS_QueryTitleOption = PopulateQS_QueryTitleOptionFromDataReader(dataReader);
				}
			}
			
			return qS_QueryTitleOption;
		}				
		
		/// <summary>
		/// 根据参数获取对象列表（分页，可排序）
		/// </summary>
		public DataTable GetPagedList(int pageIndex, int pageSize, string sortExpression, string criteria, out int totalRecords)
		{			
			string commandName = "dbo.Pr_QS_QueryTitleOption_GetPagedList";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSRead, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@PageIndex", SqlDbType.Int),
					new SqlParameter("@PageSize", SqlDbType.Int),
					new SqlParameter("@SortExpression", SqlDbType.VarChar),
					new SqlParameter("@Criteria", SqlDbType.VarChar),
					new SqlParameter("@ReturnValue", SqlDbType.Int, 4, ParameterDirection.ReturnValue, false, 0, 0, String.Empty, DataRowVersion.Default, null)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSRead, commandName, parms);
			}
			
			parms[0].Value = pageIndex;
			parms[1].Value = pageSize;
			parms[2].Value = sortExpression;
			parms[3].Value = criteria;
			#endregion
			DataTable dt=SqlHelper.ExecuteDataset(ConnectionString.ETMSRead, CommandType.StoredProcedure, commandName, parms).Tables[0];
			totalRecords = (int)parms[4].Value;
			return dt;
		}
		
	    /// <summary>
		/// 根据参数获取对象列表（分页，可排序）
		/// </summary>
		public IList<QS_QueryTitleOption> GetEntityList(int pageIndex, int pageSize, string sortExpression, string criteria, out int totalRecords)
		{			
            IList<QS_QueryTitleOption> list=new List<QS_QueryTitleOption>();
			string commandName = "dbo.Pr_QS_QueryTitleOption_GetPagedList";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSRead, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@PageIndex", SqlDbType.Int),
					new SqlParameter("@PageSize", SqlDbType.Int),
					new SqlParameter("@SortExpression", SqlDbType.VarChar),
					new SqlParameter("@Criteria", SqlDbType.VarChar),
					new SqlParameter("@ReturnValue", SqlDbType.Int, 4, ParameterDirection.ReturnValue, false, 0, 0, String.Empty, DataRowVersion.Default, null)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSRead, commandName, parms);
			}
			
			parms[0].Value = pageIndex;
			parms[1].Value = pageSize;
			parms[2].Value = sortExpression;
			parms[3].Value = criteria;
			#endregion
            using (SqlDataReader dataReader = SqlHelper.ExecuteReader(ConnectionString.ETMSRead, CommandType.StoredProcedure, commandName, parms))
			{
				while (dataReader.Read())
				{
					list.Add(PopulateQS_QueryTitleOptionFromDataReader(dataReader));
				}
			}			
			totalRecords = (int)parms[4].Value;
			return list;
		}
		
		/// <summary>
		/// 从DataReader中读取数据到业务对象
		/// </summary>
		private QS_QueryTitleOption PopulateQS_QueryTitleOptionFromDataReader(SqlDataReader reader)
		{
			QS_QueryTitleOption qS_QueryTitleOption = new QS_QueryTitleOption();
			
			int optionIDIndex = reader.GetOrdinal("OptionID"); 
			if(!reader.IsDBNull(optionIDIndex))
			{
				qS_QueryTitleOption.OptionID= reader.GetGuid(optionIDIndex);
			}
			
			int titleIDIndex = reader.GetOrdinal("TitleID"); 
			if(!reader.IsDBNull(titleIDIndex))
			{
				qS_QueryTitleOption.TitleID= reader.GetGuid(titleIDIndex);
			}
			
			int optionNameIndex = reader.GetOrdinal("OptionName"); 
			if(!reader.IsDBNull(optionNameIndex))
			{
				qS_QueryTitleOption.OptionName= reader.GetString(optionNameIndex);
			}
			
			int optionNoIndex = reader.GetOrdinal("OptionNo"); 
			if(!reader.IsDBNull(optionNoIndex))
			{
				qS_QueryTitleOption.OptionNo= reader.GetInt32(optionNoIndex);
			}
			
			int optionScoreIndex = reader.GetOrdinal("OptionScore"); 
			if(!reader.IsDBNull(optionScoreIndex))
			{
				qS_QueryTitleOption.OptionScore= reader.GetDecimal(optionScoreIndex);
			}
			
			int otherLengthIndex = reader.GetOrdinal("OtherLength"); 
			if(!reader.IsDBNull(otherLengthIndex))
			{
				qS_QueryTitleOption.OtherLength= reader.GetInt32(otherLengthIndex);
			}
			
			int createUserIDIndex = reader.GetOrdinal("CreateUserID"); 
			if(!reader.IsDBNull(createUserIDIndex))
			{
				qS_QueryTitleOption.CreateUserID= reader.GetInt32(createUserIDIndex);
			}
			
			int createTimeIndex = reader.GetOrdinal("CreateTime"); 
			if(!reader.IsDBNull(createTimeIndex))
			{
				qS_QueryTitleOption.CreateTime= reader.GetDateTime(createTimeIndex);
			}
			
			int createUserIndex = reader.GetOrdinal("CreateUser"); 
			if(!reader.IsDBNull(createUserIndex))
			{
				qS_QueryTitleOption.CreateUser= reader.GetString(createUserIndex);
			}
			
			int modifyTimeIndex = reader.GetOrdinal("ModifyTime"); 
			if(!reader.IsDBNull(modifyTimeIndex))
			{
				qS_QueryTitleOption.ModifyTime= reader.GetDateTime(modifyTimeIndex);
			}
			
			int modifyUserIndex = reader.GetOrdinal("ModifyUser"); 
			if(!reader.IsDBNull(modifyUserIndex))
			{
				qS_QueryTitleOption.ModifyUser= reader.GetString(modifyUserIndex);
			}
			
			int remarkIndex = reader.GetOrdinal("Remark"); 
			if(!reader.IsDBNull(remarkIndex))
			{
				qS_QueryTitleOption.Remark= reader.GetString(remarkIndex);
			}
			
			return qS_QueryTitleOption; 
		}
	}
}
