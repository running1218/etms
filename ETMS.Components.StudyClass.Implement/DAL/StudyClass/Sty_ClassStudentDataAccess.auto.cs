//==================================================================================================
//Version 1.0, auto-generated.
//Generated By running1218
//Date: 2012-04-18 22:30:53.
//==================================================================================================
//==================================================================================================
//This file is generated by CodeGenerator(Ver 2.1)
//==================================================================================================

using System;
using System.Collections.Generic;
using System.Data;

using System.Data.SqlClient;
using ETMS.Utility.Data;

using ETMS.Components.StudyClass.API.Entity.StudyClass;

namespace ETMS.Components.StudyClass.Implement.DAL.StudyClass
{
    /// <summary>
    /// 班级学员表数据访问
    /// </summary>
    public partial class Sty_ClassStudentDataAccess
	{
		/// <summary>
		/// 增加
		/// </summary>
		public void Add(Sty_ClassStudent sty_ClassStudent)
		{
			string commandName = "dbo.Pr_Sty_ClassStudent_Insert";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSWrite, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@ClassStudentID", SqlDbType.UniqueIdentifier),
					new SqlParameter("@ClassID", SqlDbType.UniqueIdentifier),
					new SqlParameter("@StudentSignupID", SqlDbType.UniqueIdentifier),
					new SqlParameter("@UserID", SqlDbType.Int),
					new SqlParameter("@IsDuty", SqlDbType.NVarChar, 100),
					new SqlParameter("@IsBamboo", SqlDbType.Bit),
					new SqlParameter("@CreateTime", SqlDbType.DateTime),
					new SqlParameter("@CreateUserID", SqlDbType.Int),
					new SqlParameter("@CreateUser", SqlDbType.NVarChar, 128),
					new SqlParameter("@ModifyTime", SqlDbType.DateTime),
					new SqlParameter("@ModifyUser", SqlDbType.NVarChar, 128),
					new SqlParameter("@Remark", SqlDbType.NVarChar, -1),
					new SqlParameter("@DelFlag", SqlDbType.Bit)
					};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSWrite, commandName, parms);
			}
			
			parms[0].Value = sty_ClassStudent.ClassStudentID;
			parms[1].Value = sty_ClassStudent.ClassID;
			parms[2].Value = sty_ClassStudent.StudentSignupID;
			parms[3].Value = sty_ClassStudent.UserID;
			if (sty_ClassStudent.IsDuty!= null){ parms[4].Value = sty_ClassStudent.IsDuty; } else { parms[4].Value = DBNull.Value; }
			parms[5].Value = sty_ClassStudent.IsBamboo;
			parms[6].Value = sty_ClassStudent.CreateTime;
			parms[7].Value = sty_ClassStudent.CreateUserID;
			if (sty_ClassStudent.CreateUser!= null){ parms[8].Value = sty_ClassStudent.CreateUser; } else { parms[8].Value = DBNull.Value; }
			parms[9].Value = sty_ClassStudent.ModifyTime;
			if (sty_ClassStudent.ModifyUser!= null){ parms[10].Value = sty_ClassStudent.ModifyUser; } else { parms[10].Value = DBNull.Value; }
			if (sty_ClassStudent.Remark!= null){ parms[11].Value = sty_ClassStudent.Remark; } else { parms[11].Value = DBNull.Value; }
			parms[12].Value = sty_ClassStudent.DelFlag;
			#endregion
			SqlHelper.ExecuteNonQuery(ConnectionString.ETMSWrite, CommandType.StoredProcedure, commandName, parms);
			
		}
		
		/// <summary>
		/// 删除
		/// </summary>
		public void Remove(Guid classStudentID)
		{
			string commandName = "dbo.Pr_Sty_ClassStudent_Delete";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSWrite, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@ClassStudentID", SqlDbType.UniqueIdentifier)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSWrite, commandName, parms);
			}
			
			parms[0].Value = classStudentID;
			
			#endregion
			SqlHelper.ExecuteNonQuery(ConnectionString.ETMSWrite, CommandType.StoredProcedure, commandName, parms);
		}
		
		/// <summary>
		/// 保存
		/// </summary>
		public void Save(Sty_ClassStudent sty_ClassStudent)
		{
			string commandName = "dbo.Pr_Sty_ClassStudent_Update";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSWrite, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@ClassStudentID", SqlDbType.UniqueIdentifier),
					new SqlParameter("@ClassID", SqlDbType.UniqueIdentifier),
					new SqlParameter("@StudentSignupID", SqlDbType.UniqueIdentifier),
					new SqlParameter("@UserID", SqlDbType.Int),
					new SqlParameter("@IsDuty", SqlDbType.NVarChar, 100),
					new SqlParameter("@IsBamboo", SqlDbType.Bit),
					new SqlParameter("@CreateTime", SqlDbType.DateTime),
					new SqlParameter("@CreateUserID", SqlDbType.Int),
					new SqlParameter("@CreateUser", SqlDbType.NVarChar, 128),
					new SqlParameter("@ModifyTime", SqlDbType.DateTime),
					new SqlParameter("@ModifyUser", SqlDbType.NVarChar, 128),
					new SqlParameter("@Remark", SqlDbType.NVarChar, -1),
					new SqlParameter("@DelFlag", SqlDbType.Bit)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSWrite, commandName, parms);
			}
			
			parms[0].Value = sty_ClassStudent.ClassStudentID;
			parms[1].Value = sty_ClassStudent.ClassID;
			parms[2].Value = sty_ClassStudent.StudentSignupID;
			parms[3].Value = sty_ClassStudent.UserID;
			if (sty_ClassStudent.IsDuty!= null){ parms[4].Value = sty_ClassStudent.IsDuty; } else { parms[4].Value = DBNull.Value; }
			parms[5].Value = sty_ClassStudent.IsBamboo;
			parms[6].Value = sty_ClassStudent.CreateTime;
			parms[7].Value = sty_ClassStudent.CreateUserID;
			if (sty_ClassStudent.CreateUser!= null){ parms[8].Value = sty_ClassStudent.CreateUser; } else { parms[8].Value = DBNull.Value; }
			parms[9].Value = sty_ClassStudent.ModifyTime;
			if (sty_ClassStudent.ModifyUser!= null){ parms[10].Value = sty_ClassStudent.ModifyUser; } else { parms[10].Value = DBNull.Value; }
			if (sty_ClassStudent.Remark!= null){ parms[11].Value = sty_ClassStudent.Remark; } else { parms[11].Value = DBNull.Value; }
			parms[12].Value = sty_ClassStudent.DelFlag;
			#endregion
			SqlHelper.ExecuteNonQuery(ConnectionString.ETMSWrite, CommandType.StoredProcedure, commandName, parms);
		}
		
		/// <summary>
		/// 根据标识获取对象
		/// </summary>
		public Sty_ClassStudent GetById(Guid classStudentID)
		{
			Sty_ClassStudent sty_ClassStudent = null;
			
			string commandName = "dbo.Pr_Sty_ClassStudent_GetByPK";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSRead, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@ClassStudentID", SqlDbType.UniqueIdentifier)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSRead, commandName, parms);
			}
			
			parms[0].Value = classStudentID;
			
			#endregion
			using (SqlDataReader dataReader = SqlHelper.ExecuteReader(ConnectionString.ETMSRead, CommandType.StoredProcedure, commandName, parms))
			{
				if (dataReader.Read())
				{
					sty_ClassStudent = PopulateSty_ClassStudentFromDataReader(dataReader);
				}
			}
			
			return sty_ClassStudent;
		}				
		
		/// <summary>
		/// 根据参数获取对象列表（分页，可排序）
		/// </summary>
		public DataTable GetPagedList(int pageIndex, int pageSize, string sortExpression, string criteria, out int totalRecords)
		{			
			string commandName = "dbo.Pr_Sty_ClassStudent_GetPagedList";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSRead, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@PageIndex", SqlDbType.Int),
					new SqlParameter("@PageSize", SqlDbType.Int),
					new SqlParameter("@SortExpression", SqlDbType.VarChar),
					new SqlParameter("@Criteria", SqlDbType.VarChar),
					new SqlParameter("@ReturnValue", SqlDbType.Int, 4, ParameterDirection.ReturnValue, false, 0, 0, String.Empty, DataRowVersion.Default, null)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSRead, commandName, parms);
			}
			
			parms[0].Value = pageIndex;
			parms[1].Value = pageSize;
			parms[2].Value = sortExpression;
			parms[3].Value = criteria;
			#endregion
			DataTable dt=SqlHelper.ExecuteDataset(ConnectionString.ETMSRead, CommandType.StoredProcedure, commandName, parms).Tables[0];
			totalRecords = (int)parms[4].Value;
			return dt;
		}
		
	    /// <summary>
		/// 根据参数获取对象列表（分页，可排序）
		/// </summary>
		public IList<Sty_ClassStudent> GetEntityList(int pageIndex, int pageSize, string sortExpression, string criteria, out int totalRecords)
		{			
            IList<Sty_ClassStudent> list=new List<Sty_ClassStudent>();
			string commandName = "dbo.Pr_Sty_ClassStudent_GetPagedList";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSRead, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@PageIndex", SqlDbType.Int),
					new SqlParameter("@PageSize", SqlDbType.Int),
					new SqlParameter("@SortExpression", SqlDbType.VarChar),
					new SqlParameter("@Criteria", SqlDbType.VarChar),
					new SqlParameter("@ReturnValue", SqlDbType.Int, 4, ParameterDirection.ReturnValue, false, 0, 0, String.Empty, DataRowVersion.Default, null)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSRead, commandName, parms);
			}
			
			parms[0].Value = pageIndex;
			parms[1].Value = pageSize;
			parms[2].Value = sortExpression;
			parms[3].Value = criteria;
			#endregion
            using (SqlDataReader dataReader = SqlHelper.ExecuteReader(ConnectionString.ETMSRead, CommandType.StoredProcedure, commandName, parms))
			{
				while (dataReader.Read())
				{
					list.Add(PopulateSty_ClassStudentFromDataReader(dataReader));
				}
			}			
			totalRecords = (int)parms[4].Value;
			return list;
		}
		
		/// <summary>
		/// 从DataReader中读取数据到业务对象
		/// </summary>
		private Sty_ClassStudent PopulateSty_ClassStudentFromDataReader(SqlDataReader reader)
		{
			Sty_ClassStudent sty_ClassStudent = new Sty_ClassStudent();
			
			int classStudentIDIndex = reader.GetOrdinal("ClassStudentID"); 
			if(!reader.IsDBNull(classStudentIDIndex))
			{
				sty_ClassStudent.ClassStudentID= reader.GetGuid(classStudentIDIndex);
			}
			
			int classIDIndex = reader.GetOrdinal("ClassID"); 
			if(!reader.IsDBNull(classIDIndex))
			{
				sty_ClassStudent.ClassID= reader.GetGuid(classIDIndex);
			}
			
			int studentSignupIDIndex = reader.GetOrdinal("StudentSignupID"); 
			if(!reader.IsDBNull(studentSignupIDIndex))
			{
				sty_ClassStudent.StudentSignupID= reader.GetGuid(studentSignupIDIndex);
			}
			
			int userIDIndex = reader.GetOrdinal("UserID"); 
			if(!reader.IsDBNull(userIDIndex))
			{
				sty_ClassStudent.UserID= reader.GetInt32(userIDIndex);
			}
			
			int isDutyIndex = reader.GetOrdinal("IsDuty"); 
			if(!reader.IsDBNull(isDutyIndex))
			{
				sty_ClassStudent.IsDuty= reader.GetString(isDutyIndex);
			}
			
			int isBambooIndex = reader.GetOrdinal("IsBamboo"); 
			if(!reader.IsDBNull(isBambooIndex))
			{
				sty_ClassStudent.IsBamboo= reader.GetBoolean(isBambooIndex);
			}
			
			int createTimeIndex = reader.GetOrdinal("CreateTime"); 
			if(!reader.IsDBNull(createTimeIndex))
			{
				sty_ClassStudent.CreateTime= reader.GetDateTime(createTimeIndex);
			}
			
			int createUserIDIndex = reader.GetOrdinal("CreateUserID"); 
			if(!reader.IsDBNull(createUserIDIndex))
			{
				sty_ClassStudent.CreateUserID= reader.GetInt32(createUserIDIndex);
			}
			
			int createUserIndex = reader.GetOrdinal("CreateUser"); 
			if(!reader.IsDBNull(createUserIndex))
			{
				sty_ClassStudent.CreateUser= reader.GetString(createUserIndex);
			}
			
			int modifyTimeIndex = reader.GetOrdinal("ModifyTime"); 
			if(!reader.IsDBNull(modifyTimeIndex))
			{
				sty_ClassStudent.ModifyTime= reader.GetDateTime(modifyTimeIndex);
			}
			
			int modifyUserIndex = reader.GetOrdinal("ModifyUser"); 
			if(!reader.IsDBNull(modifyUserIndex))
			{
				sty_ClassStudent.ModifyUser= reader.GetString(modifyUserIndex);
			}
			
			int remarkIndex = reader.GetOrdinal("Remark"); 
			if(!reader.IsDBNull(remarkIndex))
			{
				sty_ClassStudent.Remark= reader.GetString(remarkIndex);
			}
			
			int delFlagIndex = reader.GetOrdinal("DelFlag"); 
			if(!reader.IsDBNull(delFlagIndex))
			{
				sty_ClassStudent.DelFlag= reader.GetBoolean(delFlagIndex);
			}
			
			return sty_ClassStudent; 
		}
	}
}
