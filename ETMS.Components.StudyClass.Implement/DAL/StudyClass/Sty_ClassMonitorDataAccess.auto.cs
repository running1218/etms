//==================================================================================================
//Version 1.0, auto-generated.
//Generated By xueyb.
//Date: 2012-04-18 22:30:52.
//==================================================================================================
//==================================================================================================
//This file is generated by CodeGenerator(Ver 2.1), a product of ZhouYonghua(Zhou_Yonghua@163.com).
//==================================================================================================

using System;
using System.Collections.Generic;
using System.Data;

using System.Data.SqlClient;
using ETMS.Utility.Data;

using ETMS.Components.StudyClass.API.Entity.StudyClass;

namespace ETMS.Components.StudyClass.Implement.DAL.StudyClass
{
    /// <summary>
    /// 班委表数据访问
    /// </summary>
    public partial class Sty_ClassMonitorDataAccess
	{
		/// <summary>
		/// 增加
		/// </summary>
		public void Add(Sty_ClassMonitor sty_ClassMonitor)
		{
			string commandName = "dbo.Pr_Sty_ClassMonitor_Insert";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSWrite, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@ClassMonitorID", SqlDbType.UniqueIdentifier),
					new SqlParameter("@ClassStudentID", SqlDbType.UniqueIdentifier),
					new SqlParameter("@StudentTypeID", SqlDbType.Int),
					new SqlParameter("@CreateTime", SqlDbType.DateTime),
					new SqlParameter("@CreateUserID", SqlDbType.Int),
					new SqlParameter("@CreateUser", SqlDbType.NVarChar, 128),
					new SqlParameter("@ModifyTime", SqlDbType.DateTime),
					new SqlParameter("@ModifyUser", SqlDbType.NVarChar, 128),
					new SqlParameter("@Remark", SqlDbType.NVarChar, -1)
					};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSWrite, commandName, parms);
			}
			
			parms[0].Value = sty_ClassMonitor.ClassMonitorID;
			parms[1].Value = sty_ClassMonitor.ClassStudentID;
			parms[2].Value = sty_ClassMonitor.StudentTypeID;
			parms[3].Value = sty_ClassMonitor.CreateTime;
			parms[4].Value = sty_ClassMonitor.CreateUserID;
			if (sty_ClassMonitor.CreateUser!= null){ parms[5].Value = sty_ClassMonitor.CreateUser; } else { parms[5].Value = DBNull.Value; }
			parms[6].Value = sty_ClassMonitor.ModifyTime;
			if (sty_ClassMonitor.ModifyUser!= null){ parms[7].Value = sty_ClassMonitor.ModifyUser; } else { parms[7].Value = DBNull.Value; }
			if (sty_ClassMonitor.Remark!= null){ parms[8].Value = sty_ClassMonitor.Remark; } else { parms[8].Value = DBNull.Value; }
			#endregion
			SqlHelper.ExecuteNonQuery(ConnectionString.ETMSWrite, CommandType.StoredProcedure, commandName, parms);
			
		}
		
		/// <summary>
		/// 删除
		/// </summary>
		public void Remove(Guid classMonitorID)
		{
			string commandName = "dbo.Pr_Sty_ClassMonitor_Delete";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSWrite, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@ClassMonitorID", SqlDbType.UniqueIdentifier)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSWrite, commandName, parms);
			}
			
			parms[0].Value = classMonitorID;
			
			#endregion
			SqlHelper.ExecuteNonQuery(ConnectionString.ETMSWrite, CommandType.StoredProcedure, commandName, parms);
		}
		
		/// <summary>
		/// 保存
		/// </summary>
		public void Save(Sty_ClassMonitor sty_ClassMonitor)
		{
			string commandName = "dbo.Pr_Sty_ClassMonitor_Update";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSWrite, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@ClassMonitorID", SqlDbType.UniqueIdentifier),
					new SqlParameter("@ClassStudentID", SqlDbType.UniqueIdentifier),
					new SqlParameter("@StudentTypeID", SqlDbType.Int),
					new SqlParameter("@CreateTime", SqlDbType.DateTime),
					new SqlParameter("@CreateUserID", SqlDbType.Int),
					new SqlParameter("@CreateUser", SqlDbType.NVarChar, 128),
					new SqlParameter("@ModifyTime", SqlDbType.DateTime),
					new SqlParameter("@ModifyUser", SqlDbType.NVarChar, 128),
					new SqlParameter("@Remark", SqlDbType.NVarChar, -1)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSWrite, commandName, parms);
			}
			
			parms[0].Value = sty_ClassMonitor.ClassMonitorID;
			parms[1].Value = sty_ClassMonitor.ClassStudentID;
			parms[2].Value = sty_ClassMonitor.StudentTypeID;
			parms[3].Value = sty_ClassMonitor.CreateTime;
			parms[4].Value = sty_ClassMonitor.CreateUserID;
			if (sty_ClassMonitor.CreateUser!= null){ parms[5].Value = sty_ClassMonitor.CreateUser; } else { parms[5].Value = DBNull.Value; }
			parms[6].Value = sty_ClassMonitor.ModifyTime;
			if (sty_ClassMonitor.ModifyUser!= null){ parms[7].Value = sty_ClassMonitor.ModifyUser; } else { parms[7].Value = DBNull.Value; }
			if (sty_ClassMonitor.Remark!= null){ parms[8].Value = sty_ClassMonitor.Remark; } else { parms[8].Value = DBNull.Value; }
			#endregion
			SqlHelper.ExecuteNonQuery(ConnectionString.ETMSWrite, CommandType.StoredProcedure, commandName, parms);
		}
		
		/// <summary>
		/// 根据标识获取对象
		/// </summary>
		public Sty_ClassMonitor GetById(Guid classMonitorID)
		{
			Sty_ClassMonitor sty_ClassMonitor = null;
			
			string commandName = "dbo.Pr_Sty_ClassMonitor_GetByPK";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSRead, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@ClassMonitorID", SqlDbType.UniqueIdentifier)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSRead, commandName, parms);
			}
			
			parms[0].Value = classMonitorID;
			
			#endregion
			using (SqlDataReader dataReader = SqlHelper.ExecuteReader(ConnectionString.ETMSRead, CommandType.StoredProcedure, commandName, parms))
			{
				if (dataReader.Read())
				{
					sty_ClassMonitor = PopulateSty_ClassMonitorFromDataReader(dataReader);
				}
			}
			
			return sty_ClassMonitor;
		}				
		
		/// <summary>
		/// 根据参数获取对象列表（分页，可排序）
		/// </summary>
		public DataTable GetPagedList(int pageIndex, int pageSize, string sortExpression, string criteria, out int totalRecords)
		{			
			string commandName = "dbo.Pr_Sty_ClassMonitor_GetPagedList";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSRead, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@PageIndex", SqlDbType.Int),
					new SqlParameter("@PageSize", SqlDbType.Int),
					new SqlParameter("@SortExpression", SqlDbType.VarChar),
					new SqlParameter("@Criteria", SqlDbType.VarChar),
					new SqlParameter("@ReturnValue", SqlDbType.Int, 4, ParameterDirection.ReturnValue, false, 0, 0, String.Empty, DataRowVersion.Default, null)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSRead, commandName, parms);
			}
			
			parms[0].Value = pageIndex;
			parms[1].Value = pageSize;
			parms[2].Value = sortExpression;
			parms[3].Value = criteria;
			#endregion
			DataTable dt=SqlHelper.ExecuteDataset(ConnectionString.ETMSRead, CommandType.StoredProcedure, commandName, parms).Tables[0];
			totalRecords = (int)parms[4].Value;
			return dt;
		}
		
	    /// <summary>
		/// 根据参数获取对象列表（分页，可排序）
		/// </summary>
		public IList<Sty_ClassMonitor> GetEntityList(int pageIndex, int pageSize, string sortExpression, string criteria, out int totalRecords)
		{			
            IList<Sty_ClassMonitor> list=new List<Sty_ClassMonitor>();
			string commandName = "dbo.Pr_Sty_ClassMonitor_GetPagedList";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSRead, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@PageIndex", SqlDbType.Int),
					new SqlParameter("@PageSize", SqlDbType.Int),
					new SqlParameter("@SortExpression", SqlDbType.VarChar),
					new SqlParameter("@Criteria", SqlDbType.VarChar),
					new SqlParameter("@ReturnValue", SqlDbType.Int, 4, ParameterDirection.ReturnValue, false, 0, 0, String.Empty, DataRowVersion.Default, null)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSRead, commandName, parms);
			}
			
			parms[0].Value = pageIndex;
			parms[1].Value = pageSize;
			parms[2].Value = sortExpression;
			parms[3].Value = criteria;
			#endregion
            using (SqlDataReader dataReader = SqlHelper.ExecuteReader(ConnectionString.ETMSRead, CommandType.StoredProcedure, commandName, parms))
			{
				while (dataReader.Read())
				{
					list.Add(PopulateSty_ClassMonitorFromDataReader(dataReader));
				}
			}			
			totalRecords = (int)parms[4].Value;
			return list;
		}
		
		/// <summary>
		/// 从DataReader中读取数据到业务对象
		/// </summary>
		private Sty_ClassMonitor PopulateSty_ClassMonitorFromDataReader(SqlDataReader reader)
		{
			Sty_ClassMonitor sty_ClassMonitor = new Sty_ClassMonitor();
			
			int classMonitorIDIndex = reader.GetOrdinal("ClassMonitorID"); 
			if(!reader.IsDBNull(classMonitorIDIndex))
			{
				sty_ClassMonitor.ClassMonitorID= reader.GetGuid(classMonitorIDIndex);
			}
			
			int classStudentIDIndex = reader.GetOrdinal("ClassStudentID"); 
			if(!reader.IsDBNull(classStudentIDIndex))
			{
				sty_ClassMonitor.ClassStudentID= reader.GetGuid(classStudentIDIndex);
			}
			
			int studentTypeIDIndex = reader.GetOrdinal("StudentTypeID"); 
			if(!reader.IsDBNull(studentTypeIDIndex))
			{
				sty_ClassMonitor.StudentTypeID= reader.GetInt32(studentTypeIDIndex);
			}
			
			int createTimeIndex = reader.GetOrdinal("CreateTime"); 
			if(!reader.IsDBNull(createTimeIndex))
			{
				sty_ClassMonitor.CreateTime= reader.GetDateTime(createTimeIndex);
			}
			
			int createUserIDIndex = reader.GetOrdinal("CreateUserID"); 
			if(!reader.IsDBNull(createUserIDIndex))
			{
				sty_ClassMonitor.CreateUserID= reader.GetInt32(createUserIDIndex);
			}
			
			int createUserIndex = reader.GetOrdinal("CreateUser"); 
			if(!reader.IsDBNull(createUserIndex))
			{
				sty_ClassMonitor.CreateUser= reader.GetString(createUserIndex);
			}
			
			int modifyTimeIndex = reader.GetOrdinal("ModifyTime"); 
			if(!reader.IsDBNull(modifyTimeIndex))
			{
				sty_ClassMonitor.ModifyTime= reader.GetDateTime(modifyTimeIndex);
			}
			
			int modifyUserIndex = reader.GetOrdinal("ModifyUser"); 
			if(!reader.IsDBNull(modifyUserIndex))
			{
				sty_ClassMonitor.ModifyUser= reader.GetString(modifyUserIndex);
			}
			
			int remarkIndex = reader.GetOrdinal("Remark"); 
			if(!reader.IsDBNull(remarkIndex))
			{
				sty_ClassMonitor.Remark= reader.GetString(remarkIndex);
			}
			
			return sty_ClassMonitor; 
		}
	}
}
