//==================================================================================================
//Version 1.0, auto-generated.
//Generated By xinyb.
//Date: 2012-05-02 11:00:37.
//==================================================================================================
//==================================================================================================
//This file is generated by CodeGenerator(Ver 2.1)
//==================================================================================================

using System;
using System.Collections.Generic;
using System.Linq;
using System.Data;

using ETMS.AppContext;
using ETMS.Utility;
using ETMS.Utility.Logging;
using ETMS.Components.Mentor.API;
using ETMS.Components.Mentor.API.Entity.Mentor;

namespace ETMS.Components.Mentor.Implement.BLL.Mentor
{
    /// <summary>
    /// 导师表业务逻辑
    /// </summary>
    public partial class Site_MentorLogic
	{
 		/// <summary>
		/// 保存操作
		/// </summary>
		public void Save(Site_Mentor site_Mentor, OperationAction action)
		{
            try
            {
			    if(action == OperationAction.Add)
                {
                    Add(site_Mentor);
                }
                else
                {
                    Update(site_Mentor);
                }
            }
           catch (System.Data.SqlClient.SqlException ex)
            {
                //如果仍未处理，则抛出
                throw ex;
            } 
		}

        /// <summary>
        /// 将学员批量设为导师
        /// </summary>
        /// <param name="students"></param>
        public void SetMentor(int[] students)
        { 
            Site_Mentor entity = new Site_Mentor();
            entity.CreateTime = DateTime.Now;
            entity.CreateUserID = UserContext.Current.UserID;
            entity.CreateUser = UserContext.Current.RealName;
            entity.IsUse = 1;

            foreach (int s in students)
            {
                entity.MentorID = s;
                Add(entity);
            }
        }

        /// <summary>
        /// 更新状态
        /// </summary>
        /// <param name="entity"></param>
        public void UpdateStatus(Site_Mentor entity)
        {
            Update(entity);
        }

        /// <summary>
		/// 删除
		/// </summary>
		protected void doRemove(Int32 mentorID)
		{
            try
            {
			     DAL.Remove(mentorID);
                 //记录删除日志（根据ID删除）
                 BizLogHelper.Operate(mentorID,"删除");
            }
           catch (System.Data.SqlClient.SqlException ex)
            {
                //枚举数据约束异常并转换为业务异常，数据已经使用
                if (ex.Message.IndexOf("FK_",StringComparison.InvariantCultureIgnoreCase) != -1)
                {
                    throw new ETMS.AppContext.BusinessException(BizErrorDefine.Mentor_Site_Mentor_DataUsed_Delete);
                } 
                //如果仍未处理，则抛出
                throw ex;
            }  
		}

        /// <summary>
        /// 获取导师列表
        /// </summary>
        /// <param name="realName"></param>
        /// <param name="department"></param>
        /// <param name="rank"></param>
        /// <param name="isUse"></param>
        /// <param name="pageIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRecords"></param>
        /// <returns></returns>
        public List<Site_Mentor> GetMentorList(string realName, string department, string post, int isUse, int pageIndex, int pageSize, out int totalRecords)
        {
            return DAL.GetMentorList(UserContext.Current.OrganizationID, realName, department, post, isUse).PageList<Site_Mentor>(pageIndex, pageSize, out totalRecords);
        }

        /// <summary>
        /// 根据导师ID获取导师
        /// </summary>
        /// <param name="mentroID"></param>
        /// <returns></returns>
        public Site_Mentor GetMentorByMentorID(int mentroID)
        {
            var list = DAL.GetMentorList(UserContext.Current.OrganizationID, "", "", "", -1).ToList<Site_Mentor>();
            var entity = list.Where(f => f.MentorID.Equals(mentroID)).SingleOrDefault();
            return entity == null ? new Site_Mentor() : entity;
        }
        /// <summary>
        /// 所有有效导师
        /// </summary>
        /// <returns></returns>
        public DataTable GetMentorDatatableList()
        {
            return DAL.GetMentorList(UserContext.Current.OrganizationID, "", "", "", 1);
        }

        /// <summary>
        /// 获取待设为导师的列表
        /// </summary>
        /// <param name="realName"></param>
        /// <param name="pageIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRecords"></param>
        /// <returns></returns>
        public List<Site_Mentor> ChoseMentorList(string realName, string departmentName, string postName, int pageIndex, int pageSize, out int totalRecords)
        {
            return DAL.ChoseMentorList(UserContext.Current.OrganizationID, realName, departmentName, postName).PageList<Site_Mentor>(pageIndex, pageSize, out totalRecords);
        }







	}
}

