//==================================================================================================
//Version 1.0, auto-generated.
//Generated By liuyx.
//Date: 2012-3-27 11:48:25.
//==================================================================================================
//==================================================================================================
//This file is generated by CodeGenerator(Ver 2.1), a product of ZhouYonghua(Zhou_Yonghua@163.com).
//==================================================================================================

using System;
using System.Data;

using System.Data.SqlClient;
using ETMS.Utility.Data;

using ETMS.Components.ExOfflineHomework.API.Entity;

namespace ETMS.Components.ExOfflineHomework.Implement.DAL
{
    /// <summary>
    /// 离线作业表数据访问
    /// </summary>
    public partial class Res_e_OffLineJobDataAccess
    {
        /// <summary>
        /// 增加
        /// </summary>
        public void Add(Res_e_OffLineJob res_e_OffLineJob)
        {
            string commandName = "dbo.Pr_Res_e_OffLineJob_Insert";
            #region Parameters
            SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSWrite, commandName);
            if (parms == null)
            {
                parms = new SqlParameter[] {
					new SqlParameter("@JobID", SqlDbType.UniqueIdentifier),
					new SqlParameter("@JobName", SqlDbType.NVarChar, 100),
					new SqlParameter("@JobDescription", SqlDbType.NVarChar, 1024),
					new SqlParameter("@JobFileName", SqlDbType.NVarChar, 100),
					new SqlParameter("@IsUse", SqlDbType.Int),
					new SqlParameter("@OrgID", SqlDbType.Int),
					new SqlParameter("@BeginTime", SqlDbType.DateTime),
					new SqlParameter("@EndTime", SqlDbType.DateTime),
					new SqlParameter("@CreateTime", SqlDbType.DateTime),
					new SqlParameter("@TeacherID", SqlDbType.NVarChar, 64),
					new SqlParameter("@CreateUserID", SqlDbType.Int),
					new SqlParameter("@JobFileURL", SqlDbType.NVarChar, 128),
					new SqlParameter("@ModifyUser", SqlDbType.NVarChar, 64),
					new SqlParameter("@ModifyTime", SqlDbType.DateTime),
					new SqlParameter("@JobFileSize", SqlDbType.Int)
					};
                SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSWrite, commandName, parms);
            }

            parms[0].Value = res_e_OffLineJob.JobID;
            if (res_e_OffLineJob.JobName != null) { parms[1].Value = res_e_OffLineJob.JobName; } else { parms[1].Value = DBNull.Value; }
            if (res_e_OffLineJob.JobDescription != null) { parms[2].Value = res_e_OffLineJob.JobDescription; } else { parms[2].Value = DBNull.Value; }
            if (res_e_OffLineJob.JobFileName != null) { parms[3].Value = res_e_OffLineJob.JobFileName; } else { parms[3].Value = DBNull.Value; }
            parms[4].Value = res_e_OffLineJob.IsUse;
            parms[5].Value = res_e_OffLineJob.OrgID;
            parms[6].Value = res_e_OffLineJob.BeginTime;
            parms[7].Value = res_e_OffLineJob.EndTime;
            parms[8].Value = res_e_OffLineJob.CreateTime;
            if (res_e_OffLineJob.TeacherID != null) { parms[9].Value = res_e_OffLineJob.TeacherID; } else { parms[9].Value = DBNull.Value; }
            parms[10].Value = res_e_OffLineJob.CreateUserID;
            if (res_e_OffLineJob.JobFileURL != null) { parms[11].Value = res_e_OffLineJob.JobFileURL; } else { parms[11].Value = DBNull.Value; }
            if (res_e_OffLineJob.ModifyUser != null) { parms[12].Value = res_e_OffLineJob.ModifyUser; } else { parms[12].Value = DBNull.Value; }
            parms[13].Value = res_e_OffLineJob.ModifyTime;
            parms[14].Value = res_e_OffLineJob.JobFileSize;
            #endregion
            SqlHelper.ExecuteNonQuery(ConnectionString.ETMSWrite, CommandType.StoredProcedure, commandName, parms);

        }

        /// <summary>
        /// 删除
        /// </summary>
        public void Remove(Guid jobID)
        {
            string commandName = "dbo.Pr_Res_e_OffLineJob_Delete";
            #region Parameters
            SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSWrite, commandName);
            if (parms == null)
            {
                parms = new SqlParameter[] {
					new SqlParameter("@JobID", SqlDbType.UniqueIdentifier)
				};
                SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSWrite, commandName, parms);
            }

            parms[0].Value = jobID;

            #endregion
            SqlHelper.ExecuteNonQuery(ConnectionString.ETMSWrite, CommandType.StoredProcedure, commandName, parms);
        }

        /// <summary>
        /// 保存
        /// </summary>
        public void Save(Res_e_OffLineJob res_e_OffLineJob)
        {
            string commandName = "dbo.Pr_Res_e_OffLineJob_Update";
            #region Parameters
            SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSWrite, commandName);
            if (parms == null)
            {
                parms = new SqlParameter[] {
					new SqlParameter("@JobID", SqlDbType.UniqueIdentifier),
					new SqlParameter("@JobName", SqlDbType.NVarChar, 100),
					new SqlParameter("@JobDescription", SqlDbType.NVarChar, 1024),
					new SqlParameter("@JobFileName", SqlDbType.NVarChar, 100),
					new SqlParameter("@IsUse", SqlDbType.Int),
					new SqlParameter("@OrgID", SqlDbType.Int),
					new SqlParameter("@BeginTime", SqlDbType.DateTime),
					new SqlParameter("@EndTime", SqlDbType.DateTime),
					new SqlParameter("@CreateTime", SqlDbType.DateTime),
					new SqlParameter("@TeacherID", SqlDbType.NVarChar, 64),
					new SqlParameter("@CreateUserID", SqlDbType.Int),
					new SqlParameter("@JobFileURL", SqlDbType.NVarChar, 128),
					new SqlParameter("@ModifyUser", SqlDbType.NVarChar, 64),
					new SqlParameter("@ModifyTime", SqlDbType.DateTime),
					new SqlParameter("@JobFileSize", SqlDbType.Int)
				};
                SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSWrite, commandName, parms);
            }

            parms[0].Value = res_e_OffLineJob.JobID;
            if (res_e_OffLineJob.JobName != null) { parms[1].Value = res_e_OffLineJob.JobName; } else { parms[1].Value = DBNull.Value; }
            if (res_e_OffLineJob.JobDescription != null) { parms[2].Value = res_e_OffLineJob.JobDescription; } else { parms[2].Value = DBNull.Value; }
            if (res_e_OffLineJob.JobFileName != null) { parms[3].Value = res_e_OffLineJob.JobFileName; } else { parms[3].Value = DBNull.Value; }
            parms[4].Value = res_e_OffLineJob.IsUse;
            parms[5].Value = res_e_OffLineJob.OrgID;
            parms[6].Value = res_e_OffLineJob.BeginTime;
            parms[7].Value = res_e_OffLineJob.EndTime;
            parms[8].Value = res_e_OffLineJob.CreateTime;
            if (res_e_OffLineJob.TeacherID != null) { parms[9].Value = res_e_OffLineJob.TeacherID; } else { parms[9].Value = DBNull.Value; }
            parms[10].Value = res_e_OffLineJob.CreateUserID;
            if (res_e_OffLineJob.JobFileURL != null) { parms[11].Value = res_e_OffLineJob.JobFileURL; } else { parms[11].Value = DBNull.Value; }
            if (res_e_OffLineJob.ModifyUser != null) { parms[12].Value = res_e_OffLineJob.ModifyUser; } else { parms[12].Value = DBNull.Value; }
            parms[13].Value = res_e_OffLineJob.ModifyTime;
            parms[14].Value = res_e_OffLineJob.JobFileSize;
            #endregion
            SqlHelper.ExecuteNonQuery(ConnectionString.ETMSWrite, CommandType.StoredProcedure, commandName, parms);
        }

        /// <summary>
        /// 根据标识获取对象
        /// </summary>
        public Res_e_OffLineJob GetById(Guid jobID)
        {
            Res_e_OffLineJob res_e_OffLineJob = null;

            string commandName = "dbo.Pr_Res_e_OffLineJob_GetByPK";
            #region Parameters
            SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSRead, commandName);
            if (parms == null)
            {
                parms = new SqlParameter[] {
					new SqlParameter("@JobID", SqlDbType.UniqueIdentifier)
				};
                SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSRead, commandName, parms);
            }

            parms[0].Value = jobID;

            #endregion
            using (SqlDataReader dataReader = SqlHelper.ExecuteReader(ConnectionString.ETMSRead, CommandType.StoredProcedure, commandName, parms))
            {
                if (dataReader.Read())
                {
                    res_e_OffLineJob = PopulateRes_e_OffLineJobFromDataReader(dataReader);
                }
            }

            return res_e_OffLineJob;
        }

        /// <summary>
        /// 根据参数获取对象列表（分页，可排序）
        /// </summary>
        public DataTable GetPagedList(int pageIndex, int pageSize, string sortExpression, string criteria, out int totalRecords)
        {
            string commandName = "dbo.Pr_Res_e_OffLineJob_GetPagedList";
            #region Parameters
            SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSRead, commandName);
            if (parms == null)
            {
                parms = new SqlParameter[] {
					new SqlParameter("@PageIndex", SqlDbType.Int),
					new SqlParameter("@PageSize", SqlDbType.Int),
					new SqlParameter("@SortExpression", SqlDbType.NVarChar),
					new SqlParameter("@Criteria", SqlDbType.NVarChar),
					new SqlParameter("@ReturnValue", SqlDbType.Int, 4, ParameterDirection.ReturnValue, false, 0, 0, String.Empty, DataRowVersion.Default, null)
				};
                SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSRead, commandName, parms);
            }

            parms[0].Value = pageIndex;
            parms[1].Value = pageSize;
            parms[2].Value = sortExpression;
            parms[3].Value = criteria;
            #endregion
            DataTable dt = SqlHelper.ExecuteDataset(ConnectionString.ETMSRead, CommandType.StoredProcedure, commandName, parms).Tables[0];
            totalRecords = (int)parms[4].Value;
            return dt;
        }

        /// <summary>
        /// 从DataReader中读取数据到业务对象
        /// </summary>
        private Res_e_OffLineJob PopulateRes_e_OffLineJobFromDataReader(SqlDataReader reader)
        {
            Res_e_OffLineJob res_e_OffLineJob = new Res_e_OffLineJob();

            int jobIDIndex = reader.GetOrdinal("JobID");
            if (!reader.IsDBNull(jobIDIndex))
            {
                res_e_OffLineJob.JobID = reader.GetGuid(jobIDIndex);
            }

            int jobNameIndex = reader.GetOrdinal("JobName");
            if (!reader.IsDBNull(jobNameIndex))
            {
                res_e_OffLineJob.JobName = reader.GetString(jobNameIndex);
            }

            int jobDescriptionIndex = reader.GetOrdinal("JobDescription");
            if (!reader.IsDBNull(jobDescriptionIndex))
            {
                res_e_OffLineJob.JobDescription = reader.GetString(jobDescriptionIndex);
            }

            int jobFileNameIndex = reader.GetOrdinal("JobFileName");
            if (!reader.IsDBNull(jobFileNameIndex))
            {
                res_e_OffLineJob.JobFileName = reader.GetString(jobFileNameIndex);
            }

            int isUseIndex = reader.GetOrdinal("IsUse");
            if (!reader.IsDBNull(isUseIndex))
            {
                res_e_OffLineJob.IsUse = reader.GetInt32(isUseIndex);
            }

            int orgIDIndex = reader.GetOrdinal("OrgID");
            if (!reader.IsDBNull(orgIDIndex))
            {
                res_e_OffLineJob.OrgID = reader.GetInt32(orgIDIndex);
            }

            int beginTimeIndex = reader.GetOrdinal("BeginTime");
            if (!reader.IsDBNull(beginTimeIndex))
            {
                res_e_OffLineJob.BeginTime = reader.GetDateTime(beginTimeIndex);
            }

            int endTimeIndex = reader.GetOrdinal("EndTime");
            if (!reader.IsDBNull(endTimeIndex))
            {
                res_e_OffLineJob.EndTime = reader.GetDateTime(endTimeIndex);
            }

            int createTimeIndex = reader.GetOrdinal("CreateTime");
            if (!reader.IsDBNull(createTimeIndex))
            {
                res_e_OffLineJob.CreateTime = reader.GetDateTime(createTimeIndex);
            }

            int teacherIDIndex = reader.GetOrdinal("TeacherID");
            if (!reader.IsDBNull(teacherIDIndex))
            {
                res_e_OffLineJob.TeacherID = reader.GetString(teacherIDIndex);
            }

            int createUserIDIndex = reader.GetOrdinal("CreateUserID");
            if (!reader.IsDBNull(createUserIDIndex))
            {
                res_e_OffLineJob.CreateUserID = reader.GetInt32(createUserIDIndex);
            }

            int jobFileURLIndex = reader.GetOrdinal("JobFileURL");
            if (!reader.IsDBNull(jobFileURLIndex))
            {
                res_e_OffLineJob.JobFileURL = reader.GetString(jobFileURLIndex);
            }

            int modifyUserIndex = reader.GetOrdinal("ModifyUser");
            if (!reader.IsDBNull(modifyUserIndex))
            {
                res_e_OffLineJob.ModifyUser = reader.GetString(modifyUserIndex);
            }

            int modifyTimeIndex = reader.GetOrdinal("ModifyTime");
            if (!reader.IsDBNull(modifyTimeIndex))
            {
                res_e_OffLineJob.ModifyTime = reader.GetDateTime(modifyTimeIndex);
            }

            int jobFileSizeIndex = reader.GetOrdinal("JobFileSize");
            if (!reader.IsDBNull(jobFileSizeIndex))
            {
                res_e_OffLineJob.JobFileSize = reader.GetInt32(jobFileSizeIndex);
            }

            return res_e_OffLineJob;
        }
    }
}
