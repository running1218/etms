//==================================================================================================
//Version 1.0, auto-generated.
//Generated By huangzhf.
//Date: 2012-5-6 14:53:50.
//==================================================================================================
//==================================================================================================
//This file is generated by CodeGenerator(Ver 2.1), a product of ZhouYonghua(Zhou_Yonghua@163.com).
//==================================================================================================

using System;
using System.Collections.Generic;
using System.Data;

using System.Data.SqlClient;
using ETMS.Utility.Data;

using ETMS.Components.Point.API.Entity;

namespace ETMS.Components.Point.Implement.DAL
{
    /// <summary>
    /// 学员积分原因规则表数据访问
    /// </summary>
    public partial class Point_Student_PointReasonRoleDataAccess
	{
		/// <summary>
		/// 增加
		/// </summary>
		public void Add(Point_Student_PointReasonRole point_Student_PointReasonRole)
		{
			string commandName = "dbo.Pr_Point_Student_PointReasonRole_Insert";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSWrite, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@StudentPointReasonRoleID", SqlDbType.UniqueIdentifier),
					new SqlParameter("@PointReasonTypeID", SqlDbType.Int),
					new SqlParameter("@OrgID", SqlDbType.Int),
					new SqlParameter("@PointReason", SqlDbType.NVarChar, 200),
					new SqlParameter("@GivePoints", SqlDbType.Int),
					new SqlParameter("@IsUse", SqlDbType.Int),
					new SqlParameter("@CreateTime", SqlDbType.DateTime),
					new SqlParameter("@CreateUserID", SqlDbType.Int),
					new SqlParameter("@CreateUser", SqlDbType.NVarChar, 128),
					new SqlParameter("@ModifyTime", SqlDbType.DateTime),
					new SqlParameter("@ModifyUser", SqlDbType.NVarChar, 128),
					new SqlParameter("@Remark", SqlDbType.NVarChar, -1)
					};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSWrite, commandName, parms);
			}
			
			parms[0].Value = point_Student_PointReasonRole.StudentPointReasonRoleID;
			parms[1].Value = point_Student_PointReasonRole.PointReasonTypeID;
			parms[2].Value = point_Student_PointReasonRole.OrgID;
			if (point_Student_PointReasonRole.PointReason!= null){ parms[3].Value = point_Student_PointReasonRole.PointReason; } else { parms[3].Value = DBNull.Value; }
			parms[4].Value = point_Student_PointReasonRole.GivePoints;
			parms[5].Value = point_Student_PointReasonRole.IsUse;
			parms[6].Value = point_Student_PointReasonRole.CreateTime;
			parms[7].Value = point_Student_PointReasonRole.CreateUserID;
			if (point_Student_PointReasonRole.CreateUser!= null){ parms[8].Value = point_Student_PointReasonRole.CreateUser; } else { parms[8].Value = DBNull.Value; }
			parms[9].Value = point_Student_PointReasonRole.ModifyTime;
			if (point_Student_PointReasonRole.ModifyUser!= null){ parms[10].Value = point_Student_PointReasonRole.ModifyUser; } else { parms[10].Value = DBNull.Value; }
			if (point_Student_PointReasonRole.Remark!= null){ parms[11].Value = point_Student_PointReasonRole.Remark; } else { parms[11].Value = DBNull.Value; }
			#endregion
			SqlHelper.ExecuteNonQuery(ConnectionString.ETMSWrite, CommandType.StoredProcedure, commandName, parms);
			
		}
		
		/// <summary>
		/// 删除
		/// </summary>
		public void Remove(Guid studentPointReasonRoleID)
		{
			string commandName = "dbo.Pr_Point_Student_PointReasonRole_Delete";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSWrite, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@StudentPointReasonRoleID", SqlDbType.UniqueIdentifier)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSWrite, commandName, parms);
			}
			
			parms[0].Value = studentPointReasonRoleID;
			
			#endregion
			SqlHelper.ExecuteNonQuery(ConnectionString.ETMSWrite, CommandType.StoredProcedure, commandName, parms);
		}
		
		/// <summary>
		/// 保存
		/// </summary>
		public void Save(Point_Student_PointReasonRole point_Student_PointReasonRole)
		{
			string commandName = "dbo.Pr_Point_Student_PointReasonRole_Update";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSWrite, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@StudentPointReasonRoleID", SqlDbType.UniqueIdentifier),
					new SqlParameter("@PointReasonTypeID", SqlDbType.Int),
					new SqlParameter("@OrgID", SqlDbType.Int),
					new SqlParameter("@PointReason", SqlDbType.NVarChar, 200),
					new SqlParameter("@GivePoints", SqlDbType.Int),
					new SqlParameter("@IsUse", SqlDbType.Int),
					new SqlParameter("@CreateTime", SqlDbType.DateTime),
					new SqlParameter("@CreateUserID", SqlDbType.Int),
					new SqlParameter("@CreateUser", SqlDbType.NVarChar, 128),
					new SqlParameter("@ModifyTime", SqlDbType.DateTime),
					new SqlParameter("@ModifyUser", SqlDbType.NVarChar, 128),
					new SqlParameter("@Remark", SqlDbType.NVarChar, -1)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSWrite, commandName, parms);
			}
			
			parms[0].Value = point_Student_PointReasonRole.StudentPointReasonRoleID;
			parms[1].Value = point_Student_PointReasonRole.PointReasonTypeID;
			parms[2].Value = point_Student_PointReasonRole.OrgID;
			if (point_Student_PointReasonRole.PointReason!= null){ parms[3].Value = point_Student_PointReasonRole.PointReason; } else { parms[3].Value = DBNull.Value; }
			parms[4].Value = point_Student_PointReasonRole.GivePoints;
			parms[5].Value = point_Student_PointReasonRole.IsUse;
			parms[6].Value = point_Student_PointReasonRole.CreateTime;
			parms[7].Value = point_Student_PointReasonRole.CreateUserID;
			if (point_Student_PointReasonRole.CreateUser!= null){ parms[8].Value = point_Student_PointReasonRole.CreateUser; } else { parms[8].Value = DBNull.Value; }
			parms[9].Value = point_Student_PointReasonRole.ModifyTime;
			if (point_Student_PointReasonRole.ModifyUser!= null){ parms[10].Value = point_Student_PointReasonRole.ModifyUser; } else { parms[10].Value = DBNull.Value; }
			if (point_Student_PointReasonRole.Remark!= null){ parms[11].Value = point_Student_PointReasonRole.Remark; } else { parms[11].Value = DBNull.Value; }
			#endregion
			SqlHelper.ExecuteNonQuery(ConnectionString.ETMSWrite, CommandType.StoredProcedure, commandName, parms);
		}
		
		/// <summary>
		/// 根据标识获取对象
		/// </summary>
		public Point_Student_PointReasonRole GetById(Guid studentPointReasonRoleID)
		{
			Point_Student_PointReasonRole point_Student_PointReasonRole = null;
			
			string commandName = "dbo.Pr_Point_Student_PointReasonRole_GetByPK";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSRead, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@StudentPointReasonRoleID", SqlDbType.UniqueIdentifier)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSRead, commandName, parms);
			}
			
			parms[0].Value = studentPointReasonRoleID;
			
			#endregion
			using (SqlDataReader dataReader = SqlHelper.ExecuteReader(ConnectionString.ETMSRead, CommandType.StoredProcedure, commandName, parms))
			{
				if (dataReader.Read())
				{
					point_Student_PointReasonRole = PopulatePoint_Student_PointReasonRoleFromDataReader(dataReader);
				}
			}
			
			return point_Student_PointReasonRole;
		}				
		
		/// <summary>
		/// 根据参数获取对象列表（分页，可排序）
		/// </summary>
		public DataTable GetPagedList(int pageIndex, int pageSize, string sortExpression, string criteria, out int totalRecords)
		{			
			string commandName = "dbo.Pr_Point_Student_PointReasonRole_GetPagedList";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSRead, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@PageIndex", SqlDbType.Int),
					new SqlParameter("@PageSize", SqlDbType.Int),
					new SqlParameter("@SortExpression", SqlDbType.VarChar),
					new SqlParameter("@Criteria", SqlDbType.VarChar),
					new SqlParameter("@ReturnValue", SqlDbType.Int, 4, ParameterDirection.ReturnValue, false, 0, 0, String.Empty, DataRowVersion.Default, null)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSRead, commandName, parms);
			}
			
			parms[0].Value = pageIndex;
			parms[1].Value = pageSize;
			parms[2].Value = sortExpression;
			parms[3].Value = criteria;
			#endregion
			DataTable dt=SqlHelper.ExecuteDataset(ConnectionString.ETMSRead, CommandType.StoredProcedure, commandName, parms).Tables[0];
			totalRecords = (int)parms[4].Value;
			return dt;
		}
		
	    /// <summary>
		/// 根据参数获取对象列表（分页，可排序）
		/// </summary>
		public IList<Point_Student_PointReasonRole> GetEntityList(int pageIndex, int pageSize, string sortExpression, string criteria, out int totalRecords)
		{			
            IList<Point_Student_PointReasonRole> list=new List<Point_Student_PointReasonRole>();
			string commandName = "dbo.Pr_Point_Student_PointReasonRole_GetPagedList";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSRead, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@PageIndex", SqlDbType.Int),
					new SqlParameter("@PageSize", SqlDbType.Int),
					new SqlParameter("@SortExpression", SqlDbType.VarChar),
					new SqlParameter("@Criteria", SqlDbType.VarChar),
					new SqlParameter("@ReturnValue", SqlDbType.Int, 4, ParameterDirection.ReturnValue, false, 0, 0, String.Empty, DataRowVersion.Default, null)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSRead, commandName, parms);
			}
			
			parms[0].Value = pageIndex;
			parms[1].Value = pageSize;
			parms[2].Value = sortExpression;
			parms[3].Value = criteria;
			#endregion
            using (SqlDataReader dataReader = SqlHelper.ExecuteReader(ConnectionString.ETMSRead, CommandType.StoredProcedure, commandName, parms))
			{
				while (dataReader.Read())
				{
					list.Add(PopulatePoint_Student_PointReasonRoleFromDataReader(dataReader));
				}
			}			
			totalRecords = (int)parms[4].Value;
			return list;
		}
		
		/// <summary>
		/// 从DataReader中读取数据到业务对象
		/// </summary>
		private Point_Student_PointReasonRole PopulatePoint_Student_PointReasonRoleFromDataReader(SqlDataReader reader)
		{
			Point_Student_PointReasonRole point_Student_PointReasonRole = new Point_Student_PointReasonRole();
			
			int studentPointReasonRoleIDIndex = reader.GetOrdinal("StudentPointReasonRoleID"); 
			if(!reader.IsDBNull(studentPointReasonRoleIDIndex))
			{
				point_Student_PointReasonRole.StudentPointReasonRoleID= reader.GetGuid(studentPointReasonRoleIDIndex);
			}
			
			int pointReasonTypeIDIndex = reader.GetOrdinal("PointReasonTypeID"); 
			if(!reader.IsDBNull(pointReasonTypeIDIndex))
			{
				point_Student_PointReasonRole.PointReasonTypeID= reader.GetInt32(pointReasonTypeIDIndex);
			}
			
			int orgIDIndex = reader.GetOrdinal("OrgID"); 
			if(!reader.IsDBNull(orgIDIndex))
			{
				point_Student_PointReasonRole.OrgID= reader.GetInt32(orgIDIndex);
			}
			
			int pointReasonIndex = reader.GetOrdinal("PointReason"); 
			if(!reader.IsDBNull(pointReasonIndex))
			{
				point_Student_PointReasonRole.PointReason= reader.GetString(pointReasonIndex);
			}
			
			int givePointsIndex = reader.GetOrdinal("GivePoints"); 
			if(!reader.IsDBNull(givePointsIndex))
			{
				point_Student_PointReasonRole.GivePoints= reader.GetInt32(givePointsIndex);
			}
			
			int isUseIndex = reader.GetOrdinal("IsUse"); 
			if(!reader.IsDBNull(isUseIndex))
			{
				point_Student_PointReasonRole.IsUse= reader.GetInt32(isUseIndex);
			}
			
			int createTimeIndex = reader.GetOrdinal("CreateTime"); 
			if(!reader.IsDBNull(createTimeIndex))
			{
				point_Student_PointReasonRole.CreateTime= reader.GetDateTime(createTimeIndex);
			}
			
			int createUserIDIndex = reader.GetOrdinal("CreateUserID"); 
			if(!reader.IsDBNull(createUserIDIndex))
			{
				point_Student_PointReasonRole.CreateUserID= reader.GetInt32(createUserIDIndex);
			}
			
			int createUserIndex = reader.GetOrdinal("CreateUser"); 
			if(!reader.IsDBNull(createUserIndex))
			{
				point_Student_PointReasonRole.CreateUser= reader.GetString(createUserIndex);
			}
			
			int modifyTimeIndex = reader.GetOrdinal("ModifyTime"); 
			if(!reader.IsDBNull(modifyTimeIndex))
			{
				point_Student_PointReasonRole.ModifyTime= reader.GetDateTime(modifyTimeIndex);
			}
			
			int modifyUserIndex = reader.GetOrdinal("ModifyUser"); 
			if(!reader.IsDBNull(modifyUserIndex))
			{
				point_Student_PointReasonRole.ModifyUser= reader.GetString(modifyUserIndex);
			}
			
			int remarkIndex = reader.GetOrdinal("Remark"); 
			if(!reader.IsDBNull(remarkIndex))
			{
				point_Student_PointReasonRole.Remark= reader.GetString(remarkIndex);
			}
			
			return point_Student_PointReasonRole; 
		}
	}
}
