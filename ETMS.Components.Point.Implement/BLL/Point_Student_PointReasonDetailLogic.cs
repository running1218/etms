//==================================================================================================
//Version 1.0, auto-generated.
//Generated By huangzhf.
//Date: 2012-5-6 14:53:50.
//==================================================================================================
//==================================================================================================
//This file is generated by CodeGenerator(Ver 2.1), a product of ZhouYonghua(Zhou_Yonghua@163.com).
//==================================================================================================

using System;
using System.Collections.Generic;
using System.Linq;
using System.Data;

using ETMS.AppContext;
using ETMS.Utility;
using ETMS.Utility.Logging;
using ETMS.Components.Point.API.Entity;

using ETMS.Components.Basic.Implement.BLL.TrainingItem.Student;
using ETMS.Components.Basic.API.Entity.TrainingItem.Student;

namespace ETMS.Components.Point.Implement.BLL
{
    /// <summary>
    /// 学员学习过程获得积分表业务逻辑
    /// </summary>
    public partial class Point_Student_PointReasonDetailLogic
    {
        #region 业务操作
        
        /// <summary>
        /// 培训项目学员保存
        /// </summary>
        /// <param name="entity">培训项目学员实体</param>
        /// <param name="action">操作方法：添加或者修改</param>
        public void Save(Point_Student_PointReasonDetail entity, OperationAction action)
        {
            try
            {
                if (action == OperationAction.Add)
                {
                    entity.StudentPointReasonDetailID = entity.StudentPointReasonDetailID.NewID();
                    Add(entity);
                }
                else if (action == OperationAction.Edit)
                    Update(entity);
            }
            catch (System.Data.SqlClient.SqlException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 批量设置学员的积分：学员学习过程获得积分表
        /// </summary>
        /// <param name="studentSignupIDArray">学员报名ID数组</param>
        /// <param name="studentPointReasonRoleID">学员积分原因规则ID</param>
        /// <param name="pointReason">获得积分原因</param>
        /// <param name="accessPoints">获得积分</param>
        /// <param name="remark">备注</param>
        /// <param name="createUser">操作员</param>
        /// <param name="createUserID">操作员ID</param>
        public void BatchAddStudentPointReasonDetail(Guid[] studentSignupIDArray, Guid studentPointReasonRoleID, string pointReason, int accessPoints, string remark, string createUser, int createUserID)
        {
            Point_Student_PointReasonDetail entity = new Point_Student_PointReasonDetail();
            entity.StudentPointReasonRoleID = studentPointReasonRoleID;
            entity.PointReason = pointReason;
            entity.AccessPoints = accessPoints;
            entity.Remark = remark;
            entity.CreateUser = createUser;
            entity.CreateUserID = createUserID;
            entity.CreateTime = System.DateTime.Now;

            string errorMsgALL = "";
            int noSuccessNum = 0;
            foreach (Guid studentSignupID in studentSignupIDArray)
            {
                try
                {
                    //获取报名ID对应的学员ID
                    Sty_StudentSignupLogic logic = new Sty_StudentSignupLogic();
                    Sty_StudentSignup entitySignup = logic.GetById(studentSignupID);
                    entity.StudentPointReasonDetailID = System.Guid.NewGuid();
                    entity.StudentID = entitySignup.UserID;
                    entity.StudentSignupID = studentSignupID;
                    Save(entity, OperationAction.Add);
                }
                catch (System.Data.SqlClient.SqlException ex)
                {
                    errorMsgALL += ex.Message;
                    noSuccessNum++;
                }
            }
            if (noSuccessNum > 0)
            {
                string errorMsg = "批量设置积分结果：当前要设置积分的学员为“{0}”个，有“{1}”个没有没有设置！原因是：" + errorMsgALL;
                throw new ETMS.AppContext.BusinessException(string.Format(errorMsg, studentSignupIDArray.Length, noSuccessNum));
            }
        }

        /// <summary>
        /// 删除
        /// </summary>
        public void doRemove(Guid studentPointReasonDetailID)
        {
            try
            {
                DAL.Remove(studentPointReasonDetailID);
                //记录删除日志（根据ID删除）
                BizLogHelper.Operate(studentPointReasonDetailID, "删除");
            }
            catch (System.Data.SqlClient.SqlException ex)
            {
                //枚举数据约束异常并转换为业务异常，数据已经使用
                if (ex.Message.IndexOf("FK_", StringComparison.InvariantCultureIgnoreCase) != -1)
                {
                    throw new ETMS.AppContext.BusinessException(".Point_Student_PointReasonDetail.DataUsed");
                }
                //如果仍未处理，则抛出
                throw ex;
            }
        }

        #endregion

        #region 数据查询
       
        /// <summary>
        /// 获取所有可以录入“学习过程积分”的培训项目列表
        /// </summary>
        /// <returns></returns>
        public DataTable GetCanInputPointTrainingItemList()
        {
            return DAL.GetCanInputPointTrainingItemList();
        }

        /// <summary>
        /// 获取某个组织机构的所有可以录入“学习过程积分”的培训项目列表
        /// </summary>
        /// <param name="orgID">组织机构ID</param>
        /// <returns></returns>
        public DataTable GetCanInputPointTrainingItemListByOrgID(int orgID)
        {
            return DAL.GetCanInputPointTrainingItemListByOrgID(orgID);
        }

        /// <summary>
        /// 统计某个培训项目的学员已经录入但未发布的“学习过程”的积分情况
        /// </summary>
        /// <param name="trainingItemID">培训项目ID </param>
        /// <param name="pageIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="sortExpression"></param>
        /// <param name="criteria"></param>
        /// <param name="totalRecords"></param>
        /// <returns></returns>
        public DataTable StatStudentInputPointListByTrainingItemID(Guid trainingItemID, int pageIndex, int pageSize, string sortExpression, string criteria, out int totalRecords)
        {
            if ((sortExpression == "") || (sortExpression == null))
            {
                sortExpression = " u.OrganizationID ,u.RealName ";
            }
            return DAL.StatStudentInputPointListByTrainingItemID(trainingItemID, pageIndex, pageSize, sortExpression, criteria, out  totalRecords);
        }

        /// <summary>
        /// 统计某个学员报名获得的未发布“学习过程”的积分总和
        /// </summary>
        /// <param name="studentSignupID"></param>
        /// <returns></returns>
        public Int64 StatStudentInputPointByStudentSignupID(Guid studentSignupID)
        {
            return DAL.StatStudentInputPointByStudentSignupID(studentSignupID);
        }

        /// <summary>
        /// 获取所有学员项目报名的所有基本信息
        /// </summary>
        /// <param name="pageIndex">起始页</param>
        /// <param name="pageSize">每页的记录数</param>
        /// <param name="sortExpression">排序方式</param>
        /// <param name="criteria">以 AND 打头的查询条件</param>
        /// <param name="totalRecords">所有满足条件的记录数</param>
        public DataTable GetCanInputPointStudentList( int pageIndex, int pageSize, string sortExpression, string criteria, out int totalRecords)
        {
            Sty_StudentSignupLogic logic = new Sty_StudentSignupLogic();
            return logic.GetStudentSignupAllInfoList( pageIndex,  pageSize,  sortExpression,  criteria, out  totalRecords);
        }

        /// <summary>
        /// 获取某个培训项目的所有学员项目报名的所有基本信息
        /// </summary>
        /// <param name="trainingItemID">培训项目ID</param>
        /// <param name="pageIndex">起始页</param>
        /// <param name="pageSize">每页的记录数</param>
        /// <param name="sortExpression">排序方式</param>
        /// <param name="criteria">以 AND 打头的查询条件</param>
        /// <param name="totalRecords">所有满足条件的记录数</param>
        public DataTable GetCanInputPointStudentListByTrainingItemID(Guid trainingItemID,int pageIndex, int pageSize, string sortExpression, string criteria, out int totalRecords)
        {
            criteria += string.Format(" AND c.TrainingItemID='{0}'", trainingItemID);
            return GetCanInputPointStudentList(pageIndex, pageSize, sortExpression, criteria, out  totalRecords);
        }

        /// <summary>
        /// 统计某个培训项目的学员已经录入但未发布的“学习过程”的积分情况
        /// FROM Point_Student_PointReasonDetail a
        /// INNER JOIN Sty_StudentSignup b on b.StudentSignupID =a.StudentSignupID
        /// INNER JOIN Tr_Item c on c.TrainingItemID =b.TrainingItemID
        /// INNER JOIN Site_User u on u.UserID=b.UserID
        /// INNER JOIN Site_Student s on s.UserID=u.UserID
        /// LEFT JOIN Sty_ClassStudent g on g.StudentSignupID = b.StudentSignupID
        /// LEFT JOIN Sty_Class h on h.ClassID = g.ClassID
        /// LEFT JOIN (
        ///     select
        ///         c.ClassStudentID,c.StudentSignupID,c.UserID
        ///         ,b.ClassSubgroupID,b.ClassSubgroupName
        ///     from Sty_ClassSubgroupStudent a
        ///         inner join Sty_ClassSubgroup b on b.ClassSubgroupID = a.ClassSubgroupID
        ///         inner join Sty_ClassStudent c on c.ClassStudentID = a.ClassStudentID
        ///         inner join Sty_Class d on d.ClassID = c.ClassID
        ///         inner join Sty_StudentSignup e on e.StudentSignupID =c.StudentSignupID
        ///         ) j on j.UserID= s.UserID and j.StudentSignupID=b.StudentSignupID
        /// </summary>
        /// <param name="pageIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="sortExpression"></param>
        /// <param name="criteria"></param>
        /// <param name="totalRecords"></param>
        /// <returns></returns>
        public DataTable GetStudentInputPointAllInfoList(int pageIndex, int pageSize, string sortExpression, string criteria, out int totalRecords)
        {
            return DAL.GetStudentInputPointAllInfoList(pageIndex, pageSize, sortExpression, criteria, out  totalRecords);
        }

        /// <summary>
        /// 获取某个报名学员的所有已经录入但未发布的“学习过程”的积分情况
        /// </summary>
        /// <param name="studentSignupID">学员报名ID</param>
        /// <param name="pageIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="sortExpression"></param>
        /// <param name="criteria"></param>
        /// <param name="totalRecords"></param>
        /// <returns></returns>
        public DataTable GetStudentInputPointAllInfoListByStudentSignupID(Guid studentSignupID, int pageIndex, int pageSize, string sortExpression, string criteria, out int totalRecords)
        {
            criteria += string.Format(" AND a.StudentSignupID='{0}'", studentSignupID);
            if ((sortExpression == null) || (sortExpression == ""))
                sortExpression = " a.CreateTime desc ";
            return GetStudentInputPointAllInfoList(pageIndex, pageSize, sortExpression, criteria, out  totalRecords);
        }


        /// <summary>
        /// 获取某个学员的所有已经发布的“学习过程”的积分情况
        /// </summary>
        /// <param name="studentID">学员报名ID</param>
        /// <param name="pageIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="sortExpression"></param>
        /// <param name="criteria"></param>
        /// <param name="totalRecords"></param>
        /// <returns></returns>
        public DataTable GetStudentInputPointAllInfoListByStudentID(int studentID, int pageIndex, int pageSize, string sortExpression, string criteria, out int totalRecords)
        {
            criteria += string.Format(" AND a.StudentID='{0}'", studentID);
            criteria += " AND a.IsIssuePoint='1'";//积分已经发布
            if ((sortExpression == "") || (sortExpression == null))
                sortExpression = " c.ItemName,a.PointIssueTime desc "; //按项目名称和获取积分的时间倒序排序
            return GetStudentInputPointAllInfoList(pageIndex, pageSize, sortExpression, criteria, out  totalRecords);
        }



        #endregion

        #region 学习过程积分发布
        
        /// <summary>
        /// 获取学习过程积分发布列表
        /// </summary>
        /// <returns></returns>
        public List<Point_Student_PointReasonDetail> GetWaitPublishPointItemList()
        {
            return DAL.GetWaitPublishPointItemList(UserContext.Current.OrganizationID).ToList<Point_Student_PointReasonDetail>();
        }

        /// <summary>
        /// 获取学习过程积分发布列表
        /// </summary>
        /// <param name="trainingItemID"></param>
        /// <param name="pageIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRecords"></param>
        /// <returns></returns>
        public List<Point_Student_PointReasonDetail> GetWaitPublishPointItemList(Guid trainingItemID, int pageIndex, int pageSize, out int totalRecords)
        {
            var source = GetWaitPublishPointItemList();

            if (null != trainingItemID && trainingItemID != default(Guid))
            {
                totalRecords = 1;
                return source.Where(f => f.TrainingItemID.Equals(trainingItemID)).ToList();
            }

            return source.PageList<Point_Student_PointReasonDetail>(pageIndex, pageSize, out totalRecords);
        }

        /// <summary>
        /// 获取学习过程学员积分待发布列表
        /// </summary>
        /// <param name="trainingItemID"></param>
        /// <param name="pageIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRecords"></param>
        /// <returns></returns>
        public List<PointStudentReasonStudentInfo> GetNotPublishPointStudentList(Guid trainingItemID, int pageIndex, int pageSize, out int totalRecords)
        {
            var source = CacheHelper.Get(trainingItemID.ToString()) as List<PointStudentReasonStudentInfo>;
            if (null == source)
            {
                source = DAL.GetNotPublishPointStudentList(trainingItemID).ToList<PointStudentReasonStudentInfo>();
                CacheHelper.Add(trainingItemID.ToString(), source, TimeSpan.FromMilliseconds(5));
            }

            return source.PageList<PointStudentReasonStudentInfo>(pageIndex, pageSize, out totalRecords);
        }

        /// <summary>
        /// 学员学习过程积分发布
        /// </summary>
        /// <param name="trainingItemIDs"></param>
        public void StudentStudyProcessPublish(Guid[] trainingItemIDs)
        {
            foreach (var key in trainingItemIDs)
            {
                DAL.StudentStudyProcessPublish(key, UserContext.Current.UserID, UserContext.Current.RealName);
            }
        }
        #endregion
    }
}

