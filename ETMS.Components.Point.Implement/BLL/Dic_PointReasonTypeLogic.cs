//==================================================================================================
//Version 1.0, auto-generated.
//Generated By huangzhf.
//Date: 2012-5-7 22:43:22.
//==================================================================================================
//==================================================================================================
//This file is generated by CodeGenerator(Ver 2.1)
//==================================================================================================

using System;
using ETMS.Utility;
using ETMS.Utility.Logging;
using ETMS.Components.Point.API.Entity;
using ETMS.Components.Point.API;
namespace ETMS.Components.Point.Implement.BLL
{
    /// <summary>
    /// 积分原因分类（字典表）业务逻辑
    /// </summary>
    public partial class Dic_PointReasonTypeLogic
	{
 		/// <summary>
		/// 保存操作
		/// </summary>
		public void Save(Dic_PointReasonType dic_PointReasonType)
		{
            try
            {
			    if(dic_PointReasonType.PointReasonTypeID.IsEmpty())
                {
                    Add(dic_PointReasonType);
                }
                else
                {
                    Update(dic_PointReasonType);
                }
            }
           catch (System.Data.SqlClient.SqlException ex)
            {
                //枚举数据约束异常并转换为业务异常
                if (ex.Message.IndexOf("IX_", StringComparison.InvariantCultureIgnoreCase) != -1)
                {
				    throw new ETMS.AppContext.BusinessException(string.Format(BizErrorDefine.IX_Dic_PointReasonType_TypeName_Exists, dic_PointReasonType.PointReasonTypeName));
                }                
                //如果仍未处理，则抛出
                throw ex;
            } 
		} 

        /// <summary>
		/// 删除
		/// </summary>
		public void doRemove(Int32 pointReasonTypeID)
		{
            try
            {
			     DAL.Remove(pointReasonTypeID);
                 //记录删除日志（根据ID删除）
                 BizLogHelper.Operate(pointReasonTypeID,"删除");
            }
           catch (System.Data.SqlClient.SqlException ex)
            {
                //枚举数据约束异常并转换为业务异常，数据已经使用
                if (ex.Message.IndexOf("FK_",StringComparison.InvariantCultureIgnoreCase) != -1)
                {
				    throw new ETMS.AppContext.BusinessException(BizErrorDefine.Dic_PointReasonType_DataUsed);
                } 
                //如果仍未处理，则抛出
                throw ex;
            }  
		}  
	}
	
	
}

