//==================================================================================================
//Version 1.0, auto-generated.
//Generated By xueyb.
//Date: 2012-4-18 11:41:22.
//==================================================================================================
//==================================================================================================
//This file is generated by CodeGenerator(Ver 2.1), a product of ZhouYonghua(Zhou_Yonghua@163.com).
//==================================================================================================

using System;
using System.Collections.Generic;
using System.Data;

using System.Data.SqlClient;
using ETMS.Utility.Data;

using ETMS.Components.Evaluation.API.Entity;

namespace ETMS.Components.Evaluation.Implement.DAL
{
    /// <summary>
    /// 评价文字记录表数据访问
    /// </summary>
    public partial class Evaluation_PlateResultDataAccess
	{
		/// <summary>
		/// 增加
		/// </summary>
		public void Add(Evaluation_PlateResult evaluation_PlateResult)
		{
			string commandName = "dbo.Pr_Evaluation_PlateResult_Insert";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSWrite, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@ResultSubID", SqlDbType.UniqueIdentifier),
					new SqlParameter("@PlateID", SqlDbType.UniqueIdentifier),
					new SqlParameter("@UserID", SqlDbType.Int),
					new SqlParameter("@ObjectID", SqlDbType.NVarChar, 100),
					new SqlParameter("@EvaluationContent", SqlDbType.NVarChar, -1),
					new SqlParameter("@CreateTime", SqlDbType.DateTime)
					};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSWrite, commandName, parms);
			}
			
			parms[0].Value = evaluation_PlateResult.ResultSubID;
			parms[1].Value = evaluation_PlateResult.PlateID;
			parms[2].Value = evaluation_PlateResult.UserID;
			if (evaluation_PlateResult.ObjectID!= null){ parms[3].Value = evaluation_PlateResult.ObjectID; } else { parms[3].Value = DBNull.Value; }
			if (evaluation_PlateResult.EvaluationContent!= null){ parms[4].Value = evaluation_PlateResult.EvaluationContent; } else { parms[4].Value = DBNull.Value; }
			parms[5].Value = evaluation_PlateResult.CreateTime;
			#endregion
			SqlHelper.ExecuteNonQuery(ConnectionString.ETMSWrite, CommandType.StoredProcedure, commandName, parms);
			
		}
		
		/// <summary>
		/// 删除
		/// </summary>
		public void Remove(Guid resultSubID)
		{
			string commandName = "dbo.Pr_Evaluation_PlateResult_Delete";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSWrite, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@ResultSubID", SqlDbType.UniqueIdentifier)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSWrite, commandName, parms);
			}
			
			parms[0].Value = resultSubID;
			
			#endregion
			SqlHelper.ExecuteNonQuery(ConnectionString.ETMSWrite, CommandType.StoredProcedure, commandName, parms);
		}
		
		/// <summary>
		/// 保存
		/// </summary>
		public void Save(Evaluation_PlateResult evaluation_PlateResult)
		{
			string commandName = "dbo.Pr_Evaluation_PlateResult_Update";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSWrite, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@ResultSubID", SqlDbType.UniqueIdentifier),
					new SqlParameter("@PlateID", SqlDbType.UniqueIdentifier),
					new SqlParameter("@UserID", SqlDbType.Int),
					new SqlParameter("@ObjectID", SqlDbType.NVarChar, 100),
					new SqlParameter("@EvaluationContent", SqlDbType.NVarChar, -1),
					new SqlParameter("@CreateTime", SqlDbType.DateTime),
					new SqlParameter("@ApproveStatus", SqlDbType.Int),
					new SqlParameter("@ApproveTime", SqlDbType.DateTime),
                    new SqlParameter("@ApproveUserID", SqlDbType.Int)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSWrite, commandName, parms);
			}
			
			parms[0].Value = evaluation_PlateResult.ResultSubID;
			parms[1].Value = evaluation_PlateResult.PlateID;
			parms[2].Value = evaluation_PlateResult.UserID;
			if (evaluation_PlateResult.ObjectID!= null){ parms[3].Value = evaluation_PlateResult.ObjectID; } else { parms[3].Value = DBNull.Value; }
			if (evaluation_PlateResult.EvaluationContent!= null){ parms[4].Value = evaluation_PlateResult.EvaluationContent; } else { parms[4].Value = DBNull.Value; }
			parms[5].Value = evaluation_PlateResult.CreateTime;
            parms[6].Value = evaluation_PlateResult.ApproveStatus;
            parms[7].Value = evaluation_PlateResult.ApproveTime;
            parms[8].Value = evaluation_PlateResult.ApproveUserID;
			#endregion
			SqlHelper.ExecuteNonQuery(ConnectionString.ETMSWrite, CommandType.StoredProcedure, commandName, parms);
		}
		
		/// <summary>
		/// 根据标识获取对象
		/// </summary>
		public Evaluation_PlateResult GetById(Guid resultSubID)
		{
			Evaluation_PlateResult evaluation_PlateResult = null;
			
			string commandName = "dbo.Pr_Evaluation_PlateResult_GetByPK";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSRead, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@ResultSubID", SqlDbType.UniqueIdentifier)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSRead, commandName, parms);
			}
			
			parms[0].Value = resultSubID;
			
			#endregion
			using (SqlDataReader dataReader = SqlHelper.ExecuteReader(ConnectionString.ETMSRead, CommandType.StoredProcedure, commandName, parms))
			{
				if (dataReader.Read())
				{
					evaluation_PlateResult = PopulateEvaluation_PlateResultFromDataReader(dataReader);
				}
			}
			
			return evaluation_PlateResult;
		}				
		
		/// <summary>
		/// 根据参数获取对象列表（分页，可排序）
		/// </summary>
		public DataTable GetPagedList(int pageIndex, int pageSize, string sortExpression, string criteria, out int totalRecords)
		{			
			string commandName = "dbo.Pr_Evaluation_PlateResult_GetPagedList";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSRead, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@PageIndex", SqlDbType.Int),
					new SqlParameter("@PageSize", SqlDbType.Int),
					new SqlParameter("@SortExpression", SqlDbType.VarChar),
					new SqlParameter("@Criteria", SqlDbType.VarChar),
					new SqlParameter("@ReturnValue", SqlDbType.Int, 4, ParameterDirection.ReturnValue, false, 0, 0, String.Empty, DataRowVersion.Default, null)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSRead, commandName, parms);
			}
			
			parms[0].Value = pageIndex;
			parms[1].Value = pageSize;
			parms[2].Value = sortExpression;
			parms[3].Value = criteria;
			#endregion
			DataTable dt=SqlHelper.ExecuteDataset(ConnectionString.ETMSRead, CommandType.StoredProcedure, commandName, parms).Tables[0];
			totalRecords = (int)parms[4].Value;
			return dt;
		}
		
	    /// <summary>
		/// 根据参数获取对象列表（分页，可排序）
		/// </summary>
		public IList<Evaluation_PlateResult> GetEntityList(int pageIndex, int pageSize, string sortExpression, string criteria, out int totalRecords)
		{			
            IList<Evaluation_PlateResult> list=new List<Evaluation_PlateResult>();
			string commandName = "dbo.Pr_Evaluation_PlateResult_GetPagedList";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSRead, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@PageIndex", SqlDbType.Int),
					new SqlParameter("@PageSize", SqlDbType.Int),
					new SqlParameter("@SortExpression", SqlDbType.VarChar),
					new SqlParameter("@Criteria", SqlDbType.VarChar),
					new SqlParameter("@ReturnValue", SqlDbType.Int, 4, ParameterDirection.ReturnValue, false, 0, 0, String.Empty, DataRowVersion.Default, null)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSRead, commandName, parms);
			}
			
			parms[0].Value = pageIndex;
			parms[1].Value = pageSize;
			parms[2].Value = sortExpression;
			parms[3].Value = criteria;
			#endregion
            using (SqlDataReader dataReader = SqlHelper.ExecuteReader(ConnectionString.ETMSRead, CommandType.StoredProcedure, commandName, parms))
			{
				while (dataReader.Read())
				{
					list.Add(PopulateEvaluation_PlateResultFromDataReader(dataReader));
				}
			}			
			totalRecords = (int)parms[4].Value;
			return list;
		}
		
		/// <summary>
		/// 从DataReader中读取数据到业务对象
		/// </summary>
		private Evaluation_PlateResult PopulateEvaluation_PlateResultFromDataReader(SqlDataReader reader)
		{
			Evaluation_PlateResult evaluation_PlateResult = new Evaluation_PlateResult();
			
			int resultSubIDIndex = reader.GetOrdinal("ResultSubID"); 
			if(!reader.IsDBNull(resultSubIDIndex))
			{
				evaluation_PlateResult.ResultSubID= reader.GetGuid(resultSubIDIndex);
			}
			
			int plateIDIndex = reader.GetOrdinal("PlateID"); 
			if(!reader.IsDBNull(plateIDIndex))
			{
				evaluation_PlateResult.PlateID= reader.GetGuid(plateIDIndex);
			}
			
			int userIDIndex = reader.GetOrdinal("UserID"); 
			if(!reader.IsDBNull(userIDIndex))
			{
				evaluation_PlateResult.UserID= reader.GetInt32(userIDIndex);
			}
			
			int objectIDIndex = reader.GetOrdinal("ObjectID"); 
			if(!reader.IsDBNull(objectIDIndex))
			{
				evaluation_PlateResult.ObjectID= reader.GetString(objectIDIndex);
			}
			
			int evaluationContentIndex = reader.GetOrdinal("EvaluationContent"); 
			if(!reader.IsDBNull(evaluationContentIndex))
			{
				evaluation_PlateResult.EvaluationContent= reader.GetString(evaluationContentIndex);
			}
			
			int createTimeIndex = reader.GetOrdinal("CreateTime"); 
			if(!reader.IsDBNull(createTimeIndex))
			{
				evaluation_PlateResult.CreateTime= reader.GetDateTime(createTimeIndex);
            }

            int approveStatusIndex = reader.GetOrdinal("ApproveStatus");
            if (!reader.IsDBNull(approveStatusIndex))
            {
                evaluation_PlateResult.ApproveStatus = reader.GetInt32(approveStatusIndex);
            }

            int approveTimeIndex = reader.GetOrdinal("ApproveTime");
            if (!reader.IsDBNull(approveTimeIndex))
            {
                evaluation_PlateResult.ApproveTime = reader.GetDateTime(approveTimeIndex);
            }
            int approveUserIDIndex = reader.GetOrdinal("ApproveUserID");
            if (!reader.IsDBNull(approveUserIDIndex))
            {
                evaluation_PlateResult.ApproveUserID = reader.GetInt32(approveUserIDIndex);
            }
			return evaluation_PlateResult; 
		}
	}
}
