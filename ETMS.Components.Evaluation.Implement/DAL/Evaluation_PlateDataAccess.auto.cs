//==================================================================================================
//Version 1.0, auto-generated.
//Generated By running1218
//Date: 2012-4-18 11:41:22.
//==================================================================================================
//==================================================================================================
//This file is generated by CodeGenerator(Ver 2.1)
//==================================================================================================

using System;
using System.Collections.Generic;
using System.Data;

using System.Data.SqlClient;
using ETMS.Utility.Data;

using ETMS.Components.Evaluation.API.Entity;

namespace ETMS.Components.Evaluation.Implement.DAL
{
    /// <summary>
    /// 评价量表数据访问
    /// </summary>
    public partial class Evaluation_PlateDataAccess
	{
		/// <summary>
		/// 增加
		/// </summary>
		public void Add(Evaluation_Plate evaluation_Plate)
		{
			string commandName = "dbo.Pr_Evaluation_Plate_Insert";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSWrite, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@PlateID", SqlDbType.UniqueIdentifier),
					new SqlParameter("@ObjectTypeID", SqlDbType.Int),
					new SqlParameter("@PlateName", SqlDbType.NVarChar, 200),
					new SqlParameter("@IsUse", SqlDbType.Int),
					new SqlParameter("@MaxRepeat", SqlDbType.Int),
					new SqlParameter("@IsViewResult", SqlDbType.Bit),
					new SqlParameter("@IsOther", SqlDbType.Bit),
					new SqlParameter("@OtherTitle", SqlDbType.NVarChar, 200),
					new SqlParameter("@CreateTime", SqlDbType.DateTime),
					new SqlParameter("@CreateUserID", SqlDbType.Int),
					new SqlParameter("@CreateUser", SqlDbType.NVarChar, 128),
					new SqlParameter("@ModifyTime", SqlDbType.DateTime),
					new SqlParameter("@ModifyUser", SqlDbType.NVarChar, 128),
					new SqlParameter("@Remark", SqlDbType.NVarChar, -1)
					};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSWrite, commandName, parms);
			}
			
			parms[0].Value = evaluation_Plate.PlateID;
			parms[1].Value = evaluation_Plate.ObjectTypeID;
			if (evaluation_Plate.PlateName!= null){ parms[2].Value = evaluation_Plate.PlateName; } else { parms[2].Value = DBNull.Value; }
			parms[3].Value = evaluation_Plate.IsUse;
			parms[4].Value = evaluation_Plate.MaxRepeat;
			parms[5].Value = evaluation_Plate.IsViewResult;
			parms[6].Value = evaluation_Plate.IsOther;
			if (evaluation_Plate.OtherTitle!= null){ parms[7].Value = evaluation_Plate.OtherTitle; } else { parms[7].Value = DBNull.Value; }
			parms[8].Value = evaluation_Plate.CreateTime;
			parms[9].Value = evaluation_Plate.CreateUserID;
			if (evaluation_Plate.CreateUser!= null){ parms[10].Value = evaluation_Plate.CreateUser; } else { parms[10].Value = DBNull.Value; }
			parms[11].Value = evaluation_Plate.ModifyTime;
			if (evaluation_Plate.ModifyUser!= null){ parms[12].Value = evaluation_Plate.ModifyUser; } else { parms[12].Value = DBNull.Value; }
			if (evaluation_Plate.Remark!= null){ parms[13].Value = evaluation_Plate.Remark; } else { parms[13].Value = DBNull.Value; }
			#endregion
			SqlHelper.ExecuteNonQuery(ConnectionString.ETMSWrite, CommandType.StoredProcedure, commandName, parms);
			
		}
		
		/// <summary>
		/// 删除
		/// </summary>
		public void Remove(Guid plateID)
		{
			string commandName = "dbo.Pr_Evaluation_Plate_Delete";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSWrite, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@PlateID", SqlDbType.UniqueIdentifier)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSWrite, commandName, parms);
			}
			
			parms[0].Value = plateID;
			
			#endregion
			SqlHelper.ExecuteNonQuery(ConnectionString.ETMSWrite, CommandType.StoredProcedure, commandName, parms);
		}
		
		/// <summary>
		/// 保存
		/// </summary>
		public void Save(Evaluation_Plate evaluation_Plate)
		{
			string commandName = "dbo.Pr_Evaluation_Plate_Update";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSWrite, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@PlateID", SqlDbType.UniqueIdentifier),
					new SqlParameter("@ObjectTypeID", SqlDbType.Int),
					new SqlParameter("@PlateName", SqlDbType.NVarChar, 200),
					new SqlParameter("@IsUse", SqlDbType.Int),
					new SqlParameter("@MaxRepeat", SqlDbType.Int),
					new SqlParameter("@IsViewResult", SqlDbType.Bit),
					new SqlParameter("@IsOther", SqlDbType.Bit),
					new SqlParameter("@OtherTitle", SqlDbType.NVarChar, 200),
					new SqlParameter("@CreateTime", SqlDbType.DateTime),
					new SqlParameter("@CreateUserID", SqlDbType.Int),
					new SqlParameter("@CreateUser", SqlDbType.NVarChar, 128),
					new SqlParameter("@ModifyTime", SqlDbType.DateTime),
					new SqlParameter("@ModifyUser", SqlDbType.NVarChar, 128),
					new SqlParameter("@Remark", SqlDbType.NVarChar, -1)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSWrite, commandName, parms);
			}
			
			parms[0].Value = evaluation_Plate.PlateID;
			parms[1].Value = evaluation_Plate.ObjectTypeID;
			if (evaluation_Plate.PlateName!= null){ parms[2].Value = evaluation_Plate.PlateName; } else { parms[2].Value = DBNull.Value; }
			parms[3].Value = evaluation_Plate.IsUse;
			parms[4].Value = evaluation_Plate.MaxRepeat;
			parms[5].Value = evaluation_Plate.IsViewResult;
			parms[6].Value = evaluation_Plate.IsOther;
			if (evaluation_Plate.OtherTitle!= null){ parms[7].Value = evaluation_Plate.OtherTitle; } else { parms[7].Value = DBNull.Value; }
			parms[8].Value = evaluation_Plate.CreateTime;
			parms[9].Value = evaluation_Plate.CreateUserID;
			if (evaluation_Plate.CreateUser!= null){ parms[10].Value = evaluation_Plate.CreateUser; } else { parms[10].Value = DBNull.Value; }
			parms[11].Value = evaluation_Plate.ModifyTime;
			if (evaluation_Plate.ModifyUser!= null){ parms[12].Value = evaluation_Plate.ModifyUser; } else { parms[12].Value = DBNull.Value; }
			if (evaluation_Plate.Remark!= null){ parms[13].Value = evaluation_Plate.Remark; } else { parms[13].Value = DBNull.Value; }
			#endregion
			SqlHelper.ExecuteNonQuery(ConnectionString.ETMSWrite, CommandType.StoredProcedure, commandName, parms);
		}
		
		/// <summary>
		/// 根据标识获取对象
		/// </summary>
		public Evaluation_Plate GetById(Guid plateID)
		{
			Evaluation_Plate evaluation_Plate = null;
			
			string commandName = "dbo.Pr_Evaluation_Plate_GetByPK";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSRead, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@PlateID", SqlDbType.UniqueIdentifier)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSRead, commandName, parms);
			}
			
			parms[0].Value = plateID;
			
			#endregion
			using (SqlDataReader dataReader = SqlHelper.ExecuteReader(ConnectionString.ETMSRead, CommandType.StoredProcedure, commandName, parms))
			{
				if (dataReader.Read())
				{
					evaluation_Plate = PopulateEvaluation_PlateFromDataReader(dataReader);
				}
			}
			
			return evaluation_Plate;
		}				
		
		/// <summary>
		/// 根据参数获取对象列表（分页，可排序）
		/// </summary>
		public DataTable GetPagedList(int pageIndex, int pageSize, string sortExpression, string criteria, out int totalRecords)
		{			
			string commandName = "dbo.Pr_Evaluation_Plate_GetPagedList";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSRead, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@PageIndex", SqlDbType.Int),
					new SqlParameter("@PageSize", SqlDbType.Int),
					new SqlParameter("@SortExpression", SqlDbType.VarChar),
					new SqlParameter("@Criteria", SqlDbType.VarChar),
					new SqlParameter("@ReturnValue", SqlDbType.Int, 4, ParameterDirection.ReturnValue, false, 0, 0, String.Empty, DataRowVersion.Default, null)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSRead, commandName, parms);
			}
			
			parms[0].Value = pageIndex;
			parms[1].Value = pageSize;
			parms[2].Value = sortExpression;
			parms[3].Value = criteria;
			#endregion
			DataTable dt=SqlHelper.ExecuteDataset(ConnectionString.ETMSRead, CommandType.StoredProcedure, commandName, parms).Tables[0];
			totalRecords = (int)parms[4].Value;
			return dt;
		}
		
	    /// <summary>
		/// 根据参数获取对象列表（分页，可排序）
		/// </summary>
		public IList<Evaluation_Plate> GetEntityList(int pageIndex, int pageSize, string sortExpression, string criteria, out int totalRecords)
		{			
            IList<Evaluation_Plate> list=new List<Evaluation_Plate>();
			string commandName = "dbo.Pr_Evaluation_Plate_GetPagedList";
			#region Parameters
			SqlParameter[] parms = SqlHelperParameterCache.GetCachedParameterSet(ConnectionString.ETMSRead, commandName);
			if (parms == null)
			{
				parms = new SqlParameter[] {
					new SqlParameter("@PageIndex", SqlDbType.Int),
					new SqlParameter("@PageSize", SqlDbType.Int),
					new SqlParameter("@SortExpression", SqlDbType.VarChar),
					new SqlParameter("@Criteria", SqlDbType.VarChar),
					new SqlParameter("@ReturnValue", SqlDbType.Int, 4, ParameterDirection.ReturnValue, false, 0, 0, String.Empty, DataRowVersion.Default, null)
				};
				SqlHelperParameterCache.CacheParameterSet(ConnectionString.ETMSRead, commandName, parms);
			}
			
			parms[0].Value = pageIndex;
			parms[1].Value = pageSize;
			parms[2].Value = sortExpression;
			parms[3].Value = criteria;
			#endregion
            using (SqlDataReader dataReader = SqlHelper.ExecuteReader(ConnectionString.ETMSRead, CommandType.StoredProcedure, commandName, parms))
			{
				while (dataReader.Read())
				{
					list.Add(PopulateEvaluation_PlateFromDataReader(dataReader));
				}
			}			
			totalRecords = (int)parms[4].Value;
			return list;
		}
		
		/// <summary>
		/// 从DataReader中读取数据到业务对象
		/// </summary>
		private Evaluation_Plate PopulateEvaluation_PlateFromDataReader(SqlDataReader reader)
		{
			Evaluation_Plate evaluation_Plate = new Evaluation_Plate();
			
			int plateIDIndex = reader.GetOrdinal("PlateID"); 
			if(!reader.IsDBNull(plateIDIndex))
			{
				evaluation_Plate.PlateID= reader.GetGuid(plateIDIndex);
			}
			
			int objectTypeIDIndex = reader.GetOrdinal("ObjectTypeID"); 
			if(!reader.IsDBNull(objectTypeIDIndex))
			{
				evaluation_Plate.ObjectTypeID= reader.GetInt32(objectTypeIDIndex);
			}
			
			int plateNameIndex = reader.GetOrdinal("PlateName"); 
			if(!reader.IsDBNull(plateNameIndex))
			{
				evaluation_Plate.PlateName= reader.GetString(plateNameIndex);
			}
			
			int isUseIndex = reader.GetOrdinal("IsUse"); 
			if(!reader.IsDBNull(isUseIndex))
			{
				evaluation_Plate.IsUse= reader.GetInt32(isUseIndex);
			}
			
			int maxRepeatIndex = reader.GetOrdinal("MaxRepeat"); 
			if(!reader.IsDBNull(maxRepeatIndex))
			{
				evaluation_Plate.MaxRepeat= reader.GetInt32(maxRepeatIndex);
			}
			
			int isViewResultIndex = reader.GetOrdinal("IsViewResult"); 
			if(!reader.IsDBNull(isViewResultIndex))
			{
				evaluation_Plate.IsViewResult= reader.GetBoolean(isViewResultIndex);
			}
			
			int isOtherIndex = reader.GetOrdinal("IsOther"); 
			if(!reader.IsDBNull(isOtherIndex))
			{
				evaluation_Plate.IsOther= reader.GetBoolean(isOtherIndex);
			}
			
			int otherTitleIndex = reader.GetOrdinal("OtherTitle"); 
			if(!reader.IsDBNull(otherTitleIndex))
			{
				evaluation_Plate.OtherTitle= reader.GetString(otherTitleIndex);
			}
			
			int createTimeIndex = reader.GetOrdinal("CreateTime"); 
			if(!reader.IsDBNull(createTimeIndex))
			{
				evaluation_Plate.CreateTime= reader.GetDateTime(createTimeIndex);
			}
			
			int createUserIDIndex = reader.GetOrdinal("CreateUserID"); 
			if(!reader.IsDBNull(createUserIDIndex))
			{
				evaluation_Plate.CreateUserID= reader.GetInt32(createUserIDIndex);
			}
			
			int createUserIndex = reader.GetOrdinal("CreateUser"); 
			if(!reader.IsDBNull(createUserIndex))
			{
				evaluation_Plate.CreateUser= reader.GetString(createUserIndex);
			}
			
			int modifyTimeIndex = reader.GetOrdinal("ModifyTime"); 
			if(!reader.IsDBNull(modifyTimeIndex))
			{
				evaluation_Plate.ModifyTime= reader.GetDateTime(modifyTimeIndex);
			}
			
			int modifyUserIndex = reader.GetOrdinal("ModifyUser"); 
			if(!reader.IsDBNull(modifyUserIndex))
			{
				evaluation_Plate.ModifyUser= reader.GetString(modifyUserIndex);
			}
			
			int remarkIndex = reader.GetOrdinal("Remark"); 
			if(!reader.IsDBNull(remarkIndex))
			{
				evaluation_Plate.Remark= reader.GetString(remarkIndex);
			}
			
			return evaluation_Plate; 
		}
	}
}
